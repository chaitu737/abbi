var express = require('express');
var router = express.Router();
var { loginId, transactionKey } = require('../models/config');
var ApiContracts = require('authorizenet').APIContracts;
var ApiControllers = require('authorizenet').APIControllers;
var SDKConstants = require('authorizenet').Constants;
var { validateForm } = require('../models/validator');
var randomstring = require('randomstring');
var moment = require('moment');
var nodemailer = require('nodemailer');
var sql = require("mssql");
var json2csv = require('json2csv');
var json2xls = require('json2xls');
var csvtojson = require('csvtojson');
var fs = require('fs');
var multer = require('multer');
var path = require('path');
var xlstojson = require("xls-to-json-lc");
var xlsxtojson = require("xlsx-to-json-lc");
var xlsxj = require('xlsx-to-json')
var AdmZip = require('adm-zip');
require('dotenv').config()
var soap = require('soap');
var url = 'fedex-api/RateService/RateService_v31.wsdl';
var Request = require('request');
// let accessToken= 'shippo_test_858da7819cd69d9e5cef936c495769b84682968d';
// let accessToken = 'shippo_live_09bbf2860a067f9bc474e6b4298d2aae832c0aeb';
let accessToken = 'shippo_live_09bbf2860a067f9bc474e6b4298d2aae832c0aeb';
//----------------------------------------------------------------db connection------------------------------------------------------
var config = {
  user: process.env.db_user,
  password: process.env.db_password,
  server: process.env.db_server,
  port: process.env.db_port,
  database: process.env.db_database,
  options: {
    connectionTimeout: 50000,
    requestTimeout: 50000
  },
  pool: {
    max: 10,
    min: 0,
    idleTimeoutMillis: 30000
  }
};
// connect to your database
// -------------------------------------------------------------main-------------------------------------------------------------
router.get('/', function(req, res) {
  res.render('index');
});
router.get('/admin/addevent', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/addevent');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/eventview', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eventview');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/eventhome', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eventhome');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/resultboss', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/resultboss');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/classentrylist', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/classentrylist');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/classview', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/classview');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/bullboss', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/bullboss');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});


router.get('/admin/addclass', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/addclass');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/addjudges', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/addjudges');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/resupxml', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/resupxml');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/pastevent', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/pastevent');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/handlerlist', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/handlerlist');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/handlerform', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/handlerform');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/program', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/program');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/classlink', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/classlink');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
// About
router.get('/about', function(req, res) {
  res.render('about');
});
// Registration
// -------------------------------------------------------------Registration-----------------------------------------------------
router.get('/registration', function(req, res) {
  res.render('registration');
});
// -------------------------------------------------------------Events-----------------------------------------------------------
router.get('/events', function(req, res) {
  res.render('events');
});
// -------------------------------------------------------------ABBI Registration------------------------------------------------
router.get('/abbireg', function(req, res) {
  res.render('reg');
});
// -------------------------------------------------------------ABBI Programs----------------------------------------------------
router.get('/programs', function(req, res) {
  res.render('programs');
});
// -------------------------------------------------------------Login Page-------------------------------------------------------
router.get('/login', function(req, res) {
  res.render('login');
});
router.get('/printwo', function(req, res) {
  res.render('printwo');
});
router.get('/pedigree', function(req, res) {
  res.render('pedigree');
});
// -------------------------------------------------------------Logout Page-------------------------------------------------------
router.get('/logout', function(req, res){
  req.session.reset();
  res.redirect('/');
});

// -------------------------------------------------------------Home Page--------------------------------------------------------
router.get('/home', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/index');  
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/getParcels', function(req, res) {
      var body = req.body.products;
      var sql = `SELECT weight,length,width,height, 'in' as distance_unit, 'lb' as mass_unit FROM parcels WHERE Productcode IN (${body.map(obj => `'${obj.ProductCode}'`) })`;
      console.log(sql,'sqlll')
      request.query(sql, function (err, recordset) {
        console.log(recordset,'recordsettttt')
        if (recordset.recordset.length <= 0) {
          res.sendStatus(500);
        }
        else {
          res.send(recordset.recordset);
        }
      });
    });
  });
//----------------------------------------------------------Shipping---------------------------------------------------------------------
router.post('/saveShippingData',function(req,res){
  console.log(req.body,'saveshipping')
  var details = req.body.bills
  var parcels = req.body.parcels
  var shippingData = {
    "address_from": {
          "name": "American Bucking Bull Inc.",
          "street1": "101 W. Riverwalk",
          "street2": "",
          "city": "Pueblo",
          "state": "CO",
          "zip": "81003",
          "country": "US",
          "phone": "+1 719-242-2747",
          "email": "info@americanbuckingbull.com"
    },
    "address_to": {
      "name": details.LastName1 + details.FirstName1,
      "street1": details.Address1,
      "street2": "",
      "city": details.City1,
      "state":details.State1,
      "zip": details.Zip1,
      "country": details.Country1,
      "phone": details.Phone,
      "email": details.Email,
    },
    "parcels":parcels,
    "extra": {
    },
    "async": false
  }
  console.log(JSON.stringify(shippingData),'stringfyyyy')
  const options3 = {
    url:`https://api.goshippo.com/shipments/`,
    method: 'POST',
    headers: {
      'Authorization': `ShippoToken ${accessToken}`,
      'Content-Type':'application/json'
    },
    body:JSON.stringify(shippingData)
  };
  Request(options3, function (error, response, body3) {
  console.log(JSON.parse(body3),'body3')
  res.send(JSON.parse(body3).rates)
  })
});

sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/saveRatesIntoDb', function(req, res) {
        for(i=0;i<req.body.length;i++){
        var sql = "INSERT INTO shippingrates(Object_ID,Object_Created,shipment,amount,currency,amount_local,currency_local,Provider,servicename,servicetoken,Estimated_Days,Messages,carrier_account) VALUES ('" +req.body[i].object_id +"','" +req.body[i].object_created +"','" +req.body[i].shipment +"','"+req.body[i].amount +"','" +req.body[i].currency +"','" +req.body[i].amount_local +"','" +req.body[i].currency_local +"','" +req.body[i].provider +"','" +req.body[i].servicelevel.name +"','" +req.body[i].servicelevel.token +"','" +req.body[i].estimated_days +"','" +req.body[i].messages +"','" +req.body[i].carrier_account +"')";
        request.query(sql, function (err, recordsets) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
         
        }
      });
    }
    res.sendStatus(200)
    });
  });

//------------------------------------CREATE ORDER--------------------------------------------
router.post('/createShippingOrder',function(req,res,next){
  var body = req.body.bills
  var products = req.body.product;
  var shippingObj = req.body.shippingObj
  console.log(req.body,'second ship api')
  var shippingData = {
    "to_address": {
      "object_purpose": "PURCHASE",
        "city": body.City1,
        "company": "Shippo",
        "country": body.Country1,
        "email": body.Email,
        "name": body.LastName1 + body.FirstName1,
        "phone": body.Phone,
        "state":body.State1,
        "street1": body.Address1,
        "street2": "",
        "zip": body.Zip1
    },
    "items": products,
    "placed_at":new Date(),
    "order_number": "#001",
    "order_status": "PAID",
    "shipping_cost": shippingObj.shipping_cost,
    "shipping_cost_currency": "USD",
    "shipping_method":shippingObj.shipping_method,
    "subtotal_price": shippingObj.subtotal_price,
    "total_price": shippingObj.total_price,
    "total_tax": "0.00",
    "currency": "USD",
    "weight": "0.40",
    "weight_unit": "lb"
}
  const options3 = {
    url:`https://api.goshippo.com/orders/`,
    method: 'POST',
    headers: {
      'Authorization': `ShippoToken ${accessToken}`,
      'Content-Type':'application/json'
    },
    body:JSON.stringify(shippingData)
  };
  Request(options3, function (error, response, body3) {
  console.log(error,'error1');
  console.log(JSON.parse(body3),'body31')
  res.send(JSON.parse(body3))
  })
});
router.post('/trackingOrder',function(req,res){
  var bills = req.body.bills;
  var shippingDet = req.body.shippingDet;
  var totalAmount = req.body.shippingDet.totalAmount
  console.log(totalAmount,'totalAmounttotalAmount')
  var date = moment().format('MM-DD-YYYY');
  let tempObj = {
    rate : req.body.shippingDet.selectedObjectRateId,
    async : false
  }
  console.log(tempObj,'tempIbhh')
 
  const options3 = {
    url:`https://api.goshippo.com/transactions/`,
    method: 'POST',
    headers: {
      'Authorization': `ShippoToken ${accessToken}`,
      'Content-Type':'application/json'
    },
    body:JSON.stringify(tempObj)
  };
  Request(options3, function (error, response, body3) {
    console.log(totalAmount,'totalAmounttotalAmounttotalAmount')
    var trackingURL = JSON.parse(body3).tracking_url_provider
    var transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'abbi@integrity-tek.com',
        pass: 'Abbi@2021'
      }
    });

    var mailOptions = {
      from: 'no-reply',
      to: ['abbi@integrity-tek.com',req.body.bills.Email],
      subject: 'Shipping Successfull - ABBI',
      html:`<html>\n\n<body style=\"background-color:#e2e1e0;font-family: Open Sans, sans-serif;font-size:100%;font-weight:400;line-height:1.4;color:#000;\">\n  <table style=\"max-width:670px;margin:50px auto 10px;background-color:#fff;padding:50px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);-moz-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24); border-top: solid 10px #2C3E50;\">\n    <thead>\n      <tr>\n        <th style=\"text-align:left;\"><img style=\"max-width: 150px;\" src=\"\" alt=\"ABBI\"></th>\n        <th style=\"text-align:right;font-weight:400;\"> ${date}</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td colspan=\"2\" style=\"height:35px;\">\n          <h2 style=\"text-align: center; color: #2C3E50\">American Bucking Bull</h2>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"border: solid 1px #ddd; padding:10px 20px;\">\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:150px\">Shipping status</span><b style=\"color:green;font-weight:normal;margin:0\">Shipped</b></p>\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Tracking URL</span> <a href=${trackingURL} style=\"background-color: #4CAF50;border: none;color: white;padding: 10px 10px 10px 10px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;margin: 4px 2px;cursor: pointer;border-radius:4px\">Check Here</a>  </p>\n          <p style=\"font-size:14px;margin:0 0 0 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Order amount</span>$ ${totalAmount} </p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"height:35px;\"></td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Billing Address:</h3>\n          <p> ${req.body.bills.FirstName} ${req.body.bills.LastName} </p>\n          <p> ${req.body.bills.Address} </p>\n          <p> ${req.body.bills.City} , ${req.body.bills.State} , ${req.body.bills.Zip} </p>\n          <p> ${req.body.bills.Country} </p>\n          <p>Phone # : ${req.body.bills.Phone} </p>\n    <p>Email : ${req.body.bills.Email} \n    </td>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Shipping Address:</h3>\n          <p>${req.body.bills.Address1}</p>\n          <p>${req.body.bills.City1},${req.body.bills.State1},${req.body.bills.Zip1} </p>\n          <p>${req.body.bills.Country} </p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n        </td>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          </td>\n      </tr>\n    </tbody>\n    </table>\n</body>\n\n</html>`
    };

    transporter.sendMail(mailOptions, function(error, info){
      if (error) {
      } else {
      }
    });
  console.log(error,'error2');
  console.log(JSON.parse(body3),'body32')
  res.send(JSON.parse(body3))
  })
})

sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/saveTrackingData', function(req, res) {
    var trackingObj = req.body.trackingData
        var sql = "INSERT INTO Trackingitems (Trackingstatus,Trackingnumber,Tracking_url_provider,Label_url,ETA,_Order,Parcel,Billing,Qr_Code_Url,Rates) VALUES ('" +trackingObj.tracking_status +"','" +trackingObj.tracking_number +"','" +trackingObj.tracking_url_provider +"','"+trackingObj.label_url +"','" +trackingObj.eta +"','" +trackingObj.order +"','" +trackingObj.parcel +"', null ,'" +trackingObj.qr_code_url +"', null )";
        request.query(sql, function (err, recordsets) {
          if (err){
            res.sendStatus(500);
          }
          else {
    res.send(recordsets.recordset)
          // console.log(recordsets.recordset)  
      }
    });
  });
});
router.get('/inventory', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/inventory');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/success', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/success');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/fail', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/fail');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/transferedanimals', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/transferedanimals');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/current', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/current');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/previous', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/previous');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/deceased', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/deceased');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/all', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/all');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/profile', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/profile');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/changepassword', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/changepassword');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/searchanimal', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/searchanimal');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/registeranimal', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/registeranimal');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/holdingpen', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/holdingpen');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/superstakes', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/superstakes');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/workorder', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/workorder');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/sponsoredevents', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/sponsoredevents');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/onlinestore', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/onlinestore');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/news', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/news');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/schedule', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/schedule');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/results', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/results');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/standings', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/standings');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/competition', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/competition');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/entries', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/entries');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/enterevents', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/enterevents');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/payment', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/payment');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/contact', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/contact');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/custom', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/custom');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/gcustom', function(req, res, next) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    res.render('home/gcustom');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
// Admin Section
router.get('/admin/home', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/index');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/printworkorder',function(req,res){
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('printworkorder');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
})
router.get('/pedigree',function(req,res){
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('pedigree');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
})
router.get('/admin/main', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/main');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/transferedanimals', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/transferedanimals');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/admin/eventwithouteid', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eventwithouteid');
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
router.get('/admin/editanimal', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/editanimal');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/editanimals', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/editanimals');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/workorders', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/workorders');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/addnewanimal', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/addnewanimal');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/searchanimal', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/searchanimal');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/addmember', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/addmember');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/memberprofile', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/memberprofile');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/searchmembers', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/searchmembers');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/memberpayments', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/memberpayments');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/workorder', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/workorder');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/oevents', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/oevents');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/custompayments', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/custompayments');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/groupcustompay', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/groupcustompay');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/eventpayments', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eventpayments');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/eventroster', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eventroster');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/eventeidmanager', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eventeidmanager');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/eventeidimport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eventeidimport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/breederscertificate', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/breederscertificate');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/superstakes', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/superstakes');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/onlinestore', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/onlinestore');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/discountmanager', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/discountmanager');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/eidorderexport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eidorderexport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/eidorderimport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/eidorderimport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/dnatesting', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/dnatesting');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/dnaverify', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/dnaverify');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/importlabresult', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/importlabresult');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/genoresearch', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/genoresearch');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/bulkemail', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/bulkemail');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/membershipdue', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/membershipdue');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/workorderprice', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/workorderprice');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/membershipprices', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/membershipprices');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/registrationprices', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/registrationprices');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/utilities', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/utilities');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/animalearning', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/animalearning');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/approval', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/approval');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/memberapproval', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/memberapproval');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/databasebackup', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/databasebackup');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/bulkemailoutbox', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/bulkemailoutbox');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/emailoutbox', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/emailoutbox');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/rlist', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/rlist');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});

router.get('/admin/reports', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/reports');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/adhoc', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/adhocdhoc');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/memberInventoryReport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/memberInventoryReport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/memberDueDateReport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/memberDueDateReport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/membersStartdateReport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/membersStartdateReport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/animalBirthDateReport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/animalBirthDateReport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/animalRegReports', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/animalRegReports');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/membershipbyMonthReport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/membershipbyMonthReport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/membershipreports', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/membershipreports');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/labelReportcert', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/labelReportcert');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/labelreportfailedtesting', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/labelreportfailedtesting');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/labelrepoprtnonmatch', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/labelrepoprtnonmatch');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/labelreportmembership', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/labelreportmembership');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/membershipcards', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/membershipcards');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/letteroffilledtesting', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/letteroffilledtesting');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/reportcert', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/reportcert');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/membershiprenewalnotification', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/membershiprenewalnotification');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/membershiprenewalreport', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/membershiprenewalreport');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/memberprofdet', function(req, res, next) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/memberprofdet');
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
// -------------------------------------------------------------Renew Account--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/renew', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        res.render('renew');
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -------------------------------------------------------------Renew Account--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/renewdetails', function(req, res) {
      // console.log(req.body)
      console.log(req.session,'sessionnnnnn')
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Select *  from Members where MemberNumber="+req.session.user[0].MemberNumber+"";
        request.query(sql, function (err, recordset) {
        // console.log(recordset.recordset)
        // req.session.reset();
        res.send(recordset.recordset);
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//admin
// -------------------------------------------------------------Admin------------------------------------------------------------
router.get('/admin', function(req, res) {
  res.render('admin/login');
});
// -------------------------------------------------------------Admin Login------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/adminsignin', function(req, res) {
      var sql = "select * from users where username='"+req.body.username+"' and password='"+req.body.password+"'";
      request.query(sql, function (err, recordset) {
        if (recordset.recordset.length <= 0) {
          res.sendStatus(500);
        }
        else {
          delete recordset.recordset[0].password
          req.session.admin = recordset.recordset;
          // console.log(req.session.admin)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------Reg------------------------------------------------------------
router.get('/reg', function(req, res) {
  res.render('reg/login');
});
router.get('/printwo', function(req, res) {
  res.render('printwo/printwo');
});
// -------------------------------------------------------------Reg Login------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/regsignin', function(req, res) {
      var sql = "select * from users where username='"+req.body.username+"' and password='"+req.body.password+"'";
      request.query(sql, function (err, recordset) {
        if (recordset.recordset.length <= 0) {
          res.sendStatus(500);
        }
        else {
          delete recordset.recordset[0].password
          req.session.reg = recordset.recordset;
          // console.log(req.session.reg)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------Reg------------------------------------------------------------
router.get('/reghome', function(req, res) {
  if(req.session && req.session.reg){
    res.locals.reg = req.session.reg;
    // console.log(req.session.reg)
    res.render('reg/index');  
  }
  else{
    req.session.reset();
    res.redirect('/reg');
  }
});
router.get('/admin/regevents', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regevents');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regpastevents', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regpastevents');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regeventresults', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regeventresults');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/reglink2classes', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/reglink2classes');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/reganimals', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/reganimals');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/reghandlers', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/reghandlers');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regprograms', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regprograms');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regaddevent', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    console.log(req.session.admin)
    res.render('admin/regaddevent');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regstandings', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regstandings');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regpayoutcal', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regpayoutcal');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regimportjpad', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regimportjpad');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regeventpay', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regeventpay');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
router.get('/admin/regbulkcontact', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    res.render('admin/regbulkcontact');  
  }
  else{
    req.session.reset();
    res.redirect('/admin');
  }
});
// -------------------------------------------------------------Reg Logout------------------------------------------------------------
router.get('/reglogout', function(req, res) {
  req.session.reset();
  res.redirect('/reg');
});
// -------------------------------------------------------------Admin------------------------------------------------------------
router.get('/adminlogout', function(req, res) {
  req.session.reset();
  res.redirect('/admin');
});
// signup
// -------------------------------------------------------------signup-----------------------------------------------------
router.get('/signup', function(req, res) {
  res.render('signup');
});
//-----------------------------------------------------------Amount for signup--------------------------------
router.post('/amountforregister', function(req, res) {
  var sql = "select Price from MembershipPrice where MembershipPriceID="+req.body.type+"";
  request.query(sql, function (err, recordsets) {
    if(err){
      res.sendStatus(500)
    }
    else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset)
    }
  });
});
// forgotpassword
// -------------------------------------------------------------forgotpassword-----------------------------------------------------
router.get('/forgotpassword', function(req, res) {
  res.render('forgotpassword');
});
// -------------------------------------------------------------changepassword-----------------------------------------------------
router.post('/changeuserpassword', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
        // create Request object
        var request = new sql.Request();
        if(req.session && req.session.user){
          res.locals.user = req.session.user;
          request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
          request.input('oldpassword', sql.VarChar(255), req.body.oldpassword);
          request.input('Password', sql.VarChar(255), req.body.newpassword);
          request.input('cnfpassword', sql.VarChar(255), req.body.cpassword);
          request.execute('_changepassword', function(err, recordsets, returnValue, affected) {
            if(err){
              res.sendStatus(500);
            }
            else{
              // console.log(recordsets.recordset)
              res.send(recordsets.recordset);
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                    pass: 'Abbi@2021'
                  }
                });
      
                var mailOptions = {
                  from: 'abbi@integrity-tek.com',
                  to: ['abbi@integrity-tek.com',req.session.user[0].Email],
                  subject: 'Reset Password',
                  html : "Your password had reset successfully!"
                };
                transporter.sendMail(mailOptions, function(error, info){
                  if (error) {
                    // res.sendStatus(500)
                  } else {
                    // res.sendStatus(200)
                  }
                });
            }
          });
        }
        else{
          req.session.reset();
          res.redirect('/');
        }
      });
});
//--------------------------------------------------------------ProfileData------------------------------------------------------
router.get('/ProfileData', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
        // create Request object
        var request = new sql.Request();
        if(req.session && req.session.user){
          res.locals.user = req.session.user;
          request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
          request.input('Itemsel', sql.Int, 1);
          request.execute('_MemberSelectInsertUpdate1', function(err, recordsets, returnValue, affected) {
            if(err){
              res.sendStatus(500);
            }
            else{
              // console.log(recordsets.recordset)
              res.send(recordsets.recordset);
            }
          });
        }
        else{
          req.session.reset();
          res.redirect('/');
        }
      });
});

//-------------------------------------------------------------Inventory----------------------------------------------------------
//-------------------------------------------------------------CurrentData--------------------------------------------------------
router.get('/currentdata', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('usp_InventoryList_Current', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------Events--------------------------------------------------------
router.post('/geteventdata', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('Regno', sql.Int, req.body.RegNo);
    request.execute('Geteventsentryanimal', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
     
      }
    });
  });
});
//-------------------------------------------------------------Events--------------------------------------------------------
router.post('/posteventdata', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    // console.log(req.body);
    request.input('EventId', sql.Int, req.body.event.EventID);
    request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
    request.input('SessionID', sql.VarChar(30), req.session.user[0].sessionID);
    request.input('RegNo', sql.Int, req.body.memberprofile.RegNo);
    request.execute('_tempeventsdatastore', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset[0].EarTag == '')
        if((recordsets.recordset[0].EarTag == null || recordsets.recordset[0].EarTag == '') && recordsets.recordset[0].Category!='Maturity'){
          var transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: 'abbi@integrity-tek.com',
                pass: 'Abbi@2021'
              }
            });

            var mailOptions = {
              from: 'abbi@integrity-tek.com',
              to: ['abbi@integrity-tek.com',req.session.user[0].Email],
              subject: 'EID Missing',
              html : "<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>EID Missing</h1>\n                      <h2>Hi '"+req.session.user[0].MemberName+"'</h2>\n <p>'                     <h2>Your animal is missing EID Tag. Please contact office.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
            };
            transporter.sendMail(mailOptions, function(error, info){
              if (error) {
                // res.sendStatus(500)
              } else {
                // res.sendStatus(200)
              }
            });
          }
        res.send(recordsets.recordset);
      }
    });
  });
});
//----------------------------------------------------------Delete Event Animal Information------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deleteeventdata', function(req, res) {
      // console.log(req.body)
        var sql = "delete from tempEvents_Animal Where EventRegID="+req.body.EventRegID+";delete from tempEvents_Member Where tempEventsMember="+req.body.tempEventsMember+"";
        // console.log(sql);
        request.query(sql, function (err, recordsets) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
//----------------------------------------------------------EID Reciept------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/eidreciept', function(req, res) {
        // console.log(req.body)
        var sql = "select (m.LastName+','+m.FirstName) as Membername,(m.Address+' '+m.City+' '+m.State+' '+m.Zip) Address,r.Animal,Cast(r.RegNo as nvarchar) RegNo,Cast(r.ID as nvarchar) ID from Registration r join Members m on r.MemberNo=m.MemberNumber where RegNo="+req.body.RegNo+" and m.MemberNumber="+req.body.MemberNo+"";
        // console.log(sql);
        request.query(sql, function (err, recordsets) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//----------------------------------------------------------Event Animal Information------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/saveeventregistration', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        console.log(req.body.EarTag)
        var sql = "UPDATE tempEvents_Animal SET Deliver = '"+req.body.Deliver+"' WHERE (EventRegID = "+req.body.EventRegID+" ) AND (MemberNumber = "+req.session.user[0].MemberNumber+") AND (Paid = 0);select ea.EventID,ea.RegNo,ea.tempEventsMember, ea.EventRegid,isnull(ea.BuckOnce,0) as buckonce,Cast(ea.Regno as nvarchar)+' '+ea.Animal as animal,Isnull(ea.OwnerPartner,isnull(m.ranchname, m.firstname + ' ' + m.lastname)) OwnerPartner,ISNULL(OwnerPhone,m.Phone) OwnerPhone,Isnull(OwnerEmailFax,m.Email) OwnerEmailFax,ea.Transporter,ea.TransporterPhone from tempEvents_Animal ea join registration r on ea.regno = r.regno join members m on r.memberno = m.membernumber where EventRegID="+req.body.EventRegID+"";
        // console.log(sql);
        request.query(sql, function (err, recordsets) {
          if (err){
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
    });
  });
//----------------------------------------------------------Event Animal Additional Information------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/saveadditionalevent', function(req, res) {
      console.log(req.body.eventbdata)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        // console.log(req.body.notes.Notes)
        var sql = "update tempEvents_Animal set BuckOnce = '"+req.body.eventbdata[0].buckonce+"', OwnerPartner = '"+req.body.eventbdata[0].OwnerPartner+"', OwnerPhone = '"+req.body.eventbdata[0].OwnerPhone+"', OwnerEmailFax = '"+req.body.eventbdata[0].OwnerEmailFax+"', Transporter = '"+req.body.eventbdata[0].Transporter+"', TransporterPhone = '"+req.body.eventbdata[0].TransporterPhone+"' where EventRegId = "+req.body.eventbdata[0].EventRegid+";Select * from tempEvents_Animal Where EventRegId = "+req.body.eventbdata[0].EventRegid+"";
        console.log(sql);
        request.query(sql, function (err, recordsets) {
          if (err){
            console.log(err)
            res.sendStatus(500);
          }
          else {
          console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
    });
  });
//-------------------------------------------------------------PreviousData--------------------------------------------------------
router.get('/previousdata', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('usp_InventoryList_Previous', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
    // console.log(recordsets.recordset)
    res.send(recordsets.recordset);
  }
});
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------DeceasedData--------------------------------------------------------
router.get('/deceaseddata', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('usp_InventoryList_Deceased', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
    // console.log(recordsets.recordset)
    res.send(recordsets.recordset);
  }
});
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------AllData-----------------------------------------------------------
router.get('/alldata', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('usp_InventoryList_Allnew', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
    // console.log(recordsets.recordset)
    res.send(recordsets.recordset);
  }
});
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------CurrentDataABHR--------------------------------------------------------
router.get('/currentabhrdata', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('usp_InventoryList_CurrentABHR', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------PreviousABHRData--------------------------------------------------------
router.get('/previousabhrdata', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('usp_InventoryList_PreviousABHR', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
    // console.log(recordsets.recordset)
    res.send(recordsets.recordset);
  }
});
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------DeceasedABHRData--------------------------------------------------------
router.get('/deceasedabhrdata', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('usp_InventoryList_DeceasedABHR', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
    // console.log(recordsets.recordset)
    res.send(recordsets.recordset);
  }
});
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------AllABHRData-----------------------------------------------------------
router.get('/allabhrdata', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('usp_InventoryList_AllnewABHR', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
    // console.log(recordsets.recordset)
    res.send(recordsets.recordset);
  }
});
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------AllData-----------------------------------------------------------
router.post('/showalldata', function(req, res) {
  sql.connect(config, function (err) { 
    // console.log(req.body)
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.body.MemberNumber);
    request.execute('usp_InventoryList_Allnew', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
    // console.log(recordsets.recordset)
    res.send(recordsets.recordset);
  }
});
  });
});
//----------------------------------------------------------Show W/O------------------------
router.get('/showworkorder', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
    request.execute('_getmemworkorders', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//----------------------------------------------------------Save Notes in Inventory------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/savenotesinventory', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        // console.log(req.body.notes.Notes)
        var sql = "If exists(select 1 from AnimalNotes where CurrentMemberNo="+req.session.user[0].MemberNumber+" AND RegNo="+req.body.No.RegNo+") UPDATE AnimalNotes SET Notes='"+req.body.notes.Notes+"' WHERE CurrentMemberNo="+req.session.user[0].MemberNumber+" AND RegNo="+req.body.No.RegNo+" else insert into AnimalNotes(CurrentMemberNo,RegNo,Notes) Values("+req.session.user[0].MemberNumber+","+req.body.No.RegNo+",'"+req.body.notes.Notes+"')";
        // console.log(sql);
        request.query(sql, function (err, recordset) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordset.recordset)
          res.sendStatus(200);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//----------------------------------------------------------Sold Animal------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/soldanimal', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "UPDATE Registration SET Sold=1 WHERE MemberNo="+req.session.user[0].MemberNumber+" AND RegNo="+req.body.RegNo+"";
        // console.log(sql);
        request.query(sql, function (err, recordset) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordset.recordset)
          res.sendStatus(200);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//----------------------------------------------------------Deceased Animal------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deceasedanimals', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "UPDATE Registration SET Status='Deceased', lastupdate=getdate(),UpdatedBy='Member', Notes = 'Marked as Deceased on' + cast(getdate() as varchar(25)) + 'by Member'  WHERE MemberNo="+req.session.user[0].MemberNumber+" AND RegNo="+req.body.RegNo+"";
        // console.log(sql);
        request.query(sql, function (err, recordset) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordset.recordset)
          res.sendStatus(200);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------searchAnimalData Member----------------------------------------------------
router.post('/searchAnimalDataMember', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    // console.log(req.session.user[0]);
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    // console.log(req.body)
    removeUndefinedProps(obj)
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNumber', sql.Int, req.body.MemberNumber);
    request.input('RanchName', sql.VarChar(255), req.body.RanchName);
    request.input('RegNo', sql.Int, req.body.Reg);
    request.input('Animal', sql.VarChar(255), req.body.AnimalName);
    request.input('TypeService', sql.VarChar(255), req.body.Sex);
    request.input('PrivateHerd', sql.VarChar(255), req.body.Herd);
    request.input('Birthdate', sql.DateTime, req.body.Birthdate);
    request.input('Description', sql.VarChar(255), req.body.Description);
    request.input('Horns', sql.VarChar(255), req.body.Horns);
    request.input('Dateregistered', sql.DateTime, req.body.DateRegistered);
    request.input('Status', sql.VarChar(255), req.body.Status);
    request.input('BreedersCertificateOnly', sql.Bit, req.body.breeder);
    request.input('SuperStakesOnly', sql.Bit, req.body.superstake);
    request.execute('_SearchAnimals_Front', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    }); 
  });
  }
  else{
    req.session.reset();
    res.redirect('/');
  }
});
//-------------------------------------------------------------Animal Profile------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/searchanimalprofile', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
      // console.log(req.body);
      var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber,r.picture FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.RegNo+")";
      request.query(sql, function (err, recordset) {
        var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.RegNo+""
        request.query(sql1, function (err, recordset1) {
          var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.RegNo+""
          request.query(sql2, function (err, recordset2) {
            var sql3 = "select animal.id animalid, animal.regno animalregno, animal.animal animal, animal.privateherd animalPrivateHerd,sire.id sireid, sire.regno sireregno, sire.animal sire, sire.privateherd sirePrivateHerd,dam.id damid, dam.regno damregno, dam.animal dam, dam.privateherd damPrivateHerd,sire_sire.id sire_sireid, sire_sire.regno sire_sireregno, sire_sire.animal sire_sire, sire_sire.privateherd sire_sirePrivateHerd,sire_dam.id sire_damid, sire_dam.regno sire_damregno, sire_dam.animal sire_dam, sire_dam.privateherd sire_damPrivateHerd,dam_sire.id dam_sireid, dam_sire.regno dam_sireregno, dam_sire.animal dam_sire, dam_sire.privateherd dam_sirePrivateHerd,dam_dam.id dam_damid, dam_dam.regno dam_damregno, dam_dam.animal dam_dam, dam_dam.privateherd dam_damPrivateHerd from registration animal left join registration sire on animal.sire = sire.regno and animal.sire <> 0 and sire.MemberNo <> 1657 left join registration dam on animal.dam = dam.regno and animal.dam <> 0 and dam.MemberNo <> 1657 left join registration sire_sire on sire.sire = sire_sire.regno and sire.sire <> 0 and sire_sire.MemberNo <> 1657 left join registration sire_dam on sire.dam = sire_dam.regno and sire.dam <> 0 and sire_dam.MemberNo <> 1657 left join registration dam_sire on dam.sire = dam_sire.regno and dam.sire <> 0 and dam_sire.MemberNo <> 1657 left join registration dam_dam on dam.dam = dam_dam.regno and dam.dam <> 0 and dam_dam.MemberNo <> 1657 where animal.regno = "+req.body.RegNo+""
            request.query(sql3, function (err, recordset3) {
              var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.RegNo+") and members.memberNumber <> 1657"
              request.query(sql4, function (err, recordset4) {
      // console.log(recordset3.recordset[0].damregno)
      var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].sireregno+") OR (Dam = "+recordset3.recordset[0].damregno+")) and reg.memberno <> 1657"
      request.query(sql5, function (err, recordset5) {
        var sql6 = "Select * from AnimalNotes where CurrentMemberNo="+req.session.user[0].MemberNumber+" AND RegNo="+req.body.RegNo+""
        // console.log(sql6)
        request.query(sql6, function (err, recordset6) {
          if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          // console.log(recordset6.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset,notes:recordset6.recordset});
        }
      });
      });
    });
            });
          });
        });
      });
}
else{
  req.session.reset();
  res.redirect('/');
}
});
});
// -------------------------------------------------------Assigned Members Dropdown WO-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/assignedtodata', function(req, res) {
      // console.log(req.body)
      var sql = "select userid, FirstName + ' ' + LastName as UserName from users where securityLevel > 0 order by lastname";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordset.recordset)
          res.send(recordset.recordset)
        }
      });
    });
  });
// -------------------------------------------------------Save Pedigree-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/savepedigree', function(req, res) {
      // console.log(req.body)
      var sql = "Update Registration Set Sire="+req.body.pedigreepanel.Sire+",Dam="+req.body.pedigreepanel.Dam+" Where RegNo="+req.body.editanimal.RegNo+" ";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------sold-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/soldanimals', function(req, res) {
      // console.log(req.body)
      var sql = "Update Registration Set Sold=1 where RegNo="+req.body.RegNo+"";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------Deceased-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deceasedanimals1', function(req, res) {
      // console.log(req.body)
      var sql = "Update Registration Set Status='Deceased' Where RegNo="+req.body.RegNo+"";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          res.sendStatus(200);
        }
      });
    });
  });
//----------------------------------------------------GetPedigree-----------------------------------------------------
router.post('/searchpedigree', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    // console.log(req.body)
    var request = new sql.Request();
    request.input('RegNo', sql.Int, req.body.RegNo);
    request.execute('_getpedigree', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//----------------------------------------------------GetPedigree-----------------------------------------------------
router.post('/searchpedigree1', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    // console.log(req.body)
    var request = new sql.Request();
    request.input('RegNo', sql.Int, req.body.SireName);
    request.execute('_getpedigree', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//----------------------------------------------------PrintPedigree-----------------------------------------------------
router.post('/printpedigree', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    // console.log(req.body)
    var request = new sql.Request();
    request.input('RegNo', sql.Int, req.body.RegNo);
    request.execute('_getpedigree', function(err, recordsets, returnValue, affected) {
      request.execute('_getprevioudata', function(err, recordsets1, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset)
          res.send({"pedigree":recordsets.recordset,"pre":recordsets1.recordset});
        }
      });
    });
  });
});
//-------------------------------------------------------------Animal Sire Profile------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/searchanimalsireprofile', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        // console.log(req.body.SireName);
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.SireName+")";
        request.query(sql, function (err, recordset) {
      // console.log(recordset.recordset)
      var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.SireName+""
      request.query(sql1, function (err, recordset1) {
        var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.SireName+""
        request.query(sql2, function (err, recordset2) {
          var sql3 = "select animal.id animalid, animal.regno animalregno, animal.animal animal, animal.privateherd animalPrivateHerd,sire.id sireid, sire.regno sireregno, sire.animal sire, sire.privateherd sirePrivateHerd,dam.id damid, dam.regno damregno, dam.animal dam, dam.privateherd damPrivateHerd,sire_sire.id sire_sireid, sire_sire.regno sire_sireregno, sire_sire.animal sire_sire, sire_sire.privateherd sire_sirePrivateHerd,sire_dam.id sire_damid, sire_dam.regno sire_damregno, sire_dam.animal sire_dam, sire_dam.privateherd sire_damPrivateHerd,dam_sire.id dam_sireid, dam_sire.regno dam_sireregno, dam_sire.animal dam_sire, dam_sire.privateherd dam_sirePrivateHerd,dam_dam.id dam_damid, dam_dam.regno dam_damregno, dam_dam.animal dam_dam, dam_dam.privateherd dam_damPrivateHerd from registration animal left join registration sire on animal.sire = sire.regno and animal.sire <> 0 and sire.MemberNo <> 1657 left join registration dam on animal.dam = dam.regno and animal.dam <> 0 and dam.MemberNo <> 1657 left join registration sire_sire on sire.sire = sire_sire.regno and sire.sire <> 0 and sire_sire.MemberNo <> 1657 left join registration sire_dam on sire.dam = sire_dam.regno and sire.dam <> 0 and sire_dam.MemberNo <> 1657 left join registration dam_sire on dam.sire = dam_sire.regno and dam.sire <> 0 and dam_sire.MemberNo <> 1657 left join registration dam_dam on dam.dam = dam_dam.regno and dam.dam <> 0 and dam_dam.MemberNo <> 1657 where animal.regno = "+req.body.SireName+""
          request.query(sql3, function (err, recordset3) {
            var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.SireName+") and members.memberNumber <> 1657"
            request.query(sql4, function (err, recordset4) {
      // console.log(recordset3.recordset[0].damregno)
      var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].sireregno+") OR (Dam = "+recordset3.recordset[0].damregno+")) and reg.memberno <> 1657"
      request.query(sql5, function (err, recordset5) {
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.SireNo+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset4.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
    });
          });
        });
      });
    });
}
else{
  req.session.reset();
  res.redirect('/');
}
});
});
//-------------------------------------------------------------Animal Dam Profile------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/searchanimaldamprofile', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
      // console.log(req.body.DamNo)
      var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.DamNo+")";
      request.query(sql, function (err, recordset) {
        // console.log(recordset.recordset)
        var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.DamNo+""
        request.query(sql1, function (err, recordset1) {
          var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.DamNo+""
          request.query(sql2, function (err, recordset2) {
            var sql3 = "select animal.id animalid, animal.regno animalregno, animal.animal animal, animal.privateherd animalPrivateHerd,sire.id sireid, sire.regno sireregno, sire.animal sire, sire.privateherd sirePrivateHerd,dam.id damid, dam.regno damregno, dam.animal dam, dam.privateherd damPrivateHerd,sire_sire.id sire_sireid, sire_sire.regno sire_sireregno, sire_sire.animal sire_sire, sire_sire.privateherd sire_sirePrivateHerd,sire_dam.id sire_damid, sire_dam.regno sire_damregno, sire_dam.animal sire_dam, sire_dam.privateherd sire_damPrivateHerd,dam_sire.id dam_sireid, dam_sire.regno dam_sireregno, dam_sire.animal dam_sire, dam_sire.privateherd dam_sirePrivateHerd,dam_dam.id dam_damid, dam_dam.regno dam_damregno, dam_dam.animal dam_dam, dam_dam.privateherd dam_damPrivateHerd from registration animal left join registration sire on animal.sire = sire.regno and animal.sire <> 0 and sire.MemberNo <> 1657 left join registration dam on animal.dam = dam.regno and animal.dam <> 0 and dam.MemberNo <> 1657 left join registration sire_sire on sire.sire = sire_sire.regno and sire.sire <> 0 and sire_sire.MemberNo <> 1657 left join registration sire_dam on sire.dam = sire_dam.regno and sire.dam <> 0 and sire_dam.MemberNo <> 1657 left join registration dam_sire on dam.sire = dam_sire.regno and dam.sire <> 0 and dam_sire.MemberNo <> 1657 left join registration dam_dam on dam.dam = dam_dam.regno and dam.dam <> 0 and dam_dam.MemberNo <> 1657 where animal.regno = "+req.body.DamNo+""
            request.query(sql3, function (err, recordset3) {
              var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.DamNo+") and members.memberNumber <> 1657"
              request.query(sql4, function (err, recordset4) {
      // console.log(recordset3.recordset[0].damregno)
      var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].sireregno+") OR (Dam = "+recordset3.recordset[0].damregno+")) and reg.memberno <> 1657"
      request.query(sql5, function (err, recordset5) {
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.DamNo+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset4.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
    });
            });
          });
        });
      });
}
else{
  req.session.reset();
  res.redirect('/');
}
});
});
//------------------------------------------------------------Additional DNA---------------------------------------------
router.post('/adddnapay', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.amount;
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.session.user[0]);
      // console.log(req.body);
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription('');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.session.user[0].FirstName);
            billTo.setLastName(req.session.user[0].LastName);
            billTo.setAddress(req.session.user[0].Address);
            billTo.setCity(req.session.user[0].City);
            billTo.setState(req.session.user[0].State);
            billTo.setZip(req.session.user[0].Zip);
            billTo.setCountry(req.session.user[0].Country);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.session.user[0].FirstName);
            shipTo.setLastName(req.session.user[0].LastName);
            shipTo.setAddress(req.session.user[0].Address);
            shipTo.setCity(req.session.user[0].City);
            shipTo.setState(req.session.user[0].State);
            shipTo.setZip(req.session.user[0].Zip);
            shipTo.setCountry(req.session.user[0].Country);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);      
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    var date = moment().format('MM-DD-YYYY');
                    request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
                    request.input('CCType', sql.VarChar(50), 'VI');
                    request.input('CCNumber', sql.VarChar(50), card);
                    request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
                    request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
                    request.input('eChkABACode', sql.VarChar(9), null);
                    request.input('eChkAcctNo', sql.VarChar(4), null);
                    request.input('eChkAcctType', sql.VarChar(20), null);
                    request.input('eChkAcctName', sql.VarChar(50), null);
                    request.input('eChkBankName', sql.VarChar(50), null);
                    request.input('FirstName', sql.VarChar(250), req.session.user[0].FirstName);
                    request.input('LastName', sql.VarChar(250), req.session.user[0].LastName);
                    request.input('Address1', sql.VarChar(250), req.session.user[0].Address);
                    request.input('City', sql.VarChar(250), req.session.user[0].City);
                    request.input('State', sql.VarChar(50), req.session.user[0].State);
                    request.input('ZipCode', sql.VarChar(50), req.session.user[0].Zip);
                    request.input('Country', sql.VarChar(50), req.session.user[0].Country);
                    request.input('Email', sql.VarChar(250), req.session.user[0].Email);
                    request.input('Phone', sql.VarChar(50), req.session.user[0].Phone);
                    request.input('PymtType', sql.VarChar(20), 'VI');
                    request.input('DNA', sql.VarChar(20), req.body.dna.dnaname);
                    request.input('RegNo', sql.Int, req.body.memberprofile.RegNo);
                    request.input('Ranagainst', sql.Int, req.body.dna.ran);
                    request.execute('_AdditionalDNAreq', function(err, recordsets, returnValue, affected) {
              if(err){
                // console.log(err)
              }
              else{

              }
            });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);
  
  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  orderDetails.setDescription('');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.session.user[0].FirstName);
  billTo.setLastName(req.session.user[0].LastName);
  billTo.setAddress(req.session.user[0].Address);
  billTo.setCity(req.session.user[0].City);
  billTo.setState(req.session.user[0].State);
  billTo.setZip(req.session.user[0].Zip);
  billTo.setCountry(req.session.user[0].Country);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.session.user[0].FirstName);
  shipTo.setLastName(req.session.user[0].LastName);
  shipTo.setAddress(req.session.user[0].Address);
  shipTo.setCity(req.session.user[0].City);
  shipTo.setState(req.session.user[0].State);
  shipTo.setZip(req.session.user[0].Zip);
  shipTo.setCountry(req.session.user[0].Country);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);      var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          var date = moment().format('MM-DD-YYYY');
          request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(50), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('FirstName', sql.VarChar(250), req.session.user[0].FirstName);
          request.input('LastName', sql.VarChar(250), req.session.user[0].LastName);
          request.input('Address1', sql.VarChar(250), req.session.user[0].Address);
          request.input('City', sql.VarChar(250), req.session.user[0].City);
          request.input('State', sql.VarChar(50), req.session.user[0].State);
          request.input('ZipCode', sql.VarChar(50), req.session.user[0].Zip);
          request.input('Country', sql.VarChar(50), req.session.user[0].Country);
          request.input('Email', sql.VarChar(250), req.session.user[0].Email);
          request.input('Phone', sql.VarChar(50), req.session.user[0].Phone);
          request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
          request.input('DNA', sql.VarChar(20), req.body.dna.dnaname);
          request.input('RegNo', sql.Int, req.body.memberprofile.RegNo);
          request.input('Ranagainst', sql.Int, req.body.dna.ran);
          request.execute('_AdditionalDNAreq', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
            
            }
          });
res.send({ msg:'Transaction Successfull'});
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
}  
else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
}
});
}
});
});
//------------------------------------------------------------Order EID---------------------------------------------
router.post('/addeidpay', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = 0.01;
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.session.user[0]);
      // console.log(req.body);
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription('');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.session.user[0].FirstName);
            billTo.setLastName(req.session.user[0].LastName);
            billTo.setAddress(req.session.user[0].Address);
            billTo.setCity(req.session.user[0].City);
            billTo.setState(req.session.user[0].State);
            billTo.setZip(req.session.user[0].Zip);
            billTo.setCountry(req.session.user[0].Country);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.session.user[0].FirstName);
            shipTo.setLastName(req.session.user[0].LastName);
            shipTo.setAddress(req.session.user[0].Address);
            shipTo.setCity(req.session.user[0].City);
            shipTo.setState(req.session.user[0].State);
            shipTo.setZip(req.session.user[0].Zip);
            shipTo.setCountry(req.session.user[0].Country);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);      
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    var date = moment().format('MM-DD-YYYY');
                    request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
                    request.input('CCType', sql.VarChar(50), 'VI');
                    request.input('CCNumber', sql.VarChar(50), card);
                    request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
                    request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
                    request.input('eChkABACode', sql.VarChar(9), null);
                    request.input('eChkAcctNo', sql.VarChar(4), null);
                    request.input('eChkAcctType', sql.VarChar(20), null);
                    request.input('eChkAcctName', sql.VarChar(50), null);
                    request.input('eChkBankName', sql.VarChar(50), null);
                    request.input('FirstName', sql.VarChar(250), req.session.user[0].FirstName);
                    request.input('LastName', sql.VarChar(250), req.session.user[0].LastName);
                    request.input('Address1', sql.VarChar(250), req.session.user[0].Address);
                    request.input('City', sql.VarChar(250), req.session.user[0].City);
                    request.input('State', sql.VarChar(50), req.session.user[0].State);
                    request.input('ZipCode', sql.VarChar(50), req.session.user[0].Zip);
                    request.input('Country', sql.VarChar(50), req.session.user[0].Country);
                    request.input('Email', sql.VarChar(250), req.session.user[0].Email);
                    request.input('Phone', sql.VarChar(50), req.session.user[0].Phone);
                    request.input('PymtType', sql.VarChar(20), 'VI');
                    request.input('EID', sql.VarChar(20), req.body.eid.eid)
                    request.input('RegNo', sql.VarChar(20), req.body.memberprofile.RegNo)
                    request.execute('_OrderNewEIDMem', function(err, recordsets, returnValue, affected) {
              if(err){
                // console.log(err)
              }
              else{

              }
            });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);
  
  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  orderDetails.setDescription('');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.session.user[0].FirstName);
  billTo.setLastName(req.session.user[0].LastName);
  billTo.setAddress(req.session.user[0].Address);
  billTo.setCity(req.session.user[0].City);
  billTo.setState(req.session.user[0].State);
  billTo.setZip(req.session.user[0].Zip);
  billTo.setCountry(req.session.user[0].Country);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.session.user[0].FirstName);
  shipTo.setLastName(req.session.user[0].LastName);
  shipTo.setAddress(req.session.user[0].Address);
  shipTo.setCity(req.session.user[0].City);
  shipTo.setState(req.session.user[0].State);
  shipTo.setZip(req.session.user[0].Zip);
  shipTo.setCountry(req.session.user[0].Country);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);      var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          var date = moment().format('MM-DD-YYYY');
          request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(50), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('FirstName', sql.VarChar(250), req.session.user[0].FirstName);
          request.input('LastName', sql.VarChar(250), req.session.user[0].LastName);
          request.input('Address1', sql.VarChar(250), req.session.user[0].Address);
          request.input('City', sql.VarChar(250), req.session.user[0].City);
          request.input('State', sql.VarChar(50), req.session.user[0].State);
          request.input('ZipCode', sql.VarChar(50), req.session.user[0].Zip);
          request.input('Country', sql.VarChar(50), req.session.user[0].Country);
          request.input('Email', sql.VarChar(250), req.session.user[0].Email);
          request.input('Phone', sql.VarChar(50), req.session.user[0].Phone);
          request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
          request.input('EID', sql.VarChar(20), req.body.eid.eidtag)
          request.input('RegNo', sql.VarChar(20), req.body.memberprofile.RegNo)
          request.execute('_OrderNewEIDMem', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
            
            }
          });
res.send({ msg:'Transaction Successfull'});
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
}  
else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
}
});
}
});
});
//-----------------------------------------------------------Send pedigree pdf in Email------------------------
router.post('/sendpedigreepdf', function(req,res){
  // console.log(req.body)
  var transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: 'abbi@integrity-tek.com',
      pass: 'Abbi@2021'
    }
  });

  var mailOptions = {
    from: 'abbi@integrity-tek.com',
    to: 'abbi@integrity-tek.com',
    subject: 'Pedigree Info',
    html : "<!DOCTYPE html>\n<html>\n<head>\n  <title>Pedigree</title>\n  <style>\n   .root {\n    position: relative;\n  }\n\n  .level {\n    margin-left: 240px;\n    position: relative;\n  }\n  .level:before {\n    content: \"\";\n    width: 21px;\n    border-top: 2px solid #000;\n    position: absolute;\n    left: 26px;\n    top: 50%;\n    margin-top: 1px;\n  }\n  .item {\n    min-height: 112px;\n    position: relative;\n  }\n  .item:before {\n    content: \"\";\n    height: 100%;\n    border-left: 2px solid #000;\n    position: absolute;\n    left: 45px;\n  }\n  .item:after {\n    content: \"\";\n    width: 24px;\n    border-top: 2px solid #000;\n    position: absolute;\n    left: 46px;\n    top: 50%;\n    margin-top: 1px;\n  }\n  .item:first-child:before {\n    width: 10px;\n    height: 50%;\n    top: 50%;\n    margin-top: 2px;\n    border-top-left-radius: 10px;\n  }\n  .item:first-child:after {\n    height: 10px;\n    border-top-left-radius: 10px;\n  }\n\n  .item:last-child:before {\n    width: 10px;\n    height: 50%;\n    border-bottom-left-radius: 10px;\n  }\n  .item:last-child:after {\n    height: 10px;\n    border-top: none;\n    border-bottom: 2px solid #000;\n    border-bottom-left-radius: 10px;\n    margin-top: -11px;\n  }\n  .title {\n    width: 174px;\n    padding: 3px 10px;\n    line-height: 13px;\n    border: 2px solid #000;\n    border-radius: 5px;\n    display: block;\n    position: absolute;\n    left: 68px;\n    top: 47%;\n    margin-top: -15px;\n  }\n  .title1 {\n    width: 174px;\n    padding: 3px 10px;\n    line-height: 13px;\n    border: 2px solid #000;\n    border-radius: 5px;\n    display: block;\n    position: absolute;\n    left: 68px;\n    top: 47%;\n    margin-top: -20px;\n  }\n</style>\n</head>\n<body>\n  <div class=\'root\' print-section>\n    <div class=\"title1\">\n      <h4 class=\"text-center\"><b style=\"color:red\">OffSpring</b></h4>\n      <label>Number :</label>\n      <b></b>\n      <br>\n      <label>Name :</label>\n      <b style=\"color:black\"></b>\n      <br>\n      <label>Herd No. :</label>\n      <b style=\"color:black\"></b>\n    </div>\n    <div class=\'lv1 level\'>\n      <div class=\'item\'>\n        <div class=\"title\">\n          <h4 class=\"text-center\"><b style=\"color:red\">Sire</b></h4>\n          <label>Number :</label>\n          <b style=\"color:black\"></b>\n          <br>\n          <label>Name :</label>\n          <b style=\"color:black\"></b>\n          <br>\n          <label>Herd No. :</label>\n          <b style=\"color:black\"></b>\n        </div>\n        <div class=\'lv2 level\'>\n          <div class=\'item\'>\n            <div class=\"title\">\n              <h4 class=\"text-center\"><b style=\"color:red\">Grand Sire</b></h4>\n              <label>Number :</label>\n              <b style=\"color:black\"></b>\n              <br>\n              <label>Name :</label>\n              <b style=\"color:black\"></b>\n              <br>\n              <label>Herd No. :</label>\n              <b style=\"color:black\"></b>\n            </div>\n            <div class=\'lv3 level\'>\n              <div class=\'item\'>\n                <div class=\"title\">\n                  <h4 class=\"text-center\"><b style=\"color:red\">Great Grand Sire</b></h4>\n                  <label>Number :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Name :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Herd No. :</label>\n                  <b style=\"color:black\"></b>\n                </div>\n              </div>\n              <div class=\'item\'>\n                <div class=\"title\">\n                  <h4 class=\"text-center\"><b style=\"color:red\">Great Grand Dam</b></h4>\n                  <label>Number :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Name :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Herd No. :</label>\n                  <b style=\"color:black\"></b>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\'item\'>\n            <div class=\"title\">\n              <h4 class=\"text-center\"><b style=\"color:red\">Grand Dam</b></h4>\n              <label>Number :</label>\n              <b style=\"color:black\"></b>\n              <br>\n              <label>Name :</label>\n              <b style=\"color:black\"></b>\n              <br>\n              <label>Herd No. :</label>\n              <b style=\"color:black\"></b>\n            </div>\n            <div class=\'lv3 level\'>\n              <div class=\'item\'>\n                <div class=\"title\">\n                  <h4 class=\"text-center\"><b style=\"color:red\">Great Grand Sire</b></h4>\n                  <label>Number :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Name :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Herd No. :</label>\n                  <b style=\"color:black\"></b>\n                </div>\n              </div>\n              <div class=\'item\'>\n                <div class=\"title\">\n                  <h4 class=\"text-center\"><b style=\"color:red\">Great Grand Dam</b></h4>\n                  <label>Number :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Name :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Herd No. :</label>\n                  <b style=\"color:black\"></b>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\'item\'>\n        <div class=\"title\">\n          <h4 class=\"text-center\"><b style=\"color:red\">Dam</b></h4>\n          <label>Number :</label>\n          <b style=\"color:black\"></b>\n          <br>\n          <label>Name :</label>\n          <b style=\"color:black\"></b>\n          <br>\n          <label>Herd No. :</label>\n          <b style=\"color:black\"></b>\n        </div>\n        <div class=\'lv2 level\'>\n          <div class=\'item\'>\n            <div class=\"title\">\n              <h4 class=\"text-center\"><b style=\"color:red\">Grand Sire</b></h4>\n              <label>Number :</label>\n              <b style=\"color:black\"></b>\n              <br>\n              <label>Name :</label>\n              <b style=\"color:black\"></b>\n              <br>\n              <label>Herd No. :</label>\n              <b style=\"color:black\"></b>\n            </div>\n            <div class=\'lv3 level\'>\n              <div class=\'item\'>\n                <div class=\"title\">\n                  <h4 class=\"text-center\"><b style=\"color:red\">Great Grand Sire</b></h4>\n                  <label>Number :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Name :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Herd No. :</label>\n                  <b style=\"color:black\"></b>\n                </div>\n              </div>\n              <div class=\'item\'>\n                <div class=\"title\">\n                  <h4 class=\"text-center\"><b style=\"color:red\">Great Grand Dam</b></h4>\n                  <label>Number :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Name :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Herd No. :</label>\n                  <b style=\"color:black\"></b>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\'item\'>\n            <div class=\"title\">\n              <h4 class=\"text-center\"><b style=\"color:red\">Grand Dam</b></h4>\n              <label>Number :</label>\n              <b style=\"color:black\"></b>\n              <br>\n              <label>Name :</label>\n              <b style=\"color:black\"></b>\n              <br>\n              <label>Herd No. :</label>\n              <b style=\"color:black\"></b>\n            </div>\n            <div class=\'lv3 level\'>\n              <div class=\'item\'>\n                <div class=\"title\">\n                  <h4 class=\"text-center\"><b style=\"color:red\">Great Grand Sire</b></h4>\n                  <label>Number :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Name :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Herd No. :</label>\n                  <b style=\"color:black\"></b>\n                </div>\n              </div>\n              <div class=\'item\'>\n                <div class=\"title\">\n                  <h4 class=\"text-center\"><b style=\"color:red\">Great Grand Dam</b></h4>\n                  <label>Number :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Name :</label>\n                  <b style=\"color:black\"></b>\n                  <br>\n                  <label>Herd No. :</label>\n                  <b style=\"color:black\"></b>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</body>\n</html>"
  };
  transporter.sendMail(mailOptions, function(error, info){
    if (error) {
      res.sendStatus(500)
    } else {
      res.sendStatus(200)
    }
  });
})
//-------------------------------------------------------------Sire------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/sirepedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.Sire+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.Sire+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.Sire+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.Sire+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.Sire+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Grand Sire 1 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/grandsire1pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GrandSire+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GrandSire+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GrandSire+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GrandSire+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GrandSire+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Great Grand Sire 1 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/greatgrandsire1pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GreatGrandSires+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GreatGrandSires+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GreatGrandSires+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GreatGrandSires+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GreatGrandSires+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Great Grand Dam 1 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/greatgranddam1pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GreatGrandDams+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GreatGrandDams+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GreatGrandDams+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GreatGrandDams+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GreatGrandDams+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                    // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Grand Dam 1 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/granddam1pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GrandDam+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GrandDam+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GrandDam+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GrandDam+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GrandDam+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                    // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Great Grand Sire 2 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/greatgrandsire2pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GreatGrandSired+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GreatGrandSired+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GreatGrandSired+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GreatGrandSired+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GreatGrandSired+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                    // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Great Grand Dam 2 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/greatgranddam2pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GreatGrandDamd+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GreatGrandDamd+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GreatGrandDamd+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GreatGrandDamd+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GreatGrandDamd+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                    // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//------------------------------------------------------------- Dam ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/dampedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.Dam+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.Dam+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.Dam+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.Dam+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.Dam+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                    // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Grand Sire 1 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/grandsire2pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GrandSire2+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GrandSire2+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GrandSire2+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GrandSire2+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GrandSire2+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Great Grand Sire 3 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/greatgrandsire3pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GreatGrandSires2+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GreatGrandSires2+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GreatGrandSires2+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GreatGrandSires2+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GreatGrandSires2+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Great Grand Dam 3 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/greatgranddam3pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GreatGrandDams2+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GreatGrandDams2+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GreatGrandDams2+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GreatGrandDams2+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GreatGrandDams2+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Grand Dam 2 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/granddam2pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GrandDam2+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GrandDam2+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GrandDam2+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GrandDam2+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GrandDam2+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Great Grand sire 4 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/greatgrandsire4pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GreatGrandSired2+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GreatGrandSired2+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GreatGrandSired2+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GreatGrandSired2+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GreatGrandSired2+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Great Grand Dam 4 ------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/greatgranddam4pedigree', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT MemberNo, LastName + ', ' + FirstName AS MemberName, r.RegNo, Animal,Status, TypeService, PrivateHerd, BirthDate, DNA, Description, Horns,(SELECT top 1 LastName + ', ' + FirstName FROM Members WHERE Members.MemberNumber = r.OriginalBreeder) AS OriginalBreeder,PBS_Id, sold, year(CertificateDate) as CertYear, ss.superstakesnumber FROM Registration r INNER JOIN Members ON r.MemberNo = Members.MemberNumber left join BreedersCertificate on r.regno = sireregno left join SuperStakes ss on r.regno = ss.regno WHERE (r.RegNo = "+req.body.GreatGrandDamd2+")";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          var sql1 = "SELECT ISNULL(SUM(ISNULL(MoneyEarned,0)),0) As LifeTime_Earnings FROM AnimalEarning WHERE RegNo = "+req.body.GreatGrandDamd2+""
          // console.log(sql1)
          request.query(sql1, function (err, recordset1) {
            var sql2 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, website, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Email, HideContactInfo FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo = "+req.body.GreatGrandDamd2+""
            // console.log(sql2)
            request.query(sql2, function (err, recordset2) {
              var sql3 = " Select * from dbo.fn_getpedigree ("+req.body.GreatGrandDamd2+")"
              // console.log(sql3)
              request.query(sql3, function (err, recordset3) {
                var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE (Registration.RegNo = "+req.body.GreatGrandDamd2+") and members.memberNumber <> 1657"
                // console.log(sql4)
                request.query(sql4, function (err, recordset4) {
                  var sql5 = "SELECT reg.MemberNo, reg.ID AS RegNoID, reg.RegNo, reg.Animal, Description,Birthdate, PrivateHerd, TypeService, MemberName, reg.PBS_ID,bs.outcount, bs.avgmark, ss.SuperStakesNumber FROM Registration reg INNER JOIN Members ON reg.MemberNo = Members.MemberNumber left join BullStats bs on reg.PBS_ID = bs.PBS_ID left join SuperStakes ss on reg.regno = ss.regno WHERE ((Sire = "+recordset3.recordset[0].Sire+") OR (Dam = "+recordset3.recordset[0].Dam+")) and reg.memberno <> 1657"
                  request.query(sql5, function (err, recordset5) {
                  // console.log(sql5)
      // var sql6 = "SELECT  dbo.AnimalNotes.CurrentMemberNo, dbo.AnimalNotes.RegNo, dbo.AnimalNotes.Notes FROM dbo.AnimalNotes WHERE(dbo.AnimalNotes.CurrentMemberNo ="+req.session.user[0].membernumber+") AND (dbo.AnimalNotes.RegNo="+req.body.Sire+")"
      if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({member:recordset.recordset,lifetime:recordset1.recordset,memberdata:recordset2.recordset,pedigree:recordset3.recordset,previousowner:recordset4.recordset,offspring:recordset5.recordset});
        }
      });
                });
              });
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------updateProfileData----------------------------------------------------
router.post('/updateProfileData', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.session.user[0].MemberNumber)
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('ItemchangeP', sql.Int, 1);
      request.input('PremiseID', sql.VarChar(12), req.body.PremiseID);
      request.input('FirstName', sql.VarChar(255), req.body.FirstName);
      request.input('LastName', sql.VarChar(255), req.body.LastName);
      request.input('UserName', sql.VarChar(255), req.body.UserName);
      request.input('RanchName', sql.VarChar(255), req.body.RanchName);
      request.input('Email', sql.VarChar(255), req.body.Email);
      request.input('Address', sql.VarChar(255), req.body.Address);
      request.input('City', sql.VarChar(255), req.body.City);
      request.input('State', sql.VarChar(255), req.body.State);
      request.input('Zip', sql.VarChar(255), req.body.Zip);
      request.input('Phone', sql.VarChar(255), req.body.Phone);
      request.input('Country', sql.VarChar(255), req.body.Country);
      request.input('Office', sql.VarChar(50), req.body.Office);
      request.input('Fax', sql.VarChar(50), req.body.Fax);
      request.input('Website', sql.VarChar(500), req.body.Website);
      request.input('HideContactInfo', sql.Bit, req.body.HideContactInfo);
      request.input('NewsletterPromotion', sql.Bit, req.body.NewsletterPromotion);
      //request.input('BulkEmailFail', sql.Bit, req.body.Website);
      request.input('gopaperless', sql.Bit, req.body.gopaperless);
      request.execute('_MemberSelectInsertUpdate1', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Update Member-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updatesendmail', function(req, res) {
        // console.log(req.body)
        var sql = "WAITFOR DELAY '00:00:05';select top 1* from tempmemupdatefields Where MemberNo="+req.body.MemberNumber+" order by modifydate desc ";
        request.query(sql, function (err, recordsets) {
          var message = recordsets.recordset[0].Auditdata;
          // console.log(message)
          if (err){
            res.sendStatus(500);
          }
          else {
            var transporter = nodemailer.createTransport({
              service: 'gmail',
              auth: {
                user: 'abbi@integrity-tek.com',
                pass: 'Abbi@2021'
              }
            });

            var mailOptions = {
              from: 'no-reply',
              to: 'abbi@integrity-tek.com',
              subject: 'Updated Data - ABBI',
              html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Updated Member Info</h1>\n                      <h2>Hi Admin</h2>\n                      <h2>Updated Profile of "+message+"</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/admin\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
            };

            transporter.sendMail(mailOptions, function(error, info){
              if (error) {
                // console.log(error);
              } else {
                // console.log(info)
              }
            });
          }
        });
});
});
//-------------------------------------------------------------Print Membership card-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/printmembercard', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Select MemberNumber,Lastname+' '+FirstName as Membername,Type,Isnull(Format(JoinDate,'MM/yy'),'') as Ms,Isnull(Format(DueDate,'MM/yy'),'') as Eo from Members Where MemberNumber="+req.session.user[0].MemberNumber+" ";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Add Partner----------------------------------------------------
  router.post('/addpartnerdata',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNo', sql.Int,req.session.user[0].MemberNumber);
      request.input('FirstName', sql.VarChar(50),req.body.fname);
      request.input('LastName', sql.VarChar(50),req.body.lname);
      request.input('Email', sql.VarChar(50),req.body.email);
      request.input('Address', sql.VarChar(50),req.body.address);
      request.input('City', sql.VarChar(30),req.body.city);
      request.input('State', sql.VarChar(10),req.body.state);
      request.input('Zip', sql.VarChar(10),req.body.zip);
      request.input('Country', sql.VarChar(10),req.body.country);
      request.input('Phone', sql.VarChar(12),req.body.phoneh);
      request.input('CellPhone', sql.VarChar(12),req.body.phonec);
      request.input('Username', sql.VarChar(30),req.body.username);
      request.input('Memtype', sql.VarChar(20),req.session.user[0].Type);
      request.execute('addpartnersmem', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Get Partner Data----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/getpartnerdata', function(req, res) {
      var sql = "select * from Members_Partners where ContactID= "+req.body.ContactID+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset)
        }
      });
    });
  });
//-------------------------------------------------------------Edit Partner----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editpartnerdata', function(req, res) {
      var sql = "Update Members_Partners set FirstName='"+req.body.FirstName+"',LastName='"+req.body.LastName+"',Email='"+req.body.Email+"',Address='"+req.body.Address+"',City='"+req.body.City+"',State='"+req.body.State+"',Zip='"+req.body.Zip+"',Country='"+req.body.Country+"',Phone='"+req.body.Phone+"',CellPhone='"+req.body.CellPhone+"' Where ContactID="+req.body.ContactID+"";
      var sql1 = "select * from Members_Partners where MemberNumber= "+req.body.MemberNumber+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        request.query(sql1, function (err, recordset1) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordset1.recordset)
          res.send(recordset1.recordset)
        }
      });
      });
    });
  });
//-------------------------------------------------------------Partner List----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/partnerslistdata', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Select FirstName, LastName, Email, Address, City, State, Zip, Country, Phone, CellPhone from members_partners Where MemberNumber = '"+req.session.user[0].MemberNumber+"'";
        request.query(sql, function (err, recordset) {
          if (err){
            res.sendStatus(500);
          }
          else {
            // console.log(recordset.recordset)
            res.send(recordset.recordset);
          }
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Admin Partner List----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/viewpartners', function(req, res) {
      var sql = "Select FirstName, LastName, Email, Address, City, State, Zip, Country, Phone, CellPhone from members_partners Where MemberNumber = '"+req.body.MemberNumber+"'";
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
    });
  });
//-------------------------------------------------------------Current Sire List----------------------------------------------------
router.post('/currentdatasire',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('Type', sql.VarChar(25), 'Current');
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.execute('_AnimalRegistration_Sire', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Previous Sire List----------------------------------------------------
router.post('/previousdatasire',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('Type', sql.VarChar(25), 'Previous');
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.execute('_AnimalRegistration_Sire', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Deceased Sire List----------------------------------------------------
router.post('/deceaseddatasire',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('Type', sql.VarChar(25), 'Deceased');
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.execute('_AnimalRegistration_Sire', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Current Breeding Sire List----------------------------------------------------
router.post('/currentbreedingdatasire',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('Type', sql.VarChar(25), 'Current Breeding');
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.execute('_AnimalRegistration_Sire', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------register Animal----------------------------------------------------
var storage = multer.diskStorage({
  destination: 'public/uploads/animals',
  filename: function (req, file, cb) {
    cb(null, file.originalname.replace(path.extname(file.originalname) + path.extname(file.originalname)))
  }
})
var upload = multer({ storage: storage })

router.post('/tempanimaldata',upload.single('image'), function(req, res) {
  // console.log(req.file);
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
      request.input('OriginalBreeder', sql.VarChar(100), req.session.user[0].MemberNumber);
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.input('PrivateHerd', sql.VarChar(500), req.body.animalidentification);
      request.input('EarTag', sql.VarChar(100), null);
      request.input('Animal', sql.VarChar(500), req.body.AnimalName);
      request.input('TypeService', sql.VarChar(500), req.body.sex);
      request.input('Horns', sql.VarChar(100), req.body.horns);
      request.input('Main', sql.VarChar(500), req.body.main);
      request.input('Second', sql.VarChar(500), req.body.second);
      request.input('Pattern', sql.VarChar(500), req.body.pattern);
      request.input('Markings', sql.VarChar(500), req.body.markings);
      request.input('Others', sql.VarChar(500), req.body.others);
      request.input('ProvideDNAInfo', sql.Int, 1);
      request.input('RushRegistration', sql.Int, 0);
      request.input('Status', sql.VarChar(100),'Waiting For Samples')
      request.input('Picture', sql.VarChar(50), req.file?.filename);
      // request.input('DateRegistered', sql.DateTime, moment(req.body.rdate).format('MM/DD/YYYY'));
      request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
      request.execute('_instempregistration', function(err, recordsets, returnValue, affected) {
        // console.log(req.session.user[0].sessionID)
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          console.log(recordsets.recordset)
          res.send(recordsets.recordset);
          // res.sendStatus(200);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Holding Pen----------------------------------------------------
router.get('/getreganimaldata', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.execute('_AnimalRegistration_Holding_Pen', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
// -----------------------------------------------------------Update Animal Holding Pen---------------------------------------------------
var storage = multer.diskStorage({
  destination: 'public/uploads/animals',
  filename: function (req, file, cb) {
    cb(null, file.originalname.replace(path.extname(file.originalname) + path.extname(file.originalname)))
  }
})
var upload = multer({ storage: storage })
router.post('/updateanimaldetails',upload.single('image'), function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    // removeUndefinedProps(obj)
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      // console.log(req.session.user[0].MemberNumber)
      request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
      request.input('RegNoID', sql.Int, req.body.RegNoID);
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.input('PrivateHerd', sql.VarChar(500), req.body.PrivateHerd);
      request.input('Animal', sql.VarChar(500), req.body.ANIMAL);
      request.input('TypeService', sql.VarChar(500), req.body.TypeService);
      request.input('Horns', sql.VarChar(100), req.body.Horns);
      request.input('Description', sql.VarChar(500), req.body.Description);
      request.input('Picture',sql.VarChar(500),req.file?.filename);
      request.execute('_Updtempregistration', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{

          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
// -----------------------------------------------------------Check Holding Pen---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkholdingpen', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Update TempRegistration set Completed = "+req.body.Completed+" where regnoid="+req.body.RegNoID+"";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -----------------------------------------------------------Check Holding Pen1---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkholdingpen1', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Update TempRegistration set EarTag= (Case When "+req.body.eartag+"=1 then 'Y' else '' end) where regnoid ="+req.body.ID+"";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -----------------------------------------------------------Hold Check---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/holdcheck', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "If Not exists(Select 1 from TempDestronFearing where MemberNo="+req.session.user[0].MemberNumber+") Insert into TempDestronFearing(MemberNo,hold_check) values("+req.session.user[0].MemberNumber+","+req.body.hold_check+") Else Update TempDestronFearing Set hold_check="+req.body.hold_check+" where MemberNo = "+req.session.user[0].MemberNumber+"";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets)
          res.sendStatus(200)
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -----------------------------------------------------------Superstack Update---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkholdingss', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Update TempRegistration set Incentive= (Case When "+req.body.incentive+"=1 then 'SS' else NULL end) where regnoid="+req.body.ID+"";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -----------------------------------------------------------Superstack Price---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/superstackamount', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select lineitemid, Price from WorkOrderLineItems where(pricingYear = Year(getdate())) and description = 'Super Stakes Entry'";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -----------------------------------------------------------Superstack Data---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/superstackdata', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select RegNoId as ID, eartag, Animal, PrivateHerd, birthdate,(Case When incentive='SS' then 1 else 0 end) as incentive,(Case When YEAR(r.Birthdate)<>YEAR(GETDATE()) OR r.TypeService LIKE '%C' then 0 else 1 end) AS Status from tempregistration r where memberno = "+req.session.user[0].MemberNumber+" and completed = 0 ";
        //console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -----------------------------------------------------------Show Next Tab Holding Pen---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/shownextpanel', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select RegNoId as ID, (Case When eartag='Y' then 1 else 0 end) as eartag, Animal,PrivateHerd, birthdate,TypeService,(Case When YEAR(r.Birthdate)=YEAR(GETDATE()) then 1 else 0 end) AS status from tempregistration r where memberno = "+req.session.user[0].MemberNumber+" and (typeservice like '%B' or typeservice like '%C') and completed = 0 and len(privateherd) <= 6";
        var sql1="select (case when hold_check='true' then 1 else 0 end)  as hold_check from TempDestronFearing where MemberNo="+req.session.user[0].MemberNumber+""
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          request.query(sql1, function (err, recordsets1) {  
            if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets1.recordset)
          res.send({anidetails:recordsets.recordset,hold_check:recordsets1.recordset});
        }
      });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -----------------------------------------------------------Eid Information---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/eidinformation', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Select * from inventory_store where productnumber in ('DFABBIEID','AC7007')";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Edit Holding Pen----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editholdingpendata', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT RegNoID,ANIMAL,Birthdate,TypeService,PrivateHerd,Horns,Description,picture,Main_colour,Secondary_colour,pattern,markings from TempRegistration where MemberNo="+req.session.user[0].MemberNumber+" and RegNoID="+req.body.RegNoID+"";
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Remove Holding Pen----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/RemoveHoldingPen', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "delete from tempregistration where MemberNo="+req.session.user[0].MemberNumber+" and RegNoID="+req.body.RegNoID+" and Completed <> 1";
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(200);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Card Filling----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/carddetails', function(req, res) {
      // console.log(req.body);
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select Top 1 CCNumber as cc,CCType,CCExpDate as expire,cast(CCSeccode as int) as cvv from Payments where  MemberID="+req.session.user[0].MemberNumber+" and LEN(CCNumber)>4 and CCType='"+req.body.Payment+"'and Role='Member' order by PaymentDate desc";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Billing Details----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/getbilldetails', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Select * from Members Where MemberNumber="+req.session.user[0].MemberNumber+"";
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Add Billing Info----------------------------------------------------
// router.get('/gettabledatainpen', function(req, res) {
//   sql.connect(config, function (err) { 
//     if (err) console.log(err);
//     // create Request object
//     function removeUndefinedProps(obj) {
//       for (var prop in obj) {
//         if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
//           delete obj[prop];
//         }
//       }
//       return obj;
//     }
//     var request = new sql.Request();
//     if(req.session && req.session.user){
//       res.locals.user = req.session.user;
//       request.input('memberno',sql.Int,req.session.user[0].MemberNumber)
//       request.execute('_gettempprices', function(err, recordsets, returnValue, affected) {
//         if(err){
//           // console.log(err)
//           res.sendStatus(500);
//         }
//         else{
//           // console.log(recordsets.recordset)
//           res.send(recordsets.recordset)
//         }
//       });
//     }
//     else{
//       req.session.reset();
//       res.redirect('/');
//     }
//   });
// });
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/gettabledatainpen', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select registrationprice,count(registrationprice) as regcount, sum(registrationprice) as totalregprice, sum(case when typeservice like '%B' then 1 else 0 end) BullCount, sum(case when typeservice like '%C' then 1 else 0 end) CowCount from tempregistration where memberno = "+req.session.user[0].MemberNumber+" and completed = 0  group by registrationprice";
        var sql1 = "Select a.*,a.EidCount*(SELECT price FROM inventory_store where productnumber ='DFABBIEID') as TotEidPrice from(select Count(EarTag) as EidCount,(Case WHEN EXISTS(SELECT 1 FROM TempDestronFearing tdf WHERE tdf.MemberNo="+req.session.user[0].MemberNumber+" AND tdf.hold_check=1) THEN (SELECT price FROM inventory_store where productnumber ='AC7007') Else 0 END) as DestronPrice from TempRegistration where memberno = "+req.session.user[0].MemberNumber+" and completed=0 and EarTag='Y')a";
        var sql2 = "Select b.*,b.SSCount*(select Price from WorkOrderLineItems where(pricingYear = Year(getdate()) and description = 'Super Stakes Entry')) as TotSSPrice from(select Count(Incentive) as SSCount from TempRegistration where memberno = "+req.session.user[0].MemberNumber+"  and completed=0 and Incentive='SS')b";
        request.query(sql, function (err, recordsets) {
          request.query(sql1, function (err, recordsets1) {
            request.query(sql2, function (err, recordsets2) {  
              if (err) {
                res.sendStatus(500);
              }
              else {
          // console.log(recordsets.recordset)
          // console.log(recordsets1.recordset)
          console.log(recordsets2.recordset,"backkkkkkkkkkkkkkkkkkkkkkkkk")
          res.send({bull:recordsets.recordset,eid:recordsets1.recordset,ss:recordsets2.recordset});
        }
      });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Add Billing Info----------------------------------------------------
router.post('/savebillinginfo', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      console.log(req.body,"oooooooooooooooooooooooooooooooooooooo")
      var id = req.session.user[0].MemberNumber+"-Reg"
      var fname =  req.body.FirstName;
      var lname =  req.body.LastName;
      var name  =  req.body.FirstName+","+req.body.LastName;
      var email = req.body.Email;
      var phone = req.body.Phone;
      var Address = req.body.Address;
      var City = req.body.City;
      var State = req.body.State;
      var Zip = req.body.Zip;
      var Country = req.body.Country;
      var fname1 =  req.body.FirstName1;
      var lname1 =   req.body.LastName1;
      var Address1 = req.body.Address1;
      var City1 = req.body.City1;
      var State1 = req.body.State1;
      var Zip1 = req.body.Zip1;
      var Country1 = req.body.Country1;
      request.input('TempOnlineMainID', sql.Int, null);
      request.input('DateStamp', sql.DateTime, moment().format('YYYY-MM-DD hh:mm:ss:SSS'));
      request.input('SessionID', sql.VarChar(250), id);
      request.input('FirstName', sql.VarChar(250), fname);
      request.input('LastName', sql.VarChar(250), lname);
      request.input('Email', sql.VarChar(250), email);
      request.input('Phone', sql.VarChar(250), phone);
      request.input('BillingAddress', sql.VarChar(250), Address);
      request.input('BillingCity', sql.VarChar(250), City);
      request.input('BillingState', sql.VarChar(50), State);
      request.input('BillingZipCode', sql.VarChar(50), Zip);
      request.input('BillingCountry', sql.VarChar(50), Country);
      request.input('ShippingFirstName', sql.VarChar(50), fname1);
      request.input('ShippingLastName', sql.VarChar(50), lname1);
      request.input('ShippingAddress', sql.VarChar(250), Address1);
      request.input('ShippingCity', sql.VarChar(250), City1);
      request.input('ShippingState', sql.VarChar(50), State1);
      request.input('ShippingZipCode', sql.VarChar(50), Zip1);
      request.input('ShippingCountry', sql.VarChar(50), Country1);
      request.execute('_instemponlineStore_TempStore', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          var date = new Date();
        //   var data = {
        //     "WebAuthenticationDetail": {
        //         "UserCredential": {
        //             "Key": process.env.fedex_key,
        //             "Password": process.env.fedex_pass,
        //         }
        //     },
        //     "ClientDetail": {
        //         "AccountNumber": process.env.fedex_acno,
        //         "MeterNumber": process.env.fedex_meter
        //     },
        //     "TransactionDetail": {"CustomerTransactionId": " *** Rate Available Services Request using PHP ***"},
        //     "Version": {"ServiceId": "crs", "Major": "31", "Intermediate": "0", "Minor": "0"},
        //     "ReturnTransitAndCommit": true,
        //     "RequestedShipment": {
        //         "ShipTimestamp": new Date(date.getTime() + (24*60*60*1000)).toISOString(),
        //         "DropoffType": "REGULAR_PICKUP",
        //         "ServiceType": 'FEDEX_GROUND',
        //         "PackagingType": 'YOUR_PACKAGING',
        //         "Shipper": {
        //           "Contact": {
        //             "PersonName": name,
        //             "CompanyName": 'ABBI',
        //             "PhoneNumber": phone
        //           },
        //           "Address": {
        //             "StreetLines": [
        //             Address
        //             ],
        //             "City": City,
        //             "StateOrProvinceCode": State,
        //             "PostalCode": Zip,
        //             "CountryCode": Country
        //           }
        //         },
        //         "Recipient": {
        //         "Contact": {
        //           "PersonName": name,
        //           "CompanyName": 'ABBI',
        //           "PhoneNumber": phone
        //         },
        //         "Address": {
        //           "StreetLines": [
        //           Address1
        //           ],
        //           "City": City1,
        //           "StateOrProvinceCode": State1,
        //           "PostalCode": Zip1,
        //           "CountryCode": Country1,
        //           "Residential": false
        //         }
        //       },
        //         "ShippingChargesPayment": {
        //         "PaymentType": 'SENDER',
        //         "Payor": {
        //           "ResponsibleParty": {
        //             "AccountNumber": process.env.fedex_acno
        //           }
        //         }
        //       },
        //         "PackageCount": "1",
        //         "RequestedPackageLineItems": [{
        //             "SequenceNumber": 1,
        //             "GroupPackageCount": 1,
        //             // if you change the order this shit breaks because wsdl is a format for dumbasses
        //             "Weight": {
        //                 "Units": "LB",
        //                 "Value": 0.025
        //             },
        //             "Dimensions": {
        //                 "Length": 0, "Width": 0, "Height": 0, "Units": "IN"
        //             }
        //         }]
        //     }
        // };
        // soap.createClient(url, function (err, client) {
        //     if (err) throw err;
        //     client.setEndpoint('https://ws.fedex.com:443/web-services');
        //     client.getRates(data, function (err, result) {
        //       if(err){
        //         // console.log(err);
        //       }
        //       else{
        //         var fed1 = result.RateReplyDetails[0].RatedShipmentDetails[0].ShipmentRateDetail.TotalNetChargeWithDutiesAndTaxes.Amount;
        //         var sql1="select *,("+fed1+")+TotalPrice as Total,"+fed1+" as Fed,Round((TotalPrice*0.02),2) as Handling from TempCart where MEMBERNO="+req.session.user[0].MemberNumber+""
        //         request.query(sql1, function (err, recordsets1) {  
        //           if (err) {
        //             // console.log(err);
        //           }
        //           else {
        //             res.send({fed : fed1,tempid:recordsets.recordset,data : recordsets1.recordset});
        //       }
        //     });
        //       }
        //     });
        // });
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Add Billing Info----------------------------------------------------
router.post('/savebillinginfoevent', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      var id = req.session.user[0].MemberNumber+"-Reg"
      var fname =  req.body.FirstName;
      var lname =  req.body.LastName;
      var name  =  req.body.FirstName+","+req.body.LastName;
      var email = req.body.Email;
      var phone = req.body.Phone;
      var Address = req.body.Address;
      var City = req.body.City;
      var State = req.body.State;
      var Zip = req.body.Zip;
      var Country = req.body.Country;
      var fname1 =  req.body.FirstName1;
      var lname1 =   req.body.LastName1;
      var Address1 = req.body.Address1;
      var City1 = req.body.City1;
      var State1 = req.body.State1;
      var Zip1 = req.body.Zip1;
      var Country1 = req.body.Country1;
      request.input('TempOnlineMainID', sql.Int, null);
      request.input('DateStamp', sql.DateTime, moment().format('YYYY-MM-DD hh:mm:ss:SSS'));
      request.input('SessionID', sql.VarChar(250), id);
      request.input('FirstName', sql.VarChar(250), fname);
      request.input('LastName', sql.VarChar(250), lname);
      request.input('Email', sql.VarChar(250), email);
      request.input('Phone', sql.VarChar(250), phone);
      request.input('BillingAddress', sql.VarChar(250), Address);
      request.input('BillingCity', sql.VarChar(250), City);
      request.input('BillingState', sql.VarChar(50), State);
      request.input('BillingZipCode', sql.VarChar(50), Zip);
      request.input('BillingCountry', sql.VarChar(50), Country);
      request.input('ShippingFirstName', sql.VarChar(50), fname1);
      request.input('ShippingLastName', sql.VarChar(50), lname1);
      request.input('ShippingAddress', sql.VarChar(250), Address1);
      request.input('ShippingCity', sql.VarChar(250), City1);
      request.input('ShippingState', sql.VarChar(50), State1);
      request.input('ShippingZipCode', sql.VarChar(50), Zip1);
      request.input('ShippingCountry', sql.VarChar(50), Country1);
      request.execute('_instemponlineStore_TempStore', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          res.sendStatus(200);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//------------------------------------------------------Animal Payment--------------------------------------
router.post('/animalpayment', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    // var amount = req.body.amount;
    var amount = 1;
    var shipObject = req.body.shipObject;
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription('Animal regristration');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.bull.FirstName);
            billTo.setLastName(req.body.bull.LastName);
            billTo.setCompany('ABBI');
            billTo.setAddress(req.body.bull.Address);
            billTo.setCity(req.body.bull.City);
            billTo.setState(req.body.bull.State);
            billTo.setZip(req.body.bull.Zip);
            billTo.setCountry(req.body.bull.Country);
            billTo.setPhoneNumber(req.body.bull.Phone);
            billTo.setEmail(req.body.bull.Email);
            billTo.setFaxNumber(req.body.bull.Fax);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.bull.Email);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);  
            transactionRequestType.setCustomer(customer);
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    request.input('PaymentDate', sql.DateTime, null);
                    request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
                    // console.log(req.session.user[0].MemberNumber)
                    request.input('Status', sql.VarChar(50), null);
                    request.input('PaymentType', sql.VarChar(50), req.body.pay.Payment);
                    request.input('Category', sql.VarChar(50), 'Work Order');
                    request.input('EventID', sql.Int, 0);
                    request.input('PaymentAmount', sql.Money, amount);
                    request.input('FromTheWeb', sql.Int, 1);
                    request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
                    request.input('tempRegNo', sql.Int, 0);
                    request.input('HandlingFeeAmt', sql.  Money, req.body.handling);
                    request.input('DiscountAmt', sql.Money, null);
                    request.input('CCType', sql.VarChar(50), null);
                    request.input('CCNumber', sql.VarChar(50), null);
                    request.input('CCExpDate', sql.VarChar(50), null);
                    request.input('CCSecCode', sql.VarChar(50), null);
                    request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
                    request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
                    request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
                    request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
                    request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
                    request.input('tempStoreId', sql.Int, req.body.tempid.TempId);
                    request.input('shippingCost',sql.Money,shipObject.shipCost);
                    request.input('ShippingType', sql.VarChar(250),shipObject.shipType);
                    request.execute('_completeanimalregistration', function(err, recordsets, returnValue, affected) {
                      if(err){
                        // console.log(err)
                      }
                      else{
                        var transporter = nodemailer.createTransport({
                          service: 'gmail',
                          auth: {
                            user: 'abbi@integrity-tek.com',
                            pass: 'Abbi@2021'
                          }
                        });

                        var mailOptions = {
                          from: 'no-reply',
                          to: ['abbi@integrity-tek.com',req.body.bull.Email],
                          subject: 'Registration Successfull - ABBI',
                          html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Animal Registration</h1>\n                      <h2>Hi "+req.session.user[0].MemberName+"</h2>\n                      <h2>Animal Registered Successfully</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://210.212.210.92:2021/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
                        };

                        transporter.sendMail(mailOptions, function(error, info){
                          if (error) {
                          } else {
                          }
                        });
                      }
                    });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);
  
  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('Animal registration');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.ework.FirstName);
  billTo.setLastName(req.body.ework.LastName);
  billTo.setCompany('ABBI');
  billTo.setAddress(req.body.ework.BillingAddress);
  billTo.setCity(req.body.ework.BillingCity);
  billTo.setState(req.body.ework.BillingState);
  billTo.setZip(req.body.ework.BillingZip);
  billTo.setCountry(req.body.ework.BillingCountry);
  billTo.setPhoneNumber(req.body.ework.Phone);
  billTo.setEmail(req.body.ework.Email);
  billTo.setFaxNumber(req.body.ework.Fax);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.body.ework.ShippingFirstName);
  shipTo.setLastName(req.body.ework.ShippingLastName);
  shipTo.setCompany('ABBI for shipment');
  shipTo.setAddress(req.body.ework.ShippingAddress);
  shipTo.setCity(req.body.ework.ShippingCity);
  shipTo.setState(req.body.ework.ShippingState);
  shipTo.setZip(req.body.ework.ShippingZip);
  shipTo.setCountry(req.body.ework.ShippingCountry);

  var customer = new ApiContracts.CustomerDataType();
  customer.setEmail(req.body.ework.Email);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);
  transactionRequestType.setCustomer(customer);
  var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          request.input('PaymentDate', sql.DateTime, null);
          request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
          request.input('Status', sql.VarChar(50), null);
          request.input('PaymentType', sql.VarChar(50), req.body.pay.Payment);
          request.input('Category', sql.VarChar(50), 'Work Order');
          request.input('EventID', sql.Int, 0);
          request.input('PaymentAmount', sql.Money, amount);
          request.input('FromTheWeb', sql.Int, 1);
          request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
          request.input('tempRegNo', sql.Int, 0);
          request.input('HandlingFeeAmt', sql.  Money, req.body.handling);
          request.input('DiscountAmt', sql.Money, null);
          request.input('CCType', sql.VarChar(50), null);
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(50), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('tempStoreId', sql.Int, req.body.tempid.TempId);
          request.input('shippingCost',sql.Money,shipObject.shipCost);
          request.input('ShippingType', sql.VarChar(250),shipObject.shipType);
          request.execute('_completeanimalregistration', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                  pass: 'Abbi@2021'
                }
              });

              var mailOptions = {
                from: 'no-reply',
                to: 'abbi@integrity-tek.com',
                subject: 'Registration Successfull - ABBI',
                html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Animal Registration</h1>\n                      <h2>Hi "+req.session.user[0].MemberName+"</h2>\n                      <h2>Animal Registered Successfully</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://210.212.210.92:2021/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
              };

              transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                } else {
                }
              });
            }
          });
res.send({ msg:'Transaction Successfull'});
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
}  
else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('PaymentDate', sql.DateTime, null);
  request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
  request.input('Status', sql.VarChar(50), null);
  request.input('PaymentType', sql.VarChar(50), 'VI');
  request.input('Category', sql.VarChar(50), 'Work Order');
  request.input('EventID', sql.Int, 0);
  request.input('PaymentAmount', sql.Int, amount);
  request.input('FromTheWeb', sql.Int, 1);
  request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
  request.input('tempRegNo', sql.Int, 0);
  request.input('SubTotalAmt', sql.Int, amount);
  request.input('HandlingFeeAmt', sql.Int, req.body.handling);
  request.input('DiscountAmt', sql.Int, null);
  request.input('CCType', sql.VarChar(50), 'VI');
  request.input('CCNumber', sql.VarChar(50), null);
  request.input('CCExpDate', sql.VarChar(50), null);
  request.input('CCSecCode', sql.VarChar(50), null);
  request.input('eChkABACode', sql.VarChar(9), null);
  request.input('eChkAcctNo', sql.VarChar(4), null);
  request.input('eChkAcctType', sql.VarChar(20), null);
  request.input('eChkAcctName', sql.VarChar(50), null);
  request.input('eChkBankName', sql.VarChar(50), null);
  request.input('tempStoreId', sql.Int, req.body.tempid.TempId);
  request.execute('_completeanimalregistration', function(err, recordsets, returnValue, affected) {
    if (err) {
      // console.log(err)
    }
    else{
      res.send({msg: "Successfull"})
    }
  });
}
}
});
}
});
});
//-------------------------------------------------------------Sire Regno Pen for holding pen----------------------------------------------------
router.post('/addregnosire', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      request.input('txtRegno', sql.Int, req.body.txtreg);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, req.body.Birthdate);
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.body.RegNoID);
      request.execute('_AddsingleAnimal', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          if(recordsets.recordset !== undefined && recordsets.recordset.length > 0 ){
            res.send(recordsets.recordset);
          } else {
          res.send(recordsets1.recordset);
          }
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//----------------------------------------------sire reg no for register animal page-------------
router.post('/addregnosirereg', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.txtreg);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, req.body.Birthdate);
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.body.RegNoID);
      request.execute('_AddsingleAnimal', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          console.log(recordsets.recordset,'oo');
          console.log(recordsets1.recordset,'lll')
          if(recordsets.recordset !== undefined && recordsets.recordset.length > 0 ){
            res.send(recordsets.recordset);
          } else {
          res.send(recordsets1.recordset);
          }
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Remove Sire From Table----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/removesirefromlist/:id', function(req, res) {
      // console.log(req.body)
      // console.log(req.params.id)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "delete from TempDNA where RegNoID="+req.params.id+" and tempDnaID="+req.body.tempDnaID+"";
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -------------------------------------------------------------Check Animal----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkanimaldata', function(req, res) {
      // console.log(req.body)
      var sql = "SELECT COUNT(ID) AS CountID FROM Registration WHERE (Animal = '"+req.body.AnimalName+"') and '"+req.body.sex+"' like '%B' ";
      // console.log(sql)
      var sql1 = "SELECT COUNT(RegNoID) AS CountID FROM tempregistration WHERE (Animal = '"+req.body.AnimalName+"') AND completed=0 and '"+req.body.sex+"' like '%B'";
      // console.log(sql1)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          // console.log(recordsets1.recordset)
          res.send({a:recordsets.recordset,b:recordsets1.recordset});
        }
      });
      });
    });
  });
// -------------------------------------------------------------Check Animal1----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkanimaldata1', function(req, res) {
      // console.log(req.body)
      var sql = "SELECT COUNT(ID) AS CountID FROM Registration WHERE (Animal = '"+req.body.name+"') and '"+req.body.sex+"' like '%B' ";
      // console.log(sql)
      var sql1 = "SELECT COUNT(RegNoID) AS CountID FROM tempregistration WHERE (Animal = '"+req.body.name+"') AND completed=0 and '"+req.body.sex+"' like '%B'";
      // console.log(sql1)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          // console.log(recordsets1.recordset)
          res.send({a:recordsets.recordset,b:recordsets1.recordset});
        }
      });
      });
    });
  });
// -------------------------------------------------------------Super Stack----------------------------------------------------
router.get('/superstackstable', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;      
      request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
      request.execute('_SS_BackOrderList', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }      
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
// -------------------------------------------------------------More News----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/newsmore', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT htext FROM blog WHERE blogid = "+req.body.blogid+"";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets.recordset)
            res.send(recordsets.recordset);
          }
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -------------------------------------------------------------News----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/newsinfo', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT blogid,author, sluggo,headline, htext, blogtime FROM blog WHERE hide = 0 ORDER BY blogtime DESC";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------Schedule-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/scheduledate', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select DATEADD(week,-1,getdate()) as weekago";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------Schedule Info-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/scheduleinfo', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT pevid, city, state, title, sanction, startday,status from bc_event_parent where startday>DATEADD(week,-1,getdate()) order by startday";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets.recordset)
            res.send(recordsets.recordset);
          }
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//------------------------------------------------------------Schedule More-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/moreschedule', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select * from bc_event_parent where pevid="+req.body.pevid+"";
        var sql1 = "SELECT pevid,jid,jname FROM bc_judge_x WHERE pevid = "+req.body.pevid+" ORDER BY jid";
        var sql2  = "SELECT evid,pevid,(cast(evid as nvarchar(5))+' '+sanction+' '+evclass+' '+evtype) as Class,startdate,cast((SELECT COUNT(*) FROM bc_entry_x WHERE evid =bec.evid)as nvarchar(5))+'/'+cast((SELECT COUNT(*) FROM bc_res_place WHERE evid =bec.evid)as nvarchar(5)) as entries_results FROM bc_event_child bec WHERE pevid ="+req.body.pevid+" ORDER BY startdate ASC, evtype DESC, evclass ASC"
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          request.query(sql1, function (err, recordsets1) {
            request.query(sql2, function (err, recordsets2) {
              if (err) {
                res.sendStatus(500);
              }
              else {
                // console.log(recordsets.recordset)
                // console.log(recordsets1.recordset)
                // console.log(recordsets2.recordset)
                res.send({data1 : recordsets.recordset, data2 : recordsets1.recordset, data3 : recordsets2.recordset});
              }
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//------------------------------------------------------------Enter Events-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/evententrylist', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT a.bbcid,CONCAT_WS(' ',a.bno,a.bname) AS Animal,a.owner, a.Handler,a.Del, a.birthyear, a.RegNo,(YEAR(GETDATE())-a.birthyear) Age FROM bc_bulls a LEFT JOIN Registration b ON a.regno=b.regno LEFT JOIN bc_handlers c ON a.handler = c.handler WHERE (b.memberno = "+req.session.user[0].MemberNumber+" OR c.memno ="+req.session.user[0].MemberNumber+") AND b.status != 'Deceased' ORDER BY a.birthyear DESC, a.bno";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
// -------------------------------------------------------------Get Events for animal----------------------------------------------------
router.post('/entereventdata', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)      
      request.input('bbcid', sql.Int, req.body.bbcid);
      request.input('age', sql.Int, req.body.Age);
      request.input('regno', sql.Int, req.body.RegNo);
      request.execute('geteventsanimalage', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }      
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//------------------------------------------------------------Enter Event screen-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/entereventscreen', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT a.bbcid,a.bno,a.bname AS Animal,a.owner, a.Handler,a.Del, a.birthyear, a.RegNo,(YEAR(GETDATE())-a.birthyear) Age,"+req.body.fees+" fees FROM bc_bulls a LEFT JOIN Registration b ON a.regno=b.regno LEFT JOIN bc_handlers c ON a.handler = c.handler WHERE a.bbcid="+req.body.bbcid+" AND b.status != 'Deceased'";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------Class Info-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/classdata', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user; 
        // console.log(req.body)
        var sql = "select evid as classid,(evclass+' '+evtype) as class,startdate,bep.city,bep.state,bep.title from bc_event_child bec join bc_event_parent bep on bec.pevid=bep.pevid where bec.evid="+req.body.evid+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------Results More-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/moreresults', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select * from bc_event_parent where pevid="+req.body.pevid+"";
        var sql1 = "SELECT pevid,jid,jname FROM bc_judge_x WHERE pevid = "+req.body.pevid+" ORDER BY jid";
        var sql2  = "SELECT evid,pevid,(cast(evid as nvarchar(5))+' '+sanction+' '+evclass+' '+evtype) as Class,startdate,cast((SELECT COUNT(*) FROM bc_entry_x WHERE evid =bec.evid)as nvarchar(5))+'/'+cast((SELECT COUNT(*) FROM bc_res_place WHERE evid =bec.evid)as nvarchar(5)) as entries_results FROM bc_event_child bec WHERE pevid ="+req.body.pevid+" ORDER BY startdate ASC, evtype DESC, evclass ASC"
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          request.query(sql1, function (err, recordsets1) {
            request.query(sql2, function (err, recordsets2) {
              if (err) {
                res.sendStatus(500);
              }
              else {
                // console.log(recordsets.recordset)
                // console.log(recordsets1.recordset)
                // console.log(recordsets2.recordset)
                res.send({data1 : recordsets.recordset, data2 : recordsets1.recordset, data3 : recordsets2.recordset});
              }
            });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//------------------------------------------------------------Results-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/showresults', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        // console.log(req.body)
        var sql = "SELECT pevid, city, state, title,sanction, startday,status FROM bc_event_parent WHERE startday <= DATEADD(day,3,getdate()) ORDER BY startday DESC";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------Class Result Info-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/classresdata', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        // console.log(req.body)
        var sql = "select evid as classid,(evclass+' '+evtype) as class,startdate,bep.city,bep.state,bep.title from bc_event_child bec join bc_event_parent bep on bec.pevid=bep.pevid where bec.evid="+req.body.evid+"";
        var sql1 = "SELECT a.*,b.money,b.sc FROM bc_res_outs a INNER JOIN bc_res_place b ON a.outid = b.outid WHERE b.evid ="+req.body.evid+" ORDER BY b.sc DESC";
      // console.log(sql1)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets1.recordset)
          res.send({data : recordsets.recordset, table : recordsets1.recordset});
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------Animal Profile Tab-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/animalprofiletab', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        // console.log(req.body)
        var sql = "SELECT bb.*,(select cast(season as nvarchar(5))+' Money: $'+cast(smoney as nvarchar(8)) from animal_earning where regno=bb.regno) money2021,(SELECT SUM(smoney) FROM animal_earning WHERE regno = bb.regno) Careermoney FROM bc_bulls bb WHERE bbcid = "+req.body.bbcid+"";
        var sql1 = "SELECT rowid,mpos,ppos,oppos,bbcid,season,(case when division='ACGfut' then 'ABBI Cowgirl' when division='Afut' then 'ABBI Futurity' when division='Aclassic' then 'ABBI Classic' when division='AJRfut' then 'ABBI Junior' when division='Aderby' then 'ABBI Derby' when division='AYear' then 'ABBI Yearling' when division='A2K18_FS' then 'ABBI 2018 Fut. Series' when division='AfutC' then 'ABBI Canada Futurity' when division='AclassicC' then 'ABBI Canada Classic' when division='Amat' then 'ABBI Maturity' when division='Bfut' then 'BTCA Futurity' when division='Bclassic' then 'BTCA Classic' when division='Bderby' then 'BTCA Derby' else division end) division,money,point_ttl,point_avg,opoint_ttl,outcount,qoutcount,(SELECT SUM(money) FROM bc_standings_bucket WHERE bbcid = "+req.body.bbcid+") seasontotwin FROM bc_standings WHERE bbcid = "+req.body.bbcid+" ORDER BY division";
        var sql2 = "SELECT DISTINCT b.season, b.pevid, b.city, b.state, b.title, b.startday, b.sanction FROM bc_res_outs a,bc_event_parent b WHERE a.pevid = b.pevid AND a.bbcid = "+req.body.bbcid+" ORDER BY b.startday DESC   "
        var sql3 = "SELECT evid, sc, place, (case when money<=0.00 then Null else money end) money, go,pevid FROM bc_res_place WHERE bbcid ="+req.body.bbcid+" AND pevid in(SELECT DISTINCT b.pevid FROM bc_res_outs a,bc_event_parent b WHERE a.pevid = b.pevid AND a.bbcid = "+req.body.bbcid+") order by pevid desc"
      // console.log(sql1)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          request.query(sql2, function (err, recordsets2) {
            request.query(sql3, function (err, recordsets3) {
              if (err) {
                res.sendStatus(500);
              }
              else {
          // console.log(recordsets2.recordset)
          // console.log(recordsets3.recordset)
          res.send({data4 : recordsets.recordset, data5 : recordsets1.recordset, data6 : recordsets2.recordset, data7 : recordsets3.recordset});
        }
      });
          });
        });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------Program-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/programdata', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        // console.log(req.body)
        var sql = "SELECT a.memberno, a.enroller, a.season, b.firstname, b.lastname, b.phone, b.email, a.regno,a.prog, a.totalfee, a.paid, a.paylog_id FROM bc_programs a, members b WHERE a.memberno = b.membernumber AND a.memberno = "+req.session.user[0].MemberNumber+" ORDER BY a.season, a.prog, a.paylog_id";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets.recordset)
            res.send(recordsets.recordset);
          }
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//------------------------------------------------------------Current Stand Date-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/currentstanddate', function(req, res) {
      // if(req.session && req.session.user){
      //   res.locals.user = req.session.user;
        // console.log(req.body)
        var sql = "SELECT max(startday) as date FROM bc_standings_events";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    // }
    // else{
    //   req.session.reset();
    //   res.redirect('/');
    // }
  });
  });
//------------------------------------------------------------------------Season Out------------------------------------------------------------------------------------------------
router.get('/seasonout',function(req,res){
  var year = moment().format('YYYY');
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // if(req.session && req.session.user){
    //   res.locals.user = req.session.user;
    request.input('season', sql.Int, year);
    request.execute('_getseasonstats ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
    // }
    // else{
    //   req.session.reset();
    //   res.redirect('/');
    // }
  });
});
//------------------------------------------------------------------------Season Out Past------------------------------------------------------------------------------------------------
router.get('/seasonout1',function(req,res){
  var year = moment().subtract(1, 'year').format('YYYY');
  // console.log(year)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // if(req.session && req.session.user){
    //   res.locals.user = req.session.user;
    request.input('season', sql.Int, year);
    request.execute('_getseasonstats ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    // }
    // else{
    //   req.session.reset();
    //   res.redirect('/');
    // }
  });
});
//------------------------------------------------------------------------Season Table------------------------------------------------------------------------------------------------
router.post('/seasontable',function(req,res){
  var year = moment().format('YYYY');
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body.division)
    // console.log(req.body.format)
    // if(req.session && req.session.user){
    //   res.locals.user = req.session.user;
    request.input('division', sql.VarChar(15), req.body.division);
    request.input('season', sql.Int, year);
    request.input('format', sql.VarChar(15), req.body.format);
    request.execute('_getstandingcategorydetails ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset.length)
          res.send(recordsets.recordset);
        }
      });
    // }
    // else{
    //   req.session.reset();
    //   res.redirect('/');
    // }
  });
});
//------------------------------------------------------------------------Season Table Past------------------------------------------------------------------------------------------------
router.post('/seasontable1',function(req,res){
  var year = moment().subtract(1, 'year').format('YYYY');
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // if(req.session && req.session.user){
    //   res.locals.user = req.session.user;
    request.input('division', sql.VarChar(15), req.body.division);
    request.input('season', sql.Int, year);
    request.input('format', sql.VarChar(15), req.body.format);
    request.execute('_getstandingcategorydetails ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset.length)
          res.send(recordsets.recordset);
        }
      });
    // }
    // else{
    //   req.session.reset();
    //   res.redirect('/');
    // }
  });
});
//------------------------------------------------------------Get Money-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/getmoney', function(req, res) {
      var sql = "SELECT divcode, SUM(money) AS moneysum, SUM(amoney) AS amoneysum FROM bc_standings_bucket GROUP BY divcode ORDER BY divcode";
      var sql1 = "SELECT division, SUM(money) AS moneysum FROM bc_standings_archive WHERE season = Year(Getdate())-1 GROUP BY division ORDER BY division";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets.recordset)
            // console.log(recordsets1.recordset)
            res.send({data : recordsets.recordset, data1 : recordsets1.recordset});
          }
        });
      });
    });
  });
//------------------------------------------------------------Get Update Stand-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/getstandupdatedata', function(req, res) {
      var sql = "select null as step,season, YEAR(GETDATE()) CurrentSeason,count(*) Bucket_pop from bc_standings_bucket group by season";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//------------------------------------------------------------Export Stand-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/exportstanding', function(req, res) {
      var sql = "SELECT b.regno, b.bno, b.bname, b.owner,a.bbcid,a.outid, a.score, a.place, a.evid, a.city, a.state, a.sanction, a.evclass,a.evtype, a.divcode, a.money, a.amoney, a.opoints FROM bc_standings_bucket a,bc_bulls b WHERE a.bbcid = b.bbcid ORDER BY a.divcode, a.score DESC, a.outid, b.bname";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//-----------------------------------------------Compile Season------------------------------------------------------------------------------------------------
router.post('/compileseason',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.input('season', sql.Int, req.body.season);
    request.input('Type', sql.VarChar(50), 'seasonevents' );
    request.execute('Updatestandings ', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200);
      }
    });
  });
});
//-----------------------------------------------Bucket------------------------------------------------------------------------------------------------
router.post('/Bucket',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.input('season', sql.Int, req.body.season);
    request.input('Type', sql.VarChar(50), 'bucket' );
    request.execute('Updatestandings ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200);
      }
    });
  });
});
//-----------------------------------------------SetMoney------------------------------------------------------------------------------------------------
router.post('/SetMoney',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.input('season', sql.Int, req.body.season);
    request.input('Type', sql.VarChar(50), 'money' );
    request.execute('Updatestandings ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200);
      }
    });
  });
});
//-----------------------------------------------CompileStand------------------------------------------------------------------------------------------------
router.post('/CompileStand',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.input('season', sql.Int, req.body.season);
    request.input('Type', sql.VarChar(50), 'standings' );
    request.execute('Updatestandings ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200);
      }
    });
  });
});
//-----------------------------------------------SetPosition------------------------------------------------------------------------------------------------
router.post('/SetPosition',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.input('season', sql.Int, req.body.season);
    request.input('Type', sql.VarChar(50), 'position' );
    request.execute('Updatestandings ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200);
      }
    });
  });
});
//-----------------------------------------------AnimalEarningUpdate------------------------------------------------------------------------------------------------
router.post('/AnimalEarningUpdate',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.input('season', sql.Int, req.body.season);
    request.input('Type', sql.VarChar(50), 'animalearnings' );
    request.execute('Updatestandings ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200);
      }
    });
  });
});
//-----------------------------------------------LegacyDam------------------------------------------------------------------------------------------------
router.post('/LegacyDam',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.input('season', sql.Int, req.body.season);
    request.input('Type', sql.VarChar(50), 'legacydams' );
    request.execute('Updatestandings ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200);
      }
    });
  });
});
//------------------------------------------------------------All Stand-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/allstanding', function(req, res) {
      var sql = "SELECT b.regno, b.bno, b.bname, b.owner,a.* FROM bc_standings a,bc_bulls b WHERE a.bbcid = b.bbcid ORDER BY a.division, a.money DESC, b.bname";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//------------------------------------------------------------My Entries-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/myentries', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select a.entid, a.pevid, a.regno, a.bno, a.bname, a.bbcid,c.startday,c.city,c.state,c.title,c.ec,e.evid,e.evtype,e.evclass,e.sanction,e.fees from bc_entries a, Registration b,bc_event_parent c,bc_handlers d,bc_event_child e,bc_entry_x f WHERE a.regno = b.regno AND a.pevid = c.pevid AND a.handler = d.handler and a.pevid=e.pevid AND a.bbcid=f.bbcid and a.pevid=f.pevid and a.entid=f.entid and e.evid=f.evid AND c.startday >= DATEADD(year,-1,getdate()) AND (b.memberno = "+req.session.user[0].MemberNumber+" OR d.memno ="+req.session.user[0].MemberNumber+") ORDER BY c.startday DESC, a.entid";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------My Payments-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/mypayments', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT paymentid, payamt, paydate, cust_string, cust_email,status, trans_type FROM test_payments WHERE memberno = "+req.session.user[0].MemberNumber+" and status='pass' ORDER BY paydate DESC";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//------------------------------------------------------------My Payments Next-----------------------------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/paynext', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT a.lineid, a.sku, a.qty, a.ttl_shipping, a.entid, b.sku_parent, a.sku_name, b.sku_descrip FROM test_paylines a, itemsku b WHERE a.sku = b.sku AND paymentid = "+req.body.paymentid+";";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -------------------------------------------------------------Contact Us----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/contactinfo', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Insert Into ContactUS(Name,Email,Phone,Subject,Message) Values('"+req.body.name+"','"+req.body.email+"','"+req.body.phone+"','"+req.body.subject+"','"+req.body.message+"')";
      //console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
// -------------------------------------------------------------Check Horns----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkherddata', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
      var sql = "SELECT COUNT(ID) AS CountID FROM Registration WHERE privateHerd = '"+req.body.animalidentification+"' AND MemberNo="+req.session.user[0].MemberNumber+"";
      // console.log(sql)
      var sql1 = "select count(regnoid) AS CountID from tempregistration where privateHerd = '"+req.body.animalidentification+"' and completed = 0 and MemberNo="+req.session.user[0].MemberNumber+"";
      // console.log(sql1)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets.recordset)
            // console.log(recordsets1.recordset)
            res.send({a:recordsets.recordset,b:recordsets1.recordset});
          }
        });
      });
    }
    });
    
  });
// -------------------------------------------------------------Check Horns1----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkherddata1', function(req, res) {
      var sql = "SELECT COUNT(ID) AS CountID FROM Registration WHERE privateHerd = '"+req.body.herd+"'";
      // console.log(sql)
      var sql1 = "select count(regnoid) AS CountID from tempregistration where privateHerd = '"+req.body.herd+"' and completed = 0";
      // console.log(sql1)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets.recordset)
            // console.log(recordsets1.recordset)
            res.send({a:recordsets.recordset,b:recordsets1.recordset});
          }
        });
      });
    });
  });
// SELECT COUNT(ID) AS CountID FROM Registration WHERE MemberNo = @MemberNo and (privateHerd = @Herd) AND (TypeService LIKE '%B%') and sold <> 1 and status <> 'Deceased'
//-------------------------------------------------------------Sponsored Events----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/SponsoredEventsData', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT EventID, Event, BeginDate, EndDate, Location, Opendate, (case when CloseDate<GETDATE() then null else CloseDate end) as CloseDate, OnlineEntry, EntryNote, ScheduledPayments FROM Events WHERE (Display = 1)  and (enddate is null or enddate >= getdate())  ORDER BY isnull(BeginDate,CloseDate) asc";
        request.query(sql, function (err, recordset) {
          if (err){
            res.sendStatus(500);
          }
          else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Add from Curent to List----------------------------------------------------
router.post('/addcurrentsiretolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Add from Previous to List----------------------------------------------------
router.post('/addprevioussiretolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Add from Deceased to List----------------------------------------------------
router.post('/adddeceasedsiretolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    // console.log(req.body)
    // console.log(req.params.id)
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Add from Curent to Breeding----------------------------------------------------
router.post('/addcurrentsiretobreeding/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      // console.log(req.params.id)
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'BreedingList');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, data, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(data.recordset);
          res.send(data.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Remove Sire from Breeding List----------------------------------------------------
router.post('/removesirefrombreedinglist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      // console.log(req.params.id)
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'Remove');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          res.sendStatus(200);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Search Member in Sire----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addmemberSiere', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select MemberNumber, (LastName+','+FirstName) as Lastname,RanchName,city,State from members where (lastname like '%'+'"+req.body.name+"'+'%' Or Cast(MemberNumber as Nvarchar) = '"+req.body.name+"')and MemberNumber<>"+req.session.user[0].MemberNumber+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//-------------------------------------------------------------Add Someone Sire----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addsomeonesiere', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
      // console.log(req.body)
      var sql = "SELECT "+req.body.MemberNumber+" as MemberNumber, RegNo,Animal FROM dbo.Registration INNER JOIN dbo.Members ON dbo.Registration.MemberNo = dbo.Members.MemberNumber WHERE dbo.Registration.MemberNo = "+req.body.MemberNumber+" AND (dbo.Registration.TypeService = 'NB' OR dbo.Registration.TypeService = 'AB' OR dbo.Registration.TypeService = 'EB')  and (status <> 'Deceased' and sold <> 1) and status <> 'Waiting for Samples - Overdue' and Members.MemberNumber <> 1675 order by regno asc";
      var sql1 = "SELECT "+req.body.MemberNumber+" as MemberNumber, Registration.RegNo,Registration.Animal,case registration.sold when  1 then 'Sold'  else Members.LastName + ', ' + Members.FirstName end AS MemberName FROM Registration left JOIN RegistrationHistory ON RegistrationHistory.RegNo = Registration.RegNo  left join  Members ON Registration.MemberNo = "+req.body.MemberNumber+" WHERE ((RegistrationHistory.PrevMember = "+req.body.MemberNumber+" and RegistrationHistory.Regno = Registration.RegNo) or (registration.memberno = "+req.body.MemberNumber+" and registration.sold = 1)) and status <> 'Waiting for Samples - Overdue' AND (dbo.Registration.TypeService = 'NB' OR dbo.Registration.TypeService = 'AB' OR dbo.Registration.TypeService = 'EB') and Registration.MemberNo <> 1657 order by RegistrationHistory.regno desc";
      var sql2 = "SELECT "+req.body.MemberNumber+" as MemberNumber, RegNo,Animal FROM dbo.Registration INNER JOIN dbo.Members ON dbo.Registration.MemberNo = dbo.Members.MemberNumber WHERE dbo.Registration.MemberNo = "+req.body.MemberNumber+" AND (dbo.Registration.TypeService = 'NB' OR dbo.Registration.TypeService = 'AB' OR dbo.Registration.TypeService = 'EB')  and (status='Deceased') and status <> 'Waiting for Samples - Overdue' and Members.MemberNumber <> 1675 order by regno asc";
      var sql3 = "SELECT "+req.body.MemberNumber+" as MemberNumber, b.RegNo,r.Animal,case r.sold when  1 then 'Sold'  else m.LastName + ', ' + m.FirstName end AS MemberName FROM CurrentBreedingAnimals b join Registration r on b.regno = r.regno left join Members m ON r.MemberNo = m.MemberNumber and r.MemberNo <> "+req.body.MemberNumber+" WHERE b.MemberNo = "+req.body.MemberNumber+" AND (r.TypeService = 'NB' OR r.TypeService = 'AB' OR r.TypeService = 'EB') and r.MemberNo <> 1657 order by b.regno desc";
      request.query(sql, function (err, recordset) {
        request.query(sql1, function (err, recordset1) {
          request.query(sql2, function (err, recordset2) {
            request.query(sql3, function (err, recordset3) {
              if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({current:recordset.recordset,previous:recordset1.recordset,deceased:recordset2.recordset,breeding:recordset3.recordset});
        }
      });
          });
        });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//-------------------------------------------------------------Someone from Curent to List----------------------------------------------------
router.post('/someoneaddcurrentsiretolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Someone from Previous to List----------------------------------------------------
router.post('/someoneaddprevioussiretolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Someone from Deceased to List----------------------------------------------------
router.post('/someoneadddeceasedsiretolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    // console.log(req.body)
    // console.log(req.params.id)
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Someone from Curent to Breeding----------------------------------------------------
router.post('/someoneaddcurrentsiretobreeding/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      // console.log(req.params.id)
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.body.MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'BreedingList');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_getcurrentbreedingSH', function(err, recordsets1, returnValue, affected) {  
          request.execute('_AnimalRegistration_tempDNA', function(err, data, returnValue, affected) {
            if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
        });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Someone Remove Sire from Breeding List----------------------------------------------------
router.post('/someoneremovesirefrombreedinglist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      // console.log(req.params.id)
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.body.MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'B');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'Remove');
      request.execute('_SiresfrmHerd', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          res.sendStatus(200);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//----------------------------------------------------------------Herd Data-------------------------------------------------------------------
//-------------------------------------------------------------Add from Curent Dam to List----------------------------------------------------
//-------------------------------------------------------------Dam Regno Pen----------------------------------------------------
//-------------------------------------------------------------Current Sire List----------------------------------------------------
router.post('/currentdatadam',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('Type', sql.VarChar(25), 'Current');
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.execute('_AnimalRegistration_Dam', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Previous Sire List----------------------------------------------------
router.post('/previousdatadam',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('Type', sql.VarChar(25), 'Previous');
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.execute('_AnimalRegistration_Dam', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Deceased Sire List----------------------------------------------------
router.post('/deceaseddatadam',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('Type', sql.VarChar(25), 'Deceased');
      request.input('Birthdate', sql.DateTime, req.body.Birthdate);
      request.execute('_AnimalRegistration_Dam', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//---------------------------------------------------Add Dam in Holding Pen---------------------------
router.post('/addregnodam', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.body)
      request.input('txtRegno', sql.Int, req.body.txtreg);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, req.body.Birthdate);
      request.input('SexCode', sql.VarChar(10), 'C');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.body.RegNoID);
      request.execute('_AddsingleAnimal_Dam', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
         
          if(recordsets.recordset !== undefined && recordsets.recordset.length > 0 ){
            res.send(recordsets.recordset);
          } else {
          res.send(recordsets1.recordset);
          }
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//------------------------------------------------------------Alert Box for Dam in Holding pen------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/alertboxfordam', function(req, res) {
      // console.log(req.body)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select count(id) as Cnt from  registration where RegNo ="+req.body.txtreg+" and memberno <> "+req.session.user[0].MemberNumber+" and not exists (select regno from registrationhistory where regno="+req.body.txtreg+"  and prevmember ="+req.session.user[0].MemberNumber+") and not exists(select regno from TempDNA where regno="+req.body.txtreg+"  and MemberNumber ="+req.session.user[0].MemberNumber+")";
        // console.log(sql)
        var sql1 = "SELECT isnull(RanchName,LastName + ', ' + FirstName) AS RanchName FROM Members join registration on membernumber = memberno WHERE regno ="+req.body.txtreg+" "
        request.query(sql, function (err, recordsets) {
          request.query(sql1, function (err, recordsets1) {
            if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          // console.log(recordsets1.recordset)
          res.send({count : recordsets.recordset, ranch : recordsets1.recordset})
        }
      });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Show list in next page----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/showlistinnextpage', function(req, res) {
      console.log(req.body,'ppppppppppp')
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select RegNoID,tempDnaID, RegNo,(select Animal from Registration Where RegNo=TD.RegNo) as Animal,sex from TempDNA TD where RegNoID="+req.body.RegNoID+"";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          //console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Remove Dam From Table----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/removedamfromlist/:id', function(req, res) {
      // console.log(req.body)
      // console.log(req.params.id)
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "delete from TempDNA where RegNoID="+req.params.id+" and tempDnaID="+req.body.tempDnaID+"";
        request.query(sql, function (err, recordsets) {
          if (err) {
            // console.log(err)
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//---------------------------------------Add current dam to list--------------------------------------------------
router.post('/addcurrentdamtolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'C');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_DamsfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Add from Previous Dam to List----------------------------------------------------
router.post('/addpreviousdamtolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'C');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_DamsfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Add from Deceased Dam to List----------------------------------------------------
router.post('/adddeceaseddamtolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    // console.log(req.body)
    // console.log(req.params.id)
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'C');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_DamsfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Search Member in Dam----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addmemberDam', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select MemberNumber, (LastName+','+FirstName) as Lastname,RanchName,city,State from members where (lastname like '%'+'"+req.body.damname+"'+'%' Or Cast(MemberNumber as Nvarchar)='"+req.body.damname+"') and MemberNumber<>"+req.session.user[0].MemberNumber+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//-------------------------------------------------------------Add Someone Dam----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addsomeonedam', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        // console.log(req.body)
        var sql = "SELECT "+req.body.MemberNumber+" as MemberNumber, RegNo,Animal FROM dbo.Registration INNER JOIN dbo.Members ON dbo.Registration.MemberNo = dbo.Members.MemberNumber WHERE dbo.Registration.MemberNo = "+req.body.MemberNumber+" AND (dbo.Registration.TypeService = 'NC' OR dbo.Registration.TypeService = 'AC' OR dbo.Registration.TypeService = 'EC')  and (status <> 'Deceased' and sold <> 1) and status <> 'Waiting for Samples - Overdue' and Members.MemberNumber <> 1675 order by regno asc";
        var sql1 = "SELECT "+req.body.MemberNumber+" as MemberNumber, Registration.RegNo, Registration.Animal,registration.birthdate,case registration.sold when  1 then 'Sold'  else Members.LastName + ', ' + Members.FirstName end AS MemberName FROM Registration left JOIN RegistrationHistory ON RegistrationHistory.RegNo = Registration.RegNo left join  Members ON Registration.MemberNo = Members.MemberNumber WHERE ((RegistrationHistory.PrevMember = "+req.body.MemberNumber+" and RegistrationHistory.Regno = Registration.RegNo) or (registration.memberno = "+req.body.MemberNumber+" and registration.sold = 1)) AND (dbo.Registration.TypeService = 'NC' OR dbo.Registration.TypeService = 'AC' OR dbo.Registration.TypeService = 'EC') and status <> 'Waiting for Samples - Overdue' and Registration.MemberNo <> 1657 order by RegistrationHistory.regno desc";
        var sql2 = "SELECT "+req.body.MemberNumber+" as MemberNumber, RegNo,Animal FROM dbo.Registration INNER JOIN dbo.Members ON dbo.Registration.MemberNo = dbo.Members.MemberNumber WHERE dbo.Registration.MemberNo = "+req.body.MemberNumber+" AND (dbo.Registration.TypeService = 'NC' OR dbo.Registration.TypeService = 'AC' OR dbo.Registration.TypeService = 'EC')  and (status='Deceased') and status <> 'Waiting for Samples - Overdue' and Members.MemberNumber <> 1675 order by regno asc";
        request.query(sql, function (err, recordset) {
          request.query(sql1, function (err, recordset1) {
            request.query(sql2, function (err, recordset2) {
              if (err){
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send({dcurrent:recordset.recordset,dprevious:recordset1.recordset,ddeceased:recordset2.recordset});
        }
      });
          });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//-------------------------------------------------------------Someone from Curent dam to List----------------------------------------------------
router.post('/someoneaddcurrentdamtolist/:id', function(req, res) {
  // console.log(req.params.id)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'C');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_DamsfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordsets1.recordset);
            res.send(recordsets1.recordset);
          }
        });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Someone from Previous dam to List----------------------------------------------------
router.post('/someoneaddpreviousdamtolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'C');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_DamsfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Someone from Deceased dam to List----------------------------------------------------
router.post('/someoneadddeceaseddamtolist/:id', function(req, res) {
  sql.connect(config, function (err) { 
    // console.log(req.body)
    // console.log(req.params.id)
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('txtRegno', sql.Int, req.body.RegNo);
      request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
      request.input('birthdate', sql.DateTime, '2011-12-31');
      request.input('SexCode', sql.VarChar(10), 'C');
      request.input('SessionID', sql.VarChar(50), req.session.user[0].sessionID);
      request.input('RegNoID', sql.Int, req.params.id);
      request.input('Action', sql.VarChar(100),'AddRegNo');
      request.execute('_DamsfrmHerd', function(err, recordsets, returnValue, affected) {
        request.execute('_AnimalRegistration_tempDNA', function(err, recordsets1, returnValue, affected) {
          if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          // console.log(recordsets1.recordset);
          res.send(recordsets1.recordset);
        }
      });
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//--------------------------------------------------------------Online Store---------------------------------------------------------
router.get('/onlinestoredata', function(req, res) {
  sql.connect(config, function (err) { 
    // console.log(req.body)
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      // console.log(req.session.user[0].Type)
      if(req.session.user[0].Type == 'Veterinarian'){
        // console.log(req.session.user[0].Type)
        request.input('Category', sql.VarChar(10), '');
        request.input('Admin', sql.Bit, 0);
        request.input('Member', sql.Bit, 1);
        request.input('Vet', sql.Bit, 1);
        request.execute('_onlineStore_Products', function(err, recordsets, returnValue, affected) {
          if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
      }
      else{
        // console.log(req.session.user[0].Type)
        request.input('Category', sql.VarChar(10), '');
        request.input('Admin', sql.Bit, 0);
        request.input('Member', sql.Bit, 1);
        request.input('Vet', sql.Bit, 0);
        request.execute('_onlineStore_Products', function(err, recordsets, returnValue, affected) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordsets.recordset);
            res.send(recordsets.recordset);
          }
        });
      }
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Add Cart----------------------------------------------------
router.post('/addtocart', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.input('MEMBERNO', sql.Int, req.session.user[0].MemberNumber);
      request.input('ProductID', sql.Int, req.body.ProductID);
      request.input('ProductCode', sql.VarChar(200), req.body.ProductNumber);
      request.input('ProductCategory', sql.VarChar(200), req.body.ProductCategory);
      request.input('Product', sql.VarChar(200), req.body.ProductName);
      request.input('Price', sql.Decimal(5, 2), req.body.Price);
      request.input('TotalPrice', sql.Decimal(5, 2), req.body.Quantity * req.body.Price);
      request.input('Qty', sql.Int, req.body.Quantity);
      request.execute('_InsTempCart', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
});
//-------------------------------------------------------------Cart Payment----------------------------------------------------
router.post('/cartpayment', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.amount;
    var shipObj = req.body.shipObj;
    // var amount = 1;
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription('Order has been placed!');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.bills.FirstName);
            billTo.setLastName(req.body.bills.LastName);
            billTo.setCompany('ABBI');
            billTo.setAddress(req.body.bills.Address);
            billTo.setCity(req.body.bills.City);
            billTo.setState(req.body.bills.State);
            billTo.setZip(req.body.bills.Zip);
            billTo.setCountry(req.body.bills.Country);
            billTo.setPhoneNumber(req.body.bills.Phone);
            billTo.setEmail(req.body.bills.Email);
            billTo.setFaxNumber(req.body.bills.Fax);
            
            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.bills.FirstName1);
            shipTo.setLastName(req.body.bills.LastName1);
            billTo.setCompany('ABBI');
            shipTo.setAddress(req.body.bills.Address1);
            shipTo.setCity(req.body.bills.City1);
            shipTo.setState(req.body.bills.State1);
            shipTo.setZip(req.body.bills.Zip1);
            shipTo.setCountry(req.body.bills.Country1);
            billTo.setPhoneNumber(req.body.bills.Phone);
            billTo.setEmail(req.body.bills.Email);
            billTo.setFaxNumber(req.body.bills.Fax);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.bills.Email);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);     
            transactionRequestType.setCustomer(customer); 
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    var date = moment().format('MM-DD-YYYY');
                    request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
                    request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
                    request.input('CCType', sql.VarChar(50), 'VI');
                    request.input('CCNumber', sql.VarChar(50), card);
                    request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
                    request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
                    request.input('eChkABACode', sql.VarChar(9), null);
                    request.input('eChkAcctNo', sql.VarChar(4), null);
                    request.input('eChkAcctType', sql.VarChar(20), null);
                    request.input('eChkAcctName', sql.VarChar(50), null);
                    request.input('eChkBankName', sql.VarChar(50), null);
                    request.input('FirstName', sql.VarChar(250), req.body.bills.FirstName);
                    request.input('LastName', sql.VarChar(250), req.body.bills.LastName);
                    request.input('Address1', sql.VarChar(250), req.body.bills.Address);
                    request.input('City', sql.VarChar(250), req.body.bills.City);
                    request.input('State', sql.VarChar(50), req.body.bills.State);
                    request.input('ZipCode', sql.VarChar(50), req.body.bills.Zip);
                    request.input('Country', sql.VarChar(50), req.body.bills.Country);
                    request.input('Email', sql.VarChar(250), req.body.bills.Email);
                    request.input('Phone', sql.VarChar(50), req.body.bills.Phone);
                    request.input('PymtType', sql.VarChar(20), 'VI');
                    request.input('tempOnlineMainID', sql.Int(50), null);
                    request.input('discountCode', sql.VarChar(100), null);
                    request.input('subtotal', sql.Int, amount);
                    request.input('shippingCost',sql.Money,shipObj.shipCost);
                    request.input('ShippingType', sql.VarChar(250),shipObj.shipType);
                    request.execute('_completeonlinestore', function(err, recordsets, returnValue, affected) {
              // console.log(recordsets.recordset[0].PaymentID)
              var paymentid = recordsets.recordset[0].PaymentID;
              if(err){
                // console.log(err)
              }
              else{
                var transporter = nodemailer.createTransport({
                  service: 'gmail',
                  auth: {
                    user: 'abbi@integrity-tek.com',
                    pass: 'Abbi@2021'
                  }
                });

                var mailOptions = {
                  from: 'no-reply',
                  to: ['abbi@integrity-tek.com',req.body.bills.Email],
                  subject: 'Order Successfull - ABBI',
                  html:"<html>\n\n<body style=\"background-color:#e2e1e0;font-family: Open Sans, sans-serif;font-size:100%;font-weight:400;line-height:1.4;color:#000;\">\n  <table style=\"max-width:670px;margin:50px auto 10px;background-color:#fff;padding:50px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);-moz-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24); border-top: solid 10px #2C3E50;\">\n    <thead>\n      <tr>\n        <th style=\"text-align:left;\"><img style=\"max-width: 150px;\" src=\"\" alt=\"ABBI\"></th>\n        <th style=\"text-align:right;font-weight:400;\">"+date+"</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td colspan=\"2\" style=\"height:35px;\">\n          <h2 style=\"text-align: center; color: #2C3E50\">American Bucking Bull</h2>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"border: solid 1px #ddd; padding:10px 20px;\">\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:150px\">Order status</span><b style=\"color:green;font-weight:normal;margin:0\">Success</b></p>\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Transaction ID</span> "+paymentid+"</p>\n          <p style=\"font-size:14px;margin:0 0 0 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Order amount</span> $"+amount+".00</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"height:35px;\"></td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Bill To :</h3>\n          <p>"+req.body.bills.FirstName+" "+req.body.bills.LastName+"</p>\n          <p>"+req.body.bills.Address+"</p>\n          <p>"+req.body.bills.City+","+req.body.bills.State+","+req.body.bills.Zip+"</p>\n          <p>"+req.body.bills.Country+"</p>\n          <p>Phone # : "+req.body.bills.Phone+"</p>\n    <p>Email : "+req.body.bills.Email+"\n    </td>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Ship To :</h3>\n          <p>"+req.body.bills.Address1+"</p>\n          <p>"+req.body.bills.City1+","+req.body.bills.State1+","+req.body.bills.Zip1+"</p>\n          <p>"+req.body.bills.Country+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Items :</h3>\n    <p>"+req.body.product[0].ProductCode+"</p>\n       <p>"+req.body.product[0].Product+"</p>\n          <p>Quantity : "+req.body.product[0].Qty+"</p>\n          <p>Price : $"+req.body.product[0].Price+"</p>\n        </td>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Payment Details :</h3>\n          <p>Store Total : $"+req.body.product[0].Price * req.body.product[0].Qty+"</p>\n          <p>Shipping & Handling : $"+req.body.handling+" (USPS - First-Class Package Service - Retail)</p>\n          <p>Total : $"+amount+"</p>\n        </td>\n      </tr>\n    </tbody>\n    <tfooter>\n      <tr style=\"background-color: #2C3E50; color: white; padding: 20px;\">\n        <td colspan=\"2\" style=\"font-size:14px;padding:60px 20px 20px 20px;\">\n          <h1>American Bucking Bull</h1>\n          <h3>Contact Info :</h3>\n          <p>101 W. Riverwalk</p>\n          <p>Pueblo, Colorado 81003</p>\n          <p>Phone : (719) 242-2747</p>\n          <p>FAX : (719) 242-2746</p>\n          <p>Email: info@americanbuckingbull.com</p>\n        </td>\n      </tr>\n    </tfooter>\n  </table>\n</body>\n\n</html>"
                };

                transporter.sendMail(mailOptions, function(error, info){
                  if (error) {
                  } else {
                  }
                });
              }
            });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);
  
  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  orderDetails.setDescription('Online store payment');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.bills.FirstName);
  billTo.setLastName(req.body.bills.LastName);
  billTo.setCompany('ABBI');
  billTo.setAddress(req.body.bills.Address);
  billTo.setCity(req.body.bills.City);
  billTo.setState(req.body.bills.State);
  billTo.setZip(req.body.bills.Zip);
  billTo.setCountry(req.body.bills.Country);
  billTo.setPhoneNumber(req.body.bills.Phone);
  billTo.setEmail(req.body.bills.Email);
  billTo.setFaxNumber(req.body.bills.Fax);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.body.bills.FirstName1);
  shipTo.setLastName(req.body.bills.LastName1);
  shipTo.setAddress(req.body.bills.Address1);
  shipTo.setCity(req.body.bills.City1);
  shipTo.setState(req.body.bills.State1);
  shipTo.setZip(req.body.bills.Zip1);
  shipTo.setCountry(req.body.bills.Country1);

  var customer = new ApiContracts.CustomerDataType();
  customer.setEmail(req.body.bills.Email);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);
  transactionRequestType.setCustomer(customer);
  var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          var date = moment().format('MM-DD-YYYY');
          request.input('MemberNo', sql.Int, req.body.bills.MemberNumber);
          request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(50), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('FirstName', sql.VarChar(250), req.body.bills.FirstName);
          request.input('LastName', sql.VarChar(250), req.body.bills.LastName);
          request.input('Address1', sql.VarChar(250), req.body.bills.Address);
          request.input('City', sql.VarChar(250), req.body.bills.City);
          request.input('State', sql.VarChar(50), req.body.bills.State);
          request.input('ZipCode', sql.VarChar(50), req.body.bills.Zip);
          request.input('Country', sql.VarChar(50), req.body.bills.Country);
          request.input('Email', sql.VarChar(250), req.body.bills.Email);
          request.input('Phone', sql.VarChar(50), req.body.bills.Phone);
          request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
          request.input('tempOnlineMainID', sql.Int(50), null);
          request.input('discountCode', sql.VarChar(100), null);
          request.input('subtotal', sql.Money, amount);
          request.input('shippingCost',sql.Money,shipObj.shipCost);
          request.input('ShippingType', sql.VarChar(250),shipObj.shipType);
          request.execute('_completeonlinestore', function(err, recordsets, returnValue, affected) {
            var paymentid = recordsets.recordset[0].PaymentID;
            if(err){
              // console.log(err)
            }
            else{
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                  pass: 'Abbi@2021'
                }
              });

              var mailOptions = {
                from: 'no-reply',
                to: 'abbi@integrity-tek.com',
                subject: 'Order Successfull - ABBI',
                html:"<html>\n\n<body style=\"background-color:#e2e1e0;font-family: Open Sans, sans-serif;font-size:100%;font-weight:400;line-height:1.4;color:#000;\">\n  <table style=\"max-width:670px;margin:50px auto 10px;background-color:#fff;padding:50px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);-moz-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24); border-top: solid 10px #2C3E50;\">\n    <thead>\n      <tr>\n        <th style=\"text-align:left;\"><img style=\"max-width: 150px;\" src=\"\" alt=\"ABBI\"></th>\n        <th style=\"text-align:right;font-weight:400;\">"+date+"</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td colspan=\"2\" style=\"height:35px;\">\n          <h2 style=\"text-align: center; color: #2C3E50\">American Bucking Bull</h2>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"border: solid 1px #ddd; padding:10px 20px;\">\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:150px\">Order status</span><b style=\"color:green;font-weight:normal;margin:0\">Success</b></p>\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Transaction ID</span> "+paymentid+"</p>\n          <p style=\"font-size:14px;margin:0 0 0 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Order amount</span> $"+req.body.amount.amount+".00</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"height:35px;\"></td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Bill To :</h3>\n          <p>"+req.body.bills.FirstName+" "+req.body.bills.LastName+"</p>\n          <p>"+req.body.bills.Address+"</p>\n          <p>"+req.body.bills.City+","+req.body.bills.State+","+req.body.bills.Zip+"</p>\n          <p>"+req.body.bills.Country+"</p>\n          <p>Phone # : "+req.body.bills.Phone+"</p>\n     <p>Email : "+req.body.Email+"</p>\n   </td>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Ship To :</h3>\n          <p>"+req.body.bills.Address1+"</p>\n          <p>"+req.body.bills.City1+","+req.body.bills.State1+","+req.body.bills.Zip1+"</p>\n          <p>"+req.body.bills.Country+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Items :</h3>\n    <p>"+req.body.product[0].ProductCode+"</p>\n       <p>"+req.body.product[0].Product+"</p>\n          <p>Quantity : "+req.body.product[0].Qty+"</p>\n          <p>Price : $"+req.body.product[0].Price+"</p>\n        </td>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Payment Details :</h3>\n          <p>Store Total : $"+req.body.product[0].Price * req.body.product[0].Qty+"</p>\n          <p>Shipping & Handling : $"+req.body.handling+" (USPS - First-Class Package Service - Retail)</p>\n          <p>Total : $"+req.body.amount.amount+"</p>\n        </td>\n      </tr>\n    </tbody>\n    <tfooter>\n      <tr style=\"background-color: #2C3E50; color: white; padding: 20px;\">\n        <td colspan=\"2\" style=\"font-size:14px;padding:60px 20px 20px 20px;\">\n          <h1>American Bucking Bull</h1>\n          <h3>Contact Info :</h3>\n          <p>101 W. Riverwalk</p>\n          <p>Pueblo, Colorado 81003</p>\n          <p>Phone : (719) 242-2747</p>\n          <p>FAX : (719) 242-2746</p>\n          <p>Email: info@americanbuckingbull.com</p>\n        </td>\n      </tr>\n    </tfooter>\n  </table>\n</body>\n\n</html>"
              };

              transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                } else {
                }
              });
            }
          });
res.send({ msg:'Transaction Successfull'});
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
}  
else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('MemberNo', sql.Int, req.body.bills.MemberNumber);
  request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
  request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
  request.input('CCNumber', sql.VarChar(50), null);
  request.input('CCExpDate', sql.VarChar(50), null);
  request.input('CCSecCode', sql.VarChar(50), null);
  request.input('eChkABACode', sql.VarChar(9), null);
  request.input('eChkAcctNo', sql.VarChar(4), null);
  request.input('eChkAcctType', sql.VarChar(20), null);
  request.input('eChkAcctName', sql.VarChar(50), null);
  request.input('eChkBankName', sql.VarChar(50), null);
  request.input('FirstName', sql.VarChar(250), req.body.bills.FirstName);
  request.input('LastName', sql.VarChar(250), req.body.bills.LastName);
  request.input('Address1', sql.VarChar(250), req.body.bills.Address);
  request.input('City', sql.VarChar(250), req.body.bills.City);
  request.input('State', sql.VarChar(50), req.body.bills.State);
  request.input('ZipCode', sql.VarChar(50), req.body.bills.Zip);
  request.input('Country', sql.VarChar(50), req.body.bills.Country);
  request.input('Email', sql.VarChar(250), req.body.bills.Email);
  request.input('Phone', sql.VarChar(50), req.body.bills.Phone);
  request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
  request.input('tempOnlineMainID', sql.Int(50), req.body.tempid.TempId);
  request.input('discountCode', sql.VarChar(100), null);
  request.input('subtotal', sql.Money, amount);
  request.execute('_completeonlinestore', function(err, recordsets, returnValue, affected) {
    if (err) {
      // console.log(err)
    }
    else{
      res.send({msg: "Successfull"})
    }
  });
}
}
});
}
});
});
//---------------------------print work order-----------------------------------
  sql.connect(config, function(err){
    if(err) console.log(err);
    var request =new sql.Request();
        router.post('/getPrintWoscreendetails', function(req, res) {
      // if(req.session && req.session.user){
        // res.locals.user = req.session.user;
        var wono = req.body.wono;
        var sql = "Select distinct wm.WorkOrderNumber,wm.WorkOrderDate,wm.MemberNumber,(wm.FirstName+' '+wm.LastName) Member,wm.BillingAddress,wm.BillingCity,wm.BillingState,wm.BillingZip,wm.BillingCountry,wm.Email,wm.Phone,wm.ShippingAddress,wm.ShippingCity,wm.ShippingState,wm.ShippingZip,wm.ShippingCountry,wm.ShippingCost,wm.HandlingFeeAmt,wm.HandlingDiscountAmt,wm.Status,wm.TotalPrice,(select u.FirstName+' '+u.LastName from users u where u.UserID=wm.AssignedTo) Assignedto,wm.AssignedBy,wm.PaymentId,('Processed on '+Format(wm.PaymentDate,'MM/dd/yyyy hh:mm:ss tt')) PaymentInfo,wm.PaymentRanBy,Cast(wm.Notes as nvarchar(1000)) Notes from WorkOrderMain wm join WorkOrderLines wl on wm.WorkOrderNumber=wl.WorkOrderNumber join WorkOrderLineItems wli on wl.LineItemId=wli.LineItemId join WorkOrderCategory wc on wc.CategoryId=wli.CategoryId where wm.workordernumber=" + wono +"";
        var sql2 = "Select wc.CategoryId,'Complete' Complete,wc.Category,'Quantity' Quantity,'Price' Price,'Postage' Postage,'SubTotal' SubTotal from WorkOrderMain wm join WorkOrderLines wl on wm.WorkOrderNumber=wl.WorkOrderNumber join WorkOrderLineItems wli on wl.LineItemId=wli.LineItemId join WorkOrderCategory wc on wc.CategoryId=wli.CategoryId where wm.workordernumber=" +wono  +"";
        var sql3 = "Select wc.CategoryId,wl.LineItemComplete,wli.Description,wl.Quantity,Isnull(wli.Price,wl.Price) Price,wl.Postage,((wl.Quantity*Isnull(wli.Price,wl.Price)) + wl.Postage) as subtotal from WorkOrderMain wm join WorkOrderLines wl on wm.WorkOrderNumber=wl.WorkOrderNumber join WorkOrderLineItems wli on wl.LineItemId=wli.LineItemId join WorkOrderCategory wc on wc.CategoryId=wli.CategoryId where wm.workordernumber =" + wono +"";    
        // console.log(sql);
        request.query(sql, function (err, recordset) {
          request.query(sql2, function (err, recordsets) {
            request.query(sql3, function (err, recordsets1) {
              if(err){
                res.sendStatus(500);
              }
              else{
                // console.log(recordset.recordset)
              // console.log(recordsets.recordset)
              // console.log(recordset1.recordset)
              res.send({one : recordset.recordset,two:recordsets.recordset,three:recordsets1.recordset})
            }
          });
          });
        });
    // }
    // else{
    //   req.session.reset();
    //   res.redirect('/');
    // }
  });
  });
//-------------------------------------------------------------Event Payment----------------------------------------------------
router.post('/saveeventpay', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = 0.01;
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription('');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.bills.FirstName);
            billTo.setLastName(req.body.bills.LastName);
            billTo.setAddress(req.body.bills.Address);
            billTo.setCity(req.body.bills.City);
            billTo.setState(req.body.bills.State);
            billTo.setZip(req.body.bills.Zip);
            billTo.setCountry(req.body.bills.Country);

            // var shipTo = new ApiContracts.CustomerAddressType();
            // shipTo.setFirstName(req.body.bills.FirstName1);
            // shipTo.setLastName(req.body.bills.LastName1);
            // shipTo.setAddress(req.body.bills.Address1);
            // shipTo.setCity(req.body.bills.City1);
            // shipTo.setState(req.body.bills.State1);
            // shipTo.setZip(req.body.bills.Zip1);
            // shipTo.setCountry(req.body.bills.Country1);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            // transactionRequestType.setShipTo(shipTo);      
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    var date = moment().format('MM-DD-YYYY');
                    request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
                    request.input('RegNo', sql.Int, req.body.eventiddata[0].RegNo);
                    request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
                    request.input('EventID', sql.Int, req.body.eventiddata[0].EventID);
                    request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
                    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
                    request.input('CCNumber', sql.VarChar(50), card);
                    request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
                    request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
                    request.input('eChkABACode', sql.VarChar(9), null);
                    request.input('eChkAcctNo', sql.VarChar(4), null);
                    request.input('eChkAcctType', sql.VarChar(20), null);
                    request.input('eChkAcctName', sql.VarChar(50), null);
                    request.input('eChkBankName', sql.VarChar(50), null);
                    request.input('subtotal', sql.Money, amount);
                    request.execute('CompletememEventRegistration', function(err, recordsets, returnValue, affected) {
              console.log(recordsets.recordset[0].PaymentID)
              var paymentid = recordsets.recordset[0].PaymentID;
              if(err){
                // console.log(err)
              }
              else{
                var transporter = nodemailer.createTransport({
                  service: 'gmail',
                  auth: {
                    user: 'abbi@integrity-tek.com',
                    pass: 'Abbi@2021'
                  }
                });

                var mailOptions = {
                  from: 'no-reply',
                  to: 'abbi@integrity-tek.com',
                  subject: 'Event Registration - ABBI',
                  html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Event Registration</h1>\n                      <h2>Hi '"+req.session.user[0].MemberName+"'</h2>\n <p>'                     <h2>Your event registration is successful. Please contact office for any queries.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
                };

                transporter.sendMail(mailOptions, function(error, info){
                  if (error) {
                  } else {
                  }
                });
              }
            });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ success: 'Transaction was successful.', paymentid : paymentid, Amount : amount, date : date, paymentType : req.body.pay.Payment });
} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);
  
  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  orderDetails.setDescription('');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.bills.FirstName);
  billTo.setLastName(req.body.bills.LastName);
  billTo.setAddress(req.body.bills.Address);
  billTo.setCity(req.body.bills.City);
  billTo.setState(req.body.bills.State);
  billTo.setZip(req.body.bills.Zip);
  billTo.setCountry(req.body.bills.Country);

  // var shipTo = new ApiContracts.CustomerAddressType();
  // shipTo.setFirstName(req.body.bills.FirstName1);
  // shipTo.setLastName(req.body.bills.LastName1);
  // shipTo.setAddress(req.body.bills.Address1);
  // shipTo.setCity(req.body.bills.City1);
  // shipTo.setState(req.body.bills.State1);
  // shipTo.setZip(req.body.bills.Zip1);
  // shipTo.setCountry(req.body.bills.Country1);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  // transactionRequestType.setShipTo(shipTo);      
  var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          var date = moment().format('MM-DD-YYYY');
          request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
          console.log(req.session.user[0].MemberNumber)
          request.input('RegNo', sql.Int, req.body.eventiddata[0].RegNo);
          console.log(req.body.eventiddata[0].RegNo)
          request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
          console.log(req.body.pay.Payment)
          request.input('EventID', sql.Int, req.body.eventiddata[0].EventID);
          console.log(req.body.eventiddata[0].EventID)
          request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
          console.log(req.session.user[0].sessionID)
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          console.log(req.body.pay.Payment)
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(50), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          console.log(req.body.pay.aba)
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          console.log(req.body.pay.acno)
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          console.log(req.body.pay.actype)
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          console.log(req.body.pay.acname)
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          console.log(req.body.pay.bank)
          request.input('subtotal', sql.Money, amount);
          request.execute('CompletememEventRegistration', function(err, recordsets, returnValue, affected) {
            var paymentid = recordsets.recordset[0].PaymentID;
            console.log("----------------------------------------"+paymentid)
            res.send({ success:'Transaction Successfull', paymentid : paymentid, Amount : amount, date : date, paymentType : req.body.pay.Payment });
            if(err){
              // console.log(err)
            }
            else{
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                  pass: 'Abbi@2021'
                }
              });

              var mailOptions = {
                from: 'no-reply',
                to: 'abbi@integrity-tek.com',
                subject: 'Event Registration - ABBI',
                html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Event Registration</h1>\n                      <h2>Hi '"+req.session.user[0].MemberName+"'</h2>\n <p>'                     <h2>Your event registration is successful. Please contact office for any queries.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
              };

              transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                } else {
                }
              });
            }
          });
}  
else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('MemberNo', sql.Int, req.session.user[0].MemberNumber);
  request.input('RegNo', sql.Int, req.body.eventiddata[0].RegNo);
  request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
  request.input('EventID', sql.Int, req.body.eventiddata[0].EventID);
  request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
  request.input('CCType', sql.VarChar(50), );
  request.input('CCNumber', sql.VarChar(50), card);
  request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
  request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
  request.input('eChkABACode', sql.VarChar(9), null);
  request.input('eChkAcctNo', sql.VarChar(4), null);
  request.input('eChkAcctType', sql.VarChar(20), null);
  request.input('eChkAcctName', sql.VarChar(50), null);
  request.input('eChkBankName', sql.VarChar(50), null);
  request.input('subtotal', sql.Money, amount);
  request.execute('CompletememEventRegistration', function(err, recordsets, returnValue, affected) {
    if (err) {
      // console.log(err)
    }
    else{
      res.send({msg: "Successfull"})
    }
  });
}
}
});
}
});
});
//-------------------------------------------------------------Show Cart----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/showcartproducts', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select * from tempcart where MEMBERNO="+req.session.user[0].MemberNumber+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//-------------------------------------------------------------Show Cart Count----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/showcartcount', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "select * from tempcart where MEMBERNO="+req.session.user[0].MemberNumber+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//-------------------------------------------------------------Update Cart----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updatecart', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "Update tempcart Set Qty="+req.body.Qty+",TotalPrice="+req.body.Qty * req.body.Price+" where MEMBERNO="+req.session.user[0].MemberNumber+" AND ProductID="+req.body.ProductID+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//-------------------------------------------------------------Remove from Cart----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/removefromcart', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "delete from tempcart where MEMBERNO="+req.session.user[0].MemberNumber+" AND ProductID="+req.body.ProductID+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//-------------------------------------------------------------Information Events----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/eventinformation', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "SELECT Event, BeginDate, EndDate, Location, OpenDate, CloseDate, Description, Category, EntryFee, OneParentPenalty, TwoParentPenalty, OnlineEntry, EntryNote, ScheduledPayments FROM Events WHERE (EventID = "+req.body.EventID+")";
        var sql1 = "Select  case when paymentclosedate = (select min(paymentclosedate) from events_paymentschedule where eventid = "+req.body.EventID+"  ) then 'Initial Payment' when FinalEventPayment = 1 then 'Event Entry Payment' when NominationPayment = 1 then 'Nomination Payment' else 'Sustaining Payment' end as Description, * from events_paymentSchedule where eventid = "+req.body.EventID+"  order by PaymentCloseDate"
        request.query(sql, function (err, recordset) {
          request.query(sql1, function(err,recordset1){
            if (err){
              res.sendStatus(500);
            }
            else {
            // console.log({data : recordset.recordset, table : recordset1.recordset})
            res.send({data : recordset.recordset, table : recordset1.recordset});
          }
        });
        });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
// -------------------------------------------------------------Membership type Dropdown----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/membertypedata', function(req, res) {
      var sql = "SELECT MembershipPriceID, Description, Price,ROUND((Price*0.02),2)AS Handling FROM MembershipPrice WHERE (MembershipYear = year(getdate())) AND (NewMembership = 1) and AdminOnly = 0";
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Membership type Dropdown Renew----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/membertypedata1', function(req, res) {
      var sql = "SELECT MembershipPriceID, Type, Description, Price,(Price*0.02) Handling FROM MembershipPrice WHERE (MembershipYear =YEAR(GETDATE())) AND (NewMembership = 1) and AdminOnly = 0 AND Type<>'JUNIOR'";
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Check Username----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkusername', function(req, res) {
      var sql = "SELECT COUNT(ID) AS MemberCount FROM Members WHERE UserName = '"+req.body.uname+"'";
      // console.log(sql);
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//---------------------------------------------------------------Image upload--------------------------------
var storage = multer.diskStorage({
  destination: 'public/images/members',
  filename: function (req, file, cb) {
    cb(null, file.originalname.replace(path.extname(file.originalname) + path.extname(file.originalname)))
  }
})
var upload = multer({ storage: storage })
// -------------------------------------------------------------Signup----------------------------------------------------
router.post('/saveprofiledata',upload.single('file'), function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    var amount = req.body.amount;
    var cvv = req.body.cvv;
    var cc = req.body.cc;
    var expire = req.body.expire
    console.log(req.body,"poyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy")
    request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
      if(err){
        console.log(err);
      }
      else{
        var invoice = recordsets2.recordset[0].Invoice
        if(req.body.Payment=='VI' || req.body.Payment=='MC' || req.body.Payment=='AMEX' || req.body.Payment=='Discover'){
          var card = req.body.cc;
          var cvv = req.body.cvv;
          var expire = req.body.expire;
          var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
          merchantAuthenticationType.setName(process.env.loginId);
          merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

          var creditCard = new ApiContracts.CreditCardType();
          creditCard.setCardNumber(card);
          creditCard.setExpirationDate(expire);
          creditCard.setCardCode(cvv);

          var paymentType = new ApiContracts.PaymentType();
          paymentType.setCreditCard(creditCard);

          var orderDetails = new ApiContracts.OrderType();
          orderDetails.setInvoiceNumber(invoice);
          orderDetails.setDescription('New member registration');

          var billTo = new ApiContracts.CustomerAddressType();
          billTo.setFirstName(req.body.fname);
        billTo.setLastName(req.body.lname);
        billTo.setCompany('ABBI');
        billTo.setAddress(req.body.txtaddress1);
        billTo.setCity(req.body.txtcity1);
        billTo.setState(req.body.txtstate1);
        billTo.setZip(req.body.zip1);
        billTo.setCountry(req.body.ccode1);
        billTo.setPhoneNumber(req.body.mobile);
        billTo.setEmail(req.body.email);
        billTo.setFaxNumber(req.body.fax);

          var shipTo = new ApiContracts.CustomerAddressType();
          shipTo.setFirstName(req.body.fname);
        shipTo.setLastName(req.body.lname);
        shipTo.setAddress(req.body.txtaddress);
        shipTo.setCity(req.body.txtcity);
        shipTo.setState(req.body.txtstate);
        shipTo.setZip(req.body.zip);
        shipTo.setCountry(req.body.ccode);

        var customer = new ApiContracts.CustomerDataType();
        customer.setEmail(req.body.email);

          var transactionRequestType = new ApiContracts.TransactionRequestType();
          transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
          transactionRequestType.setPayment(paymentType);
          transactionRequestType.setAmount(amount);
          transactionRequestType.setBillTo(billTo);
          transactionRequestType.setOrder(orderDetails);
          transactionRequestType.setShipTo(shipTo);
          transactionRequestType.setCustomer(customer);      
          var createRequest = new ApiContracts.CreateTransactionRequest();
          createRequest.setMerchantAuthentication(merchantAuthenticationType);
          createRequest.setTransactionRequest(transactionRequestType);

          var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
          ctrl.setEnvironment(SDKConstants.endpoint.production);
          ctrl.execute(() => {
            var apiResponse = ctrl.getResponse();
            var response = new ApiContracts.CreateTransactionResponse(apiResponse);

            if(response !== null) {
              if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                if(response.getTransactionResponse().getMessages() !== null) {
                 var date = moment().format('MM-DD-YYYY')
                var datetime = moment().format('MM-DD-YYYY hh:mm:ss')
                request.input('FirstName', sql.VarChar(250), req.body.fname);
                request.input('LastName', sql.VarChar(250), req.body.lname);
                request.input('Birthdate', sql.DateTime, req.body.dob);
                request.input('Ranch', sql.VarChar(250), req.body.ranch);
                request.input('username', sql.VarChar(250), req.body.uname);
                request.input('password', sql.VarChar(250), req.body.passwd);
                request.input('CAddress', sql.VarChar(250), req.body.txtaddress);
                request.input('CCity', sql.VarChar(250), req.body.txtcity);
                request.input('CState', sql.VarChar(50), req.body.txtstate);
                request.input('CZipCode', sql.VarChar(50), req.body.zip);
                request.input('CCountry', sql.VarChar(50), req.body.ccode);
                request.input('BAddress', sql.VarChar(250), req.body.txtaddress1);
                request.input('BCity', sql.VarChar(250), req.body.txtcity1);
                request.input('BState', sql.VarChar(50), req.body.txtstate1);
                request.input('BZipCode', sql.VarChar(50), req.body.zip1);
                request.input('BCountry', sql.VarChar(50), req.body.ccode1);
                request.input('Email', sql.VarChar(250), req.body.email);
                request.input('Phone', sql.VarChar(50), req.body.mobile);
                request.input('fax', sql.VarChar(50), req.body.fax);
                request.input('Usda', sql.VarChar(12), req.body.mobile);
                request.input('Notes', sql.VarChar(255), null);
                request.input('membershipID', sql.VarChar(250), req.body.type);
                request.input('PymtType', sql.VarChar(20), req.body.Payment);
                request.input('CCType', sql.VarChar(50), req.body.Payment);
                request.input('CCNumber', sql.VarChar(50), cc);
                request.input('CCExpDate', sql.VarChar(50), expire);
                request.input('CCSecCode', sql.VarChar(50), cvv);
                request.input('eChkABACode', sql.VarChar(9), null);
                request.input('eChkAcctNo', sql.VarChar(4), null);
                request.input('eChkAcctType', sql.VarChar(20), null);
                request.input('eChkAcctName', sql.VarChar(50), null);
                request.input('eChkBankName', sql.VarChar(50), null);
                request.input('subtotal', sql.Int, null);
                request.input('SessionId', sql.VarChar(100), null);
                request.execute('completememregistration', function(err, recordsets, returnValue, affected) {
                                    var PaymentId = recordsets.recordset[0].PaymentId;
                                    var Type = recordsets.recordset[0].Type;
                                    if(err){
                                    }
                                    else{
                                      var sql = "UPDATE members SET Picture='"+req.file.originalname+"',picstatus=1 WHERE UserName='"+req.body.uname+"'";
                                      request.query(sql, function (err, recordsets) {
                                        if (err) {
                                        }
                                        else {
                                        }
                                      });
                                      var transporter = nodemailer.createTransport({
                                        service: 'gmail',
                                        auth: {
                                          user: 'abbi@integrity-tek.com',
                                          pass: 'Abbi@2021'
                                        }
                                      });
                  
                                      var mailOptions = {
                                        from: 'abbi@integrity-tek.com',
                                        to: 'abbi@integrity-tek.com',
                                        subject: 'Registration Successfull - ABBI',
                                        html:"<html>\n\n<body style=\"background-color:#e2e1e0;font-family: Open Sans, sans-serif;font-size:100%;font-weight:400;line-height:1.4;color:#000;\">\n  <table style=\"max-width:670px;margin:50px auto 10px;background-color:#fff;padding:50px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);-moz-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24); border-top: solid 10px #2C3E50;\">\n    <thead>\n      <tr>\n        <th style=\"text-align:left;\"><img style=\"max-width: 150px;\" src=\"\" alt=\"ABBI\"></th>\n        <th style=\"text-align:right;font-weight:400;\">"+date+"</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td colspan=\"2\" style=\"height:35px;\">\n          <h2 style=\"text-align: center; color: #2C3E50\">American Bucking Bull</h2>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"border: solid 1px #ddd; padding:10px 20px;\">\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:150px\">Account status</span><b style=\"color:green;font-weight:normal;margin:0\">Registered Successfully</b></p>\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Transaction ID</span> "+PaymentId+"</p>\n          <p style=\"font-size:14px;margin:0 0 0 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Order amount</span> $"+amount+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"height:35px;\"></td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">General Information</h3>\n          <p>Merchant : American Bucking Bull, Inc</p>\n          <p>Date/Time : "+datetime+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Member Information :</h3>\n          <p>Member Name :</p>\n          "+req.body.fname+" "+req.body.lname+"<p>Membership type : "+Type+"</p>\n          <p>Address : "+req.body.txtaddress+"</p>\n          <p>City : "+req.body.txtcity+"</p>\n          <p>State : "+req.body.txtstate+"</p>\n          <p>Zip Code : "+req.body.zip+"</p>\n          <p>Country : "+req.body.ccode+"</p>\n          <p>Phone : "+req.body.mobile+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Login Credentials :</h3>\n          <p>Username : "+req.body.uname+"</p>\n          <p>Password : "+req.body.passwd+"</p>\n        </td>\n      </tr>\n    </tbody>\n    <tfooter>\n      <tr style=\"background-color: #2C3E50; color: white; padding: 20px;\">\n        <td colspan=\"2\" style=\"font-size:14px;padding:60px 20px 20px 20px;\">\n          <h1>American Bucking Bull</h1>\n          <h3>Contact Info :</h3>\n          <p>101 W. Riverwalk</p>\n          <p>Pueblo, Colorado 81003</p>\n          <p>Phone : (719) 242-2747</p>\n          <p>FAX : (719) 242-2746</p>\n          <p>Email: info@americanbuckingbull.com</p>\n        </td>\n      </tr>\n    </tfooter>\n  </table>\n</body>\n\n</html>"
                                      };
                  
                                      transporter.sendMail(mailOptions, function(error, info){
                                        if (error) {
                                        } else {
                                        }
                                      });
                                    }
                                  });
                  // console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
                  res.send({ msg: 'Transaction was successful.' });
                  } else {
                    if(response.getTransactionResponse().getErrors() !== null) {
                      let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                      let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                      res.send({ msg: `${code}: ${text}`
                    });
                    } else {
                      // console.log({ msg: 'Transaction failed.' })
                      res.send({ msg: 'Transaction failed.' });
                    }
                  }    
                  } else {
                    if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
                      let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                      let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                      // console.log({ msg: `${code}: ${text}`})
                      res.send({ msg: `${code}: ${text}`});
                    } else {
                      let code = response.getMessages().getMessage()[0].getCode();
                      let text = response.getMessages().getMessage()[0].getText();
                      // console.log({ msg: `${code}: ${text}`})
                      res.send({ msg: `${code}: ${text}`});
                    }   
                  }    
                  
                  } else {
                    // console.log({msg : 'No response'})
                    res.send({ msg: 'No response.' });
                  }
                  });
}
else if(req.body.Payment=='eCheck'){
// console.log(req.body.pay.Payment)
var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
merchantAuthenticationType.setName(process.env.loginId);
merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

var bankAccountType = new ApiContracts.BankAccountType();
bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
bankAccountType.setRoutingNumber(req.body.aba);
//added code
var bankAccountNum = req.body.acno;
bankAccountType.setAccountNumber(bankAccountNum.toString());
bankAccountType.setNameOnAccount(req.body.acname);

var paymentType = new ApiContracts.PaymentType();
paymentType.setBankAccount(bankAccountType);

var orderDetails = new ApiContracts.OrderType();
orderDetails.setInvoiceNumber(invoice);
orderDetails.setDescription('New member registration');

var billTo = new ApiContracts.CustomerAddressType();
billTo.setFirstName(req.body.fname);
billTo.setLastName(req.body.lname);
billTo.setCompany('ABBI');
billTo.setAddress(req.body.txtaddress1);
billTo.setCity(req.body.txtcity1);
billTo.setState(req.body.txtstate1);
billTo.setZip(req.body.zip1);
billTo.setCountry(req.body.ccode1);
billTo.setPhoneNumber(req.body.mobile);
billTo.setEmail(req.body.email);
billTo.setFaxNumber(req.body.fax);

var shipTo = new ApiContracts.CustomerAddressType();
shipTo.setFirstName(req.body.fname);
shipTo.setLastName(req.body.lname);
shipTo.setAddress(req.body.txtaddress);
shipTo.setCity(req.body.txtcity);
shipTo.setState(req.body.txtstate);
shipTo.setZip(req.body.zip);
shipTo.setCountry(req.body.ccode);

var customer = new ApiContracts.CustomerDataType();
customer.setEmail(req.body.email);

var transactionRequestType = new ApiContracts.TransactionRequestType();
transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
transactionRequestType.setPayment(paymentType);
transactionRequestType.setAmount(amount);
transactionRequestType.setBillTo(billTo);
transactionRequestType.setOrder(orderDetails);
transactionRequestType.setShipTo(shipTo); 
transactionRequestType.setCustomer(customer);     
var createRequest = new ApiContracts.CreateTransactionRequest();
createRequest.setMerchantAuthentication(merchantAuthenticationType);
createRequest.setTransactionRequest(transactionRequestType);

var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
ctrl.setEnvironment(SDKConstants.endpoint.production);
ctrl.execute(function(){

  var apiResponse = ctrl.getResponse();

  var response = new ApiContracts.CreateTransactionResponse(apiResponse);

  if(response != null){
    if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
      if(response.getTransactionResponse().getMessages() != null){
        var date = moment().format('MM-DD-YYYY')
        var datetime = moment().format('MM-DD-YYYY hh:mm:ss')
        request.input('FirstName', sql.VarChar(250), req.body.fname);
        request.input('LastName', sql.VarChar(250), req.body.lname);
        request.input('Birthdate', sql.DateTime, req.body.dob);
        request.input('Ranch', sql.VarChar(250), req.body.ranch);
        request.input('username', sql.VarChar(250), req.body.uname);
        request.input('password', sql.VarChar(250), req.body.passwd);
        request.input('CAddress', sql.VarChar(250), req.body.txtaddress);
        request.input('CCity', sql.VarChar(250), req.body.txtcity);
        request.input('CState', sql.VarChar(50), req.body.txtstate);
        request.input('CZipCode', sql.VarChar(50), req.body.zip);
        request.input('CCountry', sql.VarChar(50), req.body.ccode);
        request.input('BAddress', sql.VarChar(250), req.body.txtaddress1);
        request.input('BCity', sql.VarChar(250), req.body.txtcity1);
        request.input('BState', sql.VarChar(50), req.body.txtstate1);
        request.input('BZipCode', sql.VarChar(50), req.body.zip1);
        request.input('BCountry', sql.VarChar(50), req.body.ccode1);
        request.input('Email', sql.VarChar(250), req.body.email);
        request.input('Phone', sql.VarChar(50), req.body.mobile);
        request.input('fax', sql.VarChar(50), req.body.fax);
        request.input('Usda', sql.VarChar(12), req.body.mobile);
        request.input('Notes', sql.VarChar(255), null);
        request.input('membershipID', sql.VarChar(250), req.body.type);
        request.input('PymtType', sql.VarChar(20), req.body.Payment);
        request.input('CCType', sql.VarChar(50), req.body.Payment);
        request.input('CCNumber', sql.VarChar(50), cc);
        request.input('CCExpDate', sql.VarChar(50), expire);
        request.input('CCSecCode', sql.VarChar(50), cvv);
        request.input('eChkABACode', sql.VarChar(9), req.body.abaa);
        request.input('eChkAcctNo', sql.VarChar(4), req.body.acno);
        request.input('eChkAcctType', sql.VarChar(20), req.body.actype);
        request.input('eChkAcctName', sql.VarChar(50), req.body.acname);
        request.input('eChkBankName', sql.VarChar(50), req.body.bank);
        request.input('subtotal', sql.Int, null);
        request.input('SessionId', sql.VarChar(100), null);
        request.execute('completememregistration', function(err, recordsets, returnValue, affected) {
          var PaymentId = recordsets.recordset[0].PaymentId;
          var Type = recordsets.recordset[0].Type;
          if(err){
          }
          else{
            var sql = "UPDATE members SET Picture='"+req.file.originalname+"',picstatus=1 WHERE UserName='"+req.body.uname+"'";
            request.query(sql, function (err, recordsets) {
              if (err) {
              }
              else {
              }
            });
            var transporter = nodemailer.createTransport({
              service: 'gmail',
              auth: {
                user: 'abbi@integrity-tek.com',
                pass: 'Abbi@2021'
              }
            });

            var mailOptions = {
              from: 'no-reply',
              to: 'abbi@integrity-tek.com',
              subject: 'Registration Successfull - ABBI',
              html:"<html>\n\n<body style=\"background-color:#e2e1e0;font-family: Open Sans, sans-serif;font-size:100%;font-weight:400;line-height:1.4;color:#000;\">\n  <table style=\"max-width:670px;margin:50px auto 10px;background-color:#fff;padding:50px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);-moz-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24); border-top: solid 10px #2C3E50;\">\n    <thead>\n      <tr>\n        <th style=\"text-align:left;\"><img style=\"max-width: 150px;\" src=\"\" alt=\"ABBI\"></th>\n        <th style=\"text-align:right;font-weight:400;\">"+date+"</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td colspan=\"2\" style=\"height:35px;\">\n          <h2 style=\"text-align: center; color: #2C3E50\">American Bucking Bull</h2>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"border: solid 1px #ddd; padding:10px 20px;\">\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:150px\">Account status</span><b style=\"color:green;font-weight:normal;margin:0\">Registered Successfully</b></p>\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Transaction ID</span> "+PaymentId+"</p>\n          <p style=\"font-size:14px;margin:0 0 0 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Order amount</span> $"+amount+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"height:35px;\"></td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">General Information</h3>\n          <p>Merchant : American Bucking Bull, Inc</p>\n          <p>Date/Time : "+datetime+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Member Information :</h3>\n          <p>Member Name :</p>\n          "+req.body.fname+" "+req.body.lname+"<p>Membership type : "+Type+"</p>\n          <p>Address : "+req.body.txtaddress+"</p>\n          <p>City : "+req.body.txtcity+"</p>\n          <p>State : "+req.body.txtstate+"</p>\n          <p>Zip Code : "+req.body.zip+"</p>\n          <p>Country : "+req.body.ccode+"</p>\n          <p>Phone : "+req.body.mobile+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Login Credentials :</h3>\n          <p>Username : "+req.body.uname+"</p>\n          <p>Password : "+req.body.passwd+"</p>\n        </td>\n      </tr>\n    </tbody>\n    <tfooter>\n      <tr style=\"background-color: #2C3E50; color: white; padding: 20px;\">\n        <td colspan=\"2\" style=\"font-size:14px;padding:60px 20px 20px 20px;\">\n          <h1>American Bucking Bull</h1>\n          <h3>Contact Info :</h3>\n          <p>101 W. Riverwalk</p>\n          <p>Pueblo, Colorado 81003</p>\n          <p>Phone : (719) 242-2747</p>\n          <p>FAX : (719) 242-2746</p>\n          <p>Email: info@americanbuckingbull.com</p>\n        </td>\n      </tr>\n    </tfooter>\n  </table>\n</body>\n\n</html>"
            };

            transporter.sendMail(mailOptions, function(error, info){
              if (error) {
              } else {
              }
            });
          }
        });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
} else {
if(response.getTransactionResponse().getErrors() !== null) {
let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
res.send({ msg: `${code}: ${text}`
});
} else {
// console.log({ msg: 'Transaction failed.' })
res.send({ msg: 'Transaction failed.' });
}
}    
} else {
if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
// console.log({ msg: `${code}: ${text}`})
res.send({ msg: `${code}: ${text}`});
} else {
let code = response.getMessages().getMessage()[0].getCode();
let text = response.getMessages().getMessage()[0].getText();
// console.log({ msg: `${code}: ${text}`})
res.send({ msg: `${code}: ${text}`});
}   
}    

} else {
// console.log({msg : 'No response'})
res.send({ msg: 'No response.' });
}

});
}
//         var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
//         merchantAuthenticationType.setName(process.env.loginId);
//         merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

//         var creditCard = new ApiContracts.CreditCardType();
//         creditCard.setCardNumber(cc);
//         creditCard.setExpirationDate(expire);
//         creditCard.setCardCode(cvv);

//         var paymentType = new ApiContracts.PaymentType();
//         paymentType.setCreditCard(creditCard);

//         var orderDetails = new ApiContracts.OrderType();
//         orderDetails.setInvoiceNumber(invoice);
//         orderDetails.setDescription('New member registration');

//         var billTo = new ApiContracts.CustomerAddressType();
//         billTo.setFirstName(req.body.fname);
//         billTo.setLastName(req.body.lname);
//         billTo.setCompany('ABBI');
//         billTo.setAddress(req.body.txtaddress1);
//         billTo.setCity(req.body.txtcity1);
//         billTo.setState(req.body.txtstate1);
//         billTo.setZip(req.body.zip1);
//         billTo.setCountry(req.body.ccode1);
//         billTo.setPhoneNumber(req.body.mobile);
//         billTo.setEmail(req.body.email);
//         billTo.setFaxNumber(req.body.fax);

//         var shipTo = new ApiContracts.CustomerAddressType();
//         shipTo.setFirstName(req.body.fname);
//         shipTo.setLastName(req.body.lname);
//         shipTo.setAddress(req.body.txtaddress);
//         shipTo.setCity(req.body.txtcity);
//         shipTo.setState(req.body.txtstate);
//         shipTo.setZip(req.body.zip);
//         shipTo.setCountry(req.body.ccode);

//         var transactionRequestType = new ApiContracts.TransactionRequestType();
//         transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
//         transactionRequestType.setPayment(paymentType);
//         transactionRequestType.setAmount(amount);
//         transactionRequestType.setBillTo(billTo);
//         transactionRequestType.setOrder(orderDetails);
//         transactionRequestType.setShipTo(shipTo);      var createRequest = new ApiContracts.CreateTransactionRequest();
//         createRequest.setMerchantAuthentication(merchantAuthenticationType);
//         createRequest.setTransactionRequest(transactionRequestType);

//         var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
//         ctrl.setEnvironment(SDKConstants.endpoint.production);
//         ctrl.execute(() => {
//           var apiResponse = ctrl.getResponse();
//           var response = new ApiContracts.CreateTransactionResponse(apiResponse);

//           if(response !== null) {
//             if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
//               if(response.getTransactionResponse().getMessages() !== null) {
//                 var date = moment().format('MM-DD-YYYY')
//                 var datetime = moment().format('MM-DD-YYYY hh:mm:ss')
//                 request.input('FirstName', sql.VarChar(250), req.body.fname);
//                 request.input('LastName', sql.VarChar(250), req.body.lname);
//                 request.input('Birthdate', sql.DateTime, req.body.dob);
//                 request.input('Ranch', sql.VarChar(250), req.body.ranch);
//                 request.input('username', sql.VarChar(250), req.body.uname);
//                 request.input('password', sql.VarChar(250), req.body.passwd);
//                 request.input('CAddress', sql.VarChar(250), req.body.txtaddress);
//                 request.input('CCity', sql.VarChar(250), req.body.txtcity);
//                 request.input('CState', sql.VarChar(50), req.body.txtstate);
//                 request.input('CZipCode', sql.VarChar(50), req.body.zip);
//                 request.input('CCountry', sql.VarChar(50), req.body.ccode);
//                 request.input('BAddress', sql.VarChar(250), req.body.txtaddress1);
//                 request.input('BCity', sql.VarChar(250), req.body.txtcity1);
//                 request.input('BState', sql.VarChar(50), req.body.txtstate1);
//                 request.input('BZipCode', sql.VarChar(50), req.body.zip1);
//                 request.input('BCountry', sql.VarChar(50), req.body.ccode1);
//                 request.input('Email', sql.VarChar(250), req.body.email);
//                 request.input('Phone', sql.VarChar(50), req.body.mobile);
//                 request.input('fax', sql.VarChar(50), req.body.fax);
//                 request.input('Usda', sql.VarChar(12), req.body.mobile);
//                 request.input('Notes', sql.VarChar(255), null);
//                 request.input('membershipID', sql.VarChar(250), req.body.type);
//                 request.input('PymtType', sql.VarChar(20), 'VI');
//                 request.input('CCType', sql.VarChar(50), 'VI');
//                 request.input('CCNumber', sql.VarChar(50), cc);
//                 request.input('CCExpDate', sql.VarChar(50), expire);
//                 request.input('CCSecCode', sql.VarChar(50), cvv);
//                 request.input('eChkABACode', sql.VarChar(9), null);
//                 request.input('eChkAcctNo', sql.VarChar(4), null);
//                 request.input('eChkAcctType', sql.VarChar(20), null);
//                 request.input('eChkAcctName', sql.VarChar(50), null);
//                 request.input('eChkBankName', sql.VarChar(50), null);
//                 request.input('subtotal', sql.Int, null);
//                 request.input('SessionId', sql.VarChar(100), null);
//                 request.execute('completememregistration', function(err, recordsets, returnValue, affected) {
//                   var PaymentId = recordsets.recordset[0].PaymentId;
//                   var Type = recordsets.recordset[0].Type;
//                   if(err){
//                   }
//                   else{
//                     var sql = "UPDATE members SET Picture='"+req.file.originalname+"',picstatus=1 WHERE UserName='"+req.body.uname+"'";
//                     request.query(sql, function (err, recordsets) {
//                       if (err) {
//                       }
//                       else {
//                       }
//                     });
//                     var transporter = nodemailer.createTransport({
//                       service: 'gmail',
//                       auth: {
//                         user: 'abbi@integrity-tek.com',
//                         pass: 'Abbi@2021'
//                       }
//                     });

//                     var mailOptions = {
//                       from: 'no-reply',
//                       to: 'abbi@integrity-tek.com',
//                       subject: 'Registration Successfull - ABBI',
//                     };

//                     transporter.sendMail(mailOptions, function(error, info){
//                       if (error) {
//                       } else {
//                       }
//                     });
//                   }
//                 });
// // console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
// res.send({ msg: 'Transaction was successful.' });
// } else {
//   if(response.getTransactionResponse().getErrors() !== null) {
//     let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
//     let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
//     res.send({ msg: `${code}: ${text}`
//   });
//   } else {
//     // console.log({ msg: 'Transaction failed.' })
//     res.send({ msg: 'Transaction failed.' });
//   }
// }    
// } else {
//   if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
//     let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
//     let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
//     // console.log({ msg: `${code}: ${text}`})
//     res.send({ msg: `${code}: ${text}`});
//   } else {
//     let code = response.getMessages().getMessage()[0].getCode();
//     let text = response.getMessages().getMessage()[0].getText();
//     // console.log({ msg: `${code}: ${text}`})
//     res.send({ msg: `${code}: ${text}`});
//   }   
// }    

// } else {
//   // console.log({msg : 'No response'})
//   res.send({ msg: 'No response.' });
// }
// });
}
});
});
});
// -------------------------------------------------------------Renewal----------------------------------------------------
router.post('/membershiprenewal', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
      // create Request object
      var request = new sql.Request();
      var cvv = req.body.pay.cvv;
      var cc = req.body.pay.cc;
      var expire = req.body.pay.expire;
      var amount =req.body.amount.amount;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
          merchantAuthenticationType.setName(process.env.loginId);
          merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

          var creditCard = new ApiContracts.CreditCardType();
          creditCard.setCardNumber(cc);
          creditCard.setExpirationDate(expire);
          creditCard.setCardCode(cvv);

          var paymentType = new ApiContracts.PaymentType();
          paymentType.setCreditCard(creditCard);

          var orderDetails = new ApiContracts.OrderType();
          orderDetails.setInvoiceNumber(invoice);
          orderDetails.setDescription('Membership Renewal');

          var billTo = new ApiContracts.CustomerAddressType();
          billTo.setFirstName(req.body.renew.FirstName);
          billTo.setLastName(req.body.renew.LastName);
          billTo.setAddress(req.body.renew.Address);
          billTo.setCity(req.body.renew.City);
          billTo.setState(req.body.renew.State);
          billTo.setZip(req.body.renew.Zip);
          billTo.setCountry(req.body.renew.Country);
          billTo.setPhoneNumber(req.body.renew.Phone);

          var shipTo = new ApiContracts.CustomerAddressType();
          shipTo.setFirstName(req.body.renew.FirstName);
          shipTo.setLastName(req.body.renew.LastName);
          shipTo.setAddress(req.body.renew.Address);
          shipTo.setCity(req.body.renew.City);
          shipTo.setState(req.body.renew.State);
          shipTo.setZip(req.body.renew.Zip);
          shipTo.setCountry(req.body.renew.Country);

          var customer = new ApiContracts.CustomerDataType();
          customer.setEmail(req.body.renew.Email);

          var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
          ctrl.setEnvironment(SDKConstants.endpoint.production);
          ctrl.execute(() => {
            var apiResponse = ctrl.getResponse();
            var response = new ApiContracts.CreateTransactionResponse(apiResponse);

            if(response !== null) {
              if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                if(response.getTransactionResponse().getMessages() !== null) {
                  var date = moment().format('MM-DD-YYYY')
                  var datetime = moment().format('MM-DD-YYYY hh:mm:ss')
              // console.log(req.body)
              request.input('MemberNo', sql.INT(250), req.body.renew.MemberNumber);
              request.input('FirstName', sql.VarChar(250), req.body.renew.FirstName);
              request.input('LastName', sql.VarChar(5),req.body.renew.LastName);
              request.input('BAddress', sql.VarChar(250), req.body.renew.Address);
              request.input('BAddress2', sql.VarChar(250), req.body.renew.Address1);
              request.input('BCity', sql.VarChar(50), req.body.renew.City);
              request.input('BState', sql.VarChar(50), req.body.renew.State);
              request.input('BZipCode', sql.VarChar(50), req.body.renew.Zip);
              request.input('BCountry', sql.VarChar(250), req.body.renew.Country);
              request.input('Email', sql.VarChar(50), req.body.renew.Email);
              request.input('Phone', sql.VarChar(50), req.body.renew.Phone);
              request.input('membershipID', sql.Int(20), req.body.renew.type);
              request.input('PymtType', sql.VarChar(50), 'VI');
              request.input('CCType', sql.VarChar(50), 'VI');
              request.input('CCNumber', sql.VarChar(50), req.body.pay.cc);
              request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
              request.input('CCSecCode', sql.VarChar(9), req.body.pay.cvv);
              request.input('eChkABACode', sql.VarChar(4), null);
              request.input('eChkAcctNo', sql.VarChar(20), null);
              request.input('eChkAcctType', sql.VarChar(50), null);
              request.input('eChkAcctName', sql.VarChar(50), null);
              request.input('eChkBankName', sql.VarChar(50), null);
              request.input('SessionId', sql.VarChar(100), req.body.renew.sessionID);
              request.execute('completememshiprenewal', function(err, recordsets, returnValue, affected) {
                // console.log(recordsets.recordset[0].PaymentId)
                // console.log(recordsets.recordset[0].Type)
                var PaymentId = recordsets.recordset[0].PaymentId;
                var Type = recordsets.recordset[0].Type;
                if(err){
                  // console.log(err)
                }
                else{
                  var transporter = nodemailer.createTransport({
                    service: 'gmail',
                    auth: {
                      user: 'abbi@integrity-tek.com',
                      pass: 'Abbi@2021'
                    }
                  });

                  var mailOptions = {
                    from: 'no-reply',
                    to: 'abbi@integrity-tek.com',
                    subject: 'Membership Renewal - ABBI',
                    html:"<html>\n\n<body style=\"background-color:#e2e1e0;font-family: Open Sans, sans-serif;font-size:100%;font-weight:400;line-height:1.4;color:#000;\">\n  <table style=\"max-width:670px;margin:50px auto 10px;background-color:#fff;padding:50px;-webkit-border-radius:3px;-moz-border-radius:3px;border-radius:3px;-webkit-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);-moz-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24);box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 2px rgba(0,0,0,.24); border-top: solid 10px #2C3E50;\">\n    <thead>\n      <tr>\n        <th style=\"text-align:left;\"><img style=\"max-width: 150px;\" src=\"\" alt=\"ABBI\"></th>\n        <th style=\"text-align:right;font-weight:400;\">"+date+"</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td colspan=\"2\" style=\"height:35px;\">\n          <h2 style=\"text-align: center; color: #2C3E50\">American Bucking Bull</h2>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"border: solid 1px #ddd; padding:10px 20px;\">\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:150px\">Account status</span><b style=\"color:green;font-weight:normal;margin:0\">Membership Renewal</b></p>\n          <p style=\"font-size:14px;margin:0 0 6px 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Transaction ID</span> "+PaymentId+"</p>\n          <p style=\"font-size:14px;margin:0 0 0 0;\"><span style=\"font-weight:bold;display:inline-block;min-width:146px\">Order amount</span> $"+amount+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"height:35px;\"></td>\n      </tr>\n      <tr>\n        <td colspan=\"2\" style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">General Information</h3>\n          <p>Merchant : American Bucking Bull, Inc</p>\n          <p>Date/Time : "+datetime+"</p>\n        </td>\n      </tr>\n      <tr>\n        <td style=\"width:50%;padding:20px;vertical-align:top\">\n          <h3 style=\"color: #2C3E50\">Member Information :</h3>\n          <p>Member Name :</p>\n          "+req.body.renew.FirstName+" "+req.body.renew.LastName+"<p>Membership type : "+Type+"</p>\n          <p>Address : "+req.body.renew.Address+"</p>\n          <p>City : "+req.body.renew.City+"</p>\n          <p>State : "+req.body.renew.State+"</p>\n          <p>Zip Code : "+req.body.renew.Zip+"</p>\n          <p>Country : "+req.body.renew.Country+"</p>\n          <p>Phone : "+req.body.renew.Phone+"</p>\n        </td>\n      </tr>\n         </tbody>\n    <tfooter>\n      <tr style=\"background-color: #2C3E50; color: white; padding: 20px;\">\n        <td colspan=\"2\" style=\"font-size:14px;padding:60px 20px 20px 20px;\">\n          <h1>American Bucking Bull</h1>\n          <h3>Contact Info :</h3>\n          <p>101 W. Riverwalk</p>\n          <p>Pueblo, Colorado 81003</p>\n          <p>Phone : (719) 242-2747</p>\n          <p>FAX : (719) 242-2746</p>\n          <p>Email: info@americanbuckingbull.com</p>\n        </td>\n      </tr>\n    </tfooter>\n  </table>\n</body>\n\n</html>"
                  };

                  transporter.sendMail(mailOptions, function(error, info){
                    if (error) {
                  // console.log(error);
                } else {
                  // console.log(info)
                }
              });
                }
              });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ success: 'Transaction was successful.'});
} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
});
});
});
//--------------------------------------------------------------------Check Email----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/CheckEmailData', function(req, res) {
      var sql = "SELECT COUNT(ID) AS MemberCount FROM Members WHERE Email = '"+req.body.email+"'";
      // console.log(sql);
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//--------------------------------------------------------------------Send Email Forgot Password-----------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/sendforgotemail', function(req, res) {
      // console.log(req.body)
      var sql = "SELECT username,password FROM Members WHERE Email = '"+req.body.email+"'";
      // console.log(sql);
      request.query(sql, function (err, recordsets) {
        if(recordsets.recordset.length!=0){
          // console.log(recordsets.recordset)
          var uname = recordsets.recordset[0].username;
          var pwd = recordsets.recordset[0].password;
          var transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: 'abbi@integrity-tek.com',
              pass: 'Abbi@2021'
            }
          });

          var mailOptions = {
            from: 'no-reply',
            to: 'abbi@integrity-tek.com',
            subject: 'Password Recovery - ABBI',
            html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Password Recovery</h1>\n                      <h2>Hi "+uname+"</h2>\n                      <h2>You Password is : "+pwd+"</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://210.212.210.92:2021/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
          };

          transporter.sendMail(mailOptions, function(error, info){
            if (error) {
              // console.log(error);
            } else {
              res.send({message : "Email Sent Successfully"});
            }
          });
        }
        else{
          res.send({message : "Email Not Found"});
        }
      });
});
});
//-------------------------------------------------------------Sign In----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/signin', function(req, res) {
      var sql = "select * from members where username='"+req.body.username+"' and password='"+req.body.password+"' and inactive<>1";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        // console.log(recordset.recordset)
      // console.log(recordset.recordset.length >= 1)
      if (recordset.recordset.length <= 0) {
        res.sendStatus(500);
      }
      else if(recordset.recordset.length >= 1){
        delete recordset.recordset[0].password
        req.session.user = recordset.recordset;
        // console.log(req.session.user)
        var duedate = req.session.user[0].DueDate;
            // console.log(moment().isAfter(duedate))
            var date = moment().isAfter(duedate);
            if(req.session.user[0].Type != 'Lifetime' || req.session.user[0].Type != 'Veterinarian'){
              if(date == true){
                res.send('renew');
              }
              else{
                res.send('home');
              }
            }
          }
        });
    });
  });
//---------------------------------------------------------------Update Session Id------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updatesessionid', function(req, res) {
      var sessionID = randomstring.generate(15);
      var sql1 = "update members set sessionID='"+sessionID+"' where UserName='"+req.body.username+"'";
      // console.log(sql1)
      request.query(sql1, function (err, recordset) {
        if (err) {
          // console.log(err)
        }
        else{
          // console.log(sql);
        }
      });
    });
  });
//========================================================Admin Panel=====================================================
//========================================================================================================================
//========================================================================================================================
// -------------------------------------------------------Main Page--------------------------------------------------------
router.post('/mainpagedata', function(req, res) {
 if(req.session && req.session.admin){
  res.locals.admin = req.session.admin;
  console.log(req.body,'ppp')
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('AssignedTo', sql.Int, req.session.admin[0].UserID);
    request.input('Page', sql.Int, req.body.page + 1);
    request.input('RecsPerPage', sql.Int, req.body.pageSize);
    request.input('Search',sql.VarChar(100), req.body.search)
    request.execute('_WorkOrders_Listnew', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        console.log(recordsets.recordset,'res')
        res.send(recordsets.recordset);
      }
    });
  });
}
});
// -------------------------------------------------------Member List--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/memberdata', function(req, res) {
      var sql = "SELECT m.MemberNumber,lastname+','+m.FirstName AS MemberName,m.RanchName FROM Members m ORDER BY MemberName";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset)
  }
});
    });
  });
// -------------------------------------------------------Animals--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/animals/:id', function(req, res) {
      // console.log(req.params.id)
      var sql = "select (Case When Exists(select 1 from Registration where RegNo="+req.params.id+") then 'Valid' else 'Not Valid' end) as  Status";
      // console.log("1st sql",sql);
      request.query(sql, function (err, recordsets) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log("1st output",recordsets.recordset)
          if(recordsets.recordset[0].Status=="Not Valid"){
            res.send({"Status":"Not Valid"});
          }
          else{
            var sql2="SELECT RegNo,sire,dam,privateherd,animal,eartag,birthdate,typeservice,memberno FROM Registration WHERE RegNo ="+req.params.id+"";
            // console.log("2nd query", sql2)
            var sql3="SELECT b.regno as sregno, b.privateherd as sbno, b.animal as sbname,c.regno as dregno, c.privateherd as dbno, c.animal as dbname,d.regno as ssregno, d.privateherd as ssbno, d.animal as ssbname,e.regno as sdregno, e.privateherd as sdbno, e.animal as sdbname,f.regno as dsregno, f.privateherd as dsbno, f.animal as dsbname,g.regno as ddregno, g.privateherd as ddbno, g.animal as ddbname FROM Registration a LEFT JOIN Registration b ON a.sire = b.regno LEFT JOIN Registration c ON a.dam = c.regno LEFT JOIN Registration d ON b.sire = d.regno LEFT JOIN Registration e ON b.dam = e.regno LEFT JOIN Registration f ON c.sire = f.regno LEFT JOIN Registration g ON c.dam = g.regno WHERE a.regno = "+req.params.id+""
            // console.log("3rd query", sql3)
            request.query(sql2, function (err, recordsets2) {
              request.query(sql3, function (err, recordsets3) {
                res.send({"Status":"Valid","animal":recordsets2.recordset,"parentage":recordsets3.recordset})
              });
            });
          }
        }
      });
    });
  });
// -------------------------------------------------------Ranch List--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/ranchdata', function(req, res) {
      var sql = "SELECT DISTINCT RanchName FROM Members Order By RanchName ASC";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset)
  }
});
    });
  });
// -------------------------------------------------------Search Animal--------------------------------------------------------
router.post('/searchanimaldata', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    // console.log(req.body,'editanimal');
    var obj = req.body.searchanimallist;
    removeUndefinedProps(obj)
    request.input('memberNo', sql.VarChar(100), req.body.searchanimallist.member);
    request.input('RanchName', sql.VarChar(500), req.body.searchanimallist.RanchName);
    request.input('Status', sql.VarChar(500), req.body.searchanimallist.Status);
    request.input('Page', sql.Int, req.body.page + 1);
    request.input('RecsPerPage', sql.Int, req.body.pageSize);
    request.input('Search', sql.VarChar(500), req.body.search)
    request.execute('_AnimalListing2', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Search Full Animal--------------------------------------------------------
router.post('/searchfullanimaldata', function(req, res) {
  // console.log(req.body,'poooooooooooooooooo',(req.body.page) + 1)
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    // console.log(obj);
    request.input('MemberNumber', sql.VarChar(100), req.body.animallist.MemberName);
    request.input('MemberNumber2', sql.Int, req.body.animallist.MemberNumber);
    request.input('RegNo', sql.VarChar(255), req.body.animallist.RegNo);
    request.input('Animal', sql.VarChar(255), req.body.animallist.AnimalName);
    request.input('TypeService', sql.VarChar(255), req.body.animallist.Sex);
    request.input('PrivateHerd', sql.VarChar(255), req.body.animallist.Herd);
    request.input('Birthdate', sql.DateTime, req.body.animallist.Birthdate);
    request.input('BirthYear', sql.Int, req.body.animallist.Birthyear);
    request.input('DNA', sql.VarChar(255), req.body.animallist.DNA);
    request.input('Description', sql.VarChar(255), req.body.animallist.Description);
    request.input('Horns', sql.VarChar(5), null);
    request.input('Notes', sql.VarChar(255), null);
    request.input('EID', sql.VarChar(50), req.body.animallist.EID);
    request.input('Misc', sql.VarChar(255), req.body.animallist.MISC);
    request.input('OriginalBreeder', sql.VarChar(255), req.body.animallist.Breeder);
    request.input('DNAd', sql.Bit, req.body.animallist.DNAD);
    request.input('Verified', sql.VarChar(20), req.body.animallist.Verified);
    request.input('Status', sql.VarChar(255), req.body.animallist.Status);
    request.input('Sendtodna', sql.Bit, 0);
    request.input('Submitted', sql.VarChar(255), null);
    request.input('Dateregistered', sql.DateTime, req.body.animallist.RegisteredDate);
    request.input('LastUpdated', sql.DateTime, null);
    request.input('UpdatedBy', sql.VarChar(255), null);
    request.input('Page',sql.Int, req.body.page)
    request.input('RecsPerPage',sql.Int,req.body.pageSize)
    request.input('Search', req.body.search)
    request.execute('_SearchAnimalsTest3', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
  }
});
// -------------------------------------------------------Search Edit Member--------------------------------------------------------
router.post('/searcheditmembersdata', function(req, res) {
  // console.log(moment(req.body.jdate).format('MM/DD/YYYY'))
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    // console.log(req.body);
    request.input('FirstName', sql.VarChar(255), req.body.fname);
    request.input('LastName', sql.VarChar(255), req.body.lname);
    request.input('MemberNumber', sql.Int, req.body.memberno);
    request.input('RanchName', sql.VarChar(255), req.body.ranch);
    request.input('Address', sql.VarChar(255), req.body.address);
    request.input('City', sql.VarChar(255), req.body.city);
    request.input('State', sql.VarChar(255), req.body.state);
    request.input('Zip', sql.VarChar(255), req.body.zip);
    request.input('Country', sql.VarChar(255), req.body.country);
    request.input('Phone', sql.VarChar(255), req.body.phone);
    request.input('AltPhone', sql.VarChar(255), req.body.altphone);
    request.input('JoinDate', sql.DateTime, req.body.jdate);
    request.input('DueDate', sql.DateTime, req.body.ddate);
    request.input('PaidDate', sql.DateTime, req.body.pdate);
    request.input('Email', sql.VarChar(255), req.body.email);
    request.input('Type', sql.VarChar(255), req.body.type);    
    request.input('Notes', sql.VarChar(255), req.body.notes);
    request.input('Updated', sql.DateTime, req.body.udate);
    request.input('Inactive', sql.Int, req.body.active);
    request.input('Updatedby', sql.VarChar(50), req.body.lastupdated);
    request.input('Office', sql.VarChar(50), req.body.office);
    request.input('Fax', sql.VarChar(50), req.body.fax);
    request.execute('_SearchMember', function(err, recordsets, returnValue, affected) {
      request.execute('_searchpartners', function(err, recordsets6, returnValue, affected) {  
        request.input('Iteminv', sql.Int, 1)
        request.execute('_MemberSelectInsertUpdate1', function(err, recordsets1, returnValue, affected) {
          request.input('Itempre', sql.Int, 1)
          request.execute('_MemberSelectInsertUpdate1', function(err, recordsets2, returnValue, affected) {
            request.input('Itemprt', sql.Int, 1)
            request.execute('_MemberSelectInsertUpdate1', function(err, recordsets3, returnValue, affected) {
              request.input('Itememail', sql.Int, 1)
              request.execute('_MemberSelectInsertUpdate1', function(err, recordsets4, returnValue, affected) {
                request.input('ItemFailedtest', sql.Int, 1)
                request.execute('_MemberSelectInsertUpdate1', function(err, recordsets5, returnValue, affected) {
                  request.input('itemdeceased', sql.Int, 1)
                  request.execute('_MemberSelectInsertUpdate1', function(err, recordsets8, returnValue, affected) {
                    if(err){
                      // console.log(err)
                      res.send(err);
                    }
                    else{
                      // console.log(recordsets8.recordset)
                      res.send({a:recordsets.recordset,b:recordsets1.recordset,c:recordsets2.recordset,d:recordsets3.recordset,e:recordsets4.recordset,f:recordsets5.recordset,g:recordsets6.recordset,h:recordsets8.recordset});
                    }
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
// -------------------------------------------------------Search Edit Member--------------------------------------------------------
router.post('/searcheditmembersdata1', function(req, res) {
  // console.log(moment(req.body.jdate).format('MM/DD/YYYY'))
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    // console.log(req.body);
    request.input('FirstName', sql.VarChar(255), null);
    request.input('LastName', sql.VarChar(255), null);
    request.input('MemberNumber', sql.Int, req.body.MemberNumber);
    request.input('RanchName', sql.VarChar(255), null);
    request.input('Address', sql.VarChar(255), null);
    request.input('City', sql.VarChar(255), null);
    request.input('State', sql.VarChar(255), null);
    request.input('Zip', sql.VarChar(255), null);
    request.input('Country', sql.VarChar(255), null);
    request.input('Phone', sql.VarChar(255), null);
    request.input('AltPhone', sql.VarChar(255), null);
    request.input('JoinDate', sql.DateTime, null);
    request.input('DueDate', sql.DateTime, null);
    request.input('PaidDate', sql.DateTime, null);
    request.input('Email', sql.VarChar(255), null);
    request.input('Type', sql.VarChar(255), null);    
    request.input('Notes', sql.VarChar(255), null);
    request.input('Updated', sql.DateTime, null);
    request.input('Inactive', sql.Int, null);
    request.input('Updatedby', sql.VarChar(50), null);
    request.input('Office', sql.VarChar(50), null);
    request.input('Fax', sql.VarChar(50), null);
    request.execute('_SearchMember', function(err, recordsets, returnValue, affected) {
      request.execute('_searchpartners', function(err, recordsets6, returnValue, affected) {  
        request.input('Iteminv', sql.Int, 1)
        request.execute('_MemberSelectInsertUpdate1', function(err, recordsets1, returnValue, affected) {
          request.input('Itempre', sql.Int, 1)
          request.execute('_MemberSelectInsertUpdate1', function(err, recordsets2, returnValue, affected) {
            request.input('Itemprt', sql.Int, 1)
            request.execute('_MemberSelectInsertUpdate1', function(err, recordsets3, returnValue, affected) {
              request.input('Itememail', sql.Int, 1)
              request.execute('_MemberSelectInsertUpdate1', function(err, recordsets4, returnValue, affected) {
                request.input('ItemFailedtest', sql.Int, 1)
                request.execute('_MemberSelectInsertUpdate1', function(err, recordsets5, returnValue, affected) {
                  if(err){
                  // console.log(err)
                  res.send(err);
                }
                else{
                  // console.log(recordsets.recordset.length)
                  res.send({a:recordsets.recordset,b:recordsets1.recordset,c:recordsets2.recordset,d:recordsets3.recordset,e:recordsets4.recordset,f:recordsets5.recordset,g:recordsets6.recordset});
                }
              });
              });
            });
          });
        });
      });
    });
  });
});
// -------------------------------------------------------Search Update Member--------------------------------------------------------
router.post('/searchupdatemembersdata', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    // console.log(obj);
    request.input('FirstName', sql.VarChar(255), req.body.FirstName);
    request.input('LastName', sql.VarChar(255), req.body.LastName);
    request.input('MemberNumber', sql.Int, req.body.MemberNumber);
    request.input('RanchName', sql.VarChar(255), req.body.RanchName);
    request.input('Address', sql.VarChar(255), req.body.Address);
    request.input('City', sql.VarChar(255), req.body.City);
    request.input('State', sql.VarChar(255), req.body.State);
    request.input('Zip', sql.VarChar(255), req.body.Zip);
    request.input('Country', sql.VarChar(255), req.body.Country);
    request.input('Phone', sql.VarChar(255), req.body.Phone);
    request.input('AltPhone', sql.VarChar(255), req.body.AltPhone);
    request.input('Type', sql.VarChar(255), req.body.Type);
    request.input('JoinDate', sql.DateTime, req.body.JoinDate);
    request.input('DueDate', sql.DateTime, req.body.DueDate);
    request.input('PaidDate', sql.DateTime, req.body.PaidDate);
    request.input('Email', sql.VarChar(255), req.body.Email);  
    request.input('Notes', sql.VarChar(255), req.body.Notes);
    request.input('Updated', sql.DateTime, null);
    request.input('Updatedby', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('Office', sql.VarChar(50), req.body.Office);
    request.input('Fax', sql.VarChar(50), req.body.Fax);
    request.input('UserName', sql.VarChar(500), req.body.UserName);
    request.input('Password', sql.VarChar(500), req.body.Password);
    request.input('Itemupd', sql.Int, 1)
    request.execute('_MemberSelectInsertUpdate1', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        res.sendStatus(200);
      }
    });
  });
}
});
// -------------------------------------------------------Remove Partners--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/removepartners', function(req, res) {
      // console.log(req.body)
      var sql = "Delete From Members_Partners WHERE ContactID = "+req.body.ContactID+"";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.sendStatus(200)
  }
});
    });
  });
//-------------------------------------------------------------Active Member Admin--------------------------------------------------------
router.post('/activememberdata', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('type', sql.VarChar(255), req.body.type);
    request.input('inactive', sql.Int, req.body.inactive);
    request.execute('_MemberListing', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Member Inactive--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/memberinactive', function(req, res) {
      // console.log(req.body)
      var sql = "UPDATE Members SET Inactive = 1 WHERE MemberNumber = "+req.body.MemberNumber+"";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.sendStatus(200)
  }
});
    });
  });
// ------------------------------------------------Add Member-----------------------------------------------------------
router.post('/addmemberdata', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    request.input('FirstName', sql.VarChar(255), req.body.fname);
    request.input('LastName', sql.VarChar(255), req.body.lname);
    request.input('MemberNumber', sql.Int, null);
    request.input('RanchName', sql.VarChar(255), req.body.ranch);
    request.input('Address', sql.VarChar(255), req.body.address);
    request.input('City', sql.VarChar(255), req.body.city);
    request.input('State', sql.VarChar(255), req.body.state);
    request.input('Zip', sql.VarChar(255), req.body.zip);
    request.input('Country', sql.VarChar(255), req.body.country);
    request.input('Phone', sql.VarChar(255), req.body.phone);
    request.input('AltPhone', sql.VarChar(255), req.body.altphone);
    request.input('Type', sql.VarChar(255), req.body.type);
    request.input('JoinDate', sql.DateTime, req.body.jdate);
    request.input('DueDate', sql.DateTime, req.body.ddate);
    request.input('PaidDate', sql.DateTime, req.body.pdate);
    request.input('Email', sql.VarChar(255), req.body.email);  
    request.input('Notes', sql.VarChar(255), req.body.note);
    request.input('Updated', sql.DateTime, req.body.udate);
    request.input('Updatedby', sql.VarChar(50), req.body.Updatedby);
    request.input('Office', sql.VarChar(50), req.body.office);
    request.input('Fax', sql.VarChar(50), req.body.fax);
    request.input('UserName', sql.VarChar(500), null);
    request.input('Password', sql.VarChar(500), null);
    request.input('Birthdate', sql.DateTime, req.body.bdate);
    request.input('Website', sql.VarChar(500), req.body.website);
    request.input('PremiseID', sql.VarChar(500), req.body.pin);
    request.input('Inactive', sql.VarChar(500), req.body.active);
    request.input('AlternateAccount', sql.VarChar(500), req.body.alternate);
    request.input('Itemins', sql.Int, 1)
    request.execute('_MemberSelectInsertUpdate1', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        if(req.body.active == 1){
          var transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: 'abbi@integrity-tek.com',
              pass: 'Abbi@2021'
            }
          });

          var mailOptions = {
            from: 'no-reply',
            to: 'abbi@integrity-tek.com',
            subject: 'Activate Your Account',
            text: "Dear "+req.body.fname+", Your Account is Inactive. Please contact office",
          };
          transporter.sendMail(mailOptions, function(error, info){
            if (error) {
              // console.log(error);
            } else {
              // console.log('Email sent: ' + info.response);
            }
          });
        }
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Assigned Members Dropdown WO-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/assignedtodata', function(req, res) {
      // console.log(req.body)
      var sql = "select userid, FirstName + ' ' + LastName as UserName from users where securityLevel > 0 order by lastname";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordset.recordset)
          res.send(recordset.recordset)
        }
      });
    });
  });
// -------------------------------------------------------Contains Dropdown-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/containdata', function(req, res) {
      // console.log(req.body)
      var sql = "select CategoryId,Category from WorkOrderCategory";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
          res.send(recordset.recordset)
        }
      });
    });
  });
//-----------------------------------------------------------------Work order list------------------------------------------------------
router.post('/searchworkdata1', function(req, res) {
  // console.log(moment(req.body.sdate).format('MM/DD/YYYY'))
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    console.log( req.body,' req.body')
    var request = new sql.Request();
    request.input('status', sql.VarChar(50), 'open');
    request.input('Page', sql.Int, req.body.page + 1);
    request.input('RecsPerPage', sql.Int, req.body.pageSize);
    request.input('Search',req.body.search)
    request.execute('_WorkOrders_Listnew', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});

//-------------------------------------------------------------Search Work Order--------------------------------------------------------
router.post('/searchworkdata', function(req, res) {
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body;
  removeUndefinedProps(obj)
  // console.log(moment(req.body.sdate).format('MM/DD/YYYY'))
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('WorkOrderNumber', sql.Int, req.body.number);
    request.input('AssignedTo', sql.Int, req.body.assignedto);
    request.input('MemberNumber', sql.VarChar(100), req.body.member);
    request.input('status', sql.VarChar(50), req.body.status);
    request.input('StartDate', sql.DateTime, req.body.sdate);
    request.input('EndDate', sql.DateTime, req.body.edate);
    request.input('Contains', sql.VarChar(20), req.body.contains);
    request.execute('_WorkOrders_Listnew', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Edit Work Order-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editworkorder', function(req, res) {
      if(req.session && req.session.admin){
        res.locals.admin = req.session.admin;
        // console.log(req.body)
        if(req.body.status == 'Open' || req.body.status == 'Open - Problem'){
        // console.log(req.body.status+'if')
        var sql = "SELECT '"+req.body.Categories+"' as category, WM.*,M.Type,m.DueDate, (ISNULL(wm.TotalPrice,0)) AS TotalPriceAmt,ISNULL(ShippingCost,0) AS ShippingAmt,ISNULL(HandlingFeeAmt,0) AS HandlingAmt, ISNULL(HandlingDiscountAmt,0) AS HandlingDiscAmt,(case when exists(select 1 from users where users.UserID=wm.AssignedTo) then wm.AssignedTo else 0 end) as  Assignto,(case when not exists(select 1 from MembershipPrice Where MembershipYear=year(getdate()) and Type=m.Type and wm.Status like 'open%') then isnull(wm.MembershipRenewalPrice,0) else (Select price from MembershipPrice where MembershipYear=year(getdate()) and Type=m.Type ) end) as MRP,Isnull(wm.MembershipUpgradePrice,0) as MUP FROM WorkOrderMain WM join Members M on WM.MemberNumber=M.MemberNumber WHERE WorkOrderNumber ="+req.body.WorkOrderNumber+"";
        // console.log(sql)
        var sql1 = "Select (case when li.Description like'DNA%' then 8 else li.Categoryid end) as Categoryid,(case when li.Description like'DNA%' then 'DNA kits' else Replace(c.Category+'('+isnull(c.Note,'')+')','()','') end) as Header,li.LineItemId, li.Description,isnull(l.Price, li.price) as Price,   li.StoreItem, isnull(l.Postage, li.ItemPostage) as ItemPostage, li.ItemPostageType, NewBreederOnly,l.LineId, l.Quantity, l.postage, ((l.Price * l.Quantity) + l.postage)  as SubTotal, l.LineItemComplete, i.weight from WorkOrderLineItems li join WorkOrderCategory c on li.categoryid = c.categoryid left join WorkOrderLines l on li.lineitemid = l.lineitemid and l.workordernumber = "+req.body.WorkOrderNumber+" left join Inventory_Store i on li.storeitem = i.productid Where PricingYear = (Select year(WorkOrderDate) from WorkOrderMain where WorkOrderNumber="+req.body.WorkOrderNumber+") order by c.SortOrder, li.ItemSortOrder"
        var sql2 = "Select (case when li.Description like'DNA%' then 8 else li.Categoryid end) as Categoryid,(case when li.Description like'DNA%' then 'DNA kits' else Replace(c.Category+'('+isnull(c.Note,'')+')','()','') end) as Header from WorkOrderLineItems li join WorkOrderCategory c on li.categoryid = c.categoryid left join WorkOrderLines l on li.lineitemid = l.lineitemid and l.workordernumber = "+req.body.WorkOrderNumber+" left join Inventory_Store i on li.storeitem = i.productid Where PricingYear = (Select year(WorkOrderDate) from WorkOrderMain where WorkOrderNumber="+req.body.WorkOrderNumber+") order by c.SortOrder, li.ItemSortOrder"
        request.query(sql, function (err, recordset) {
          request.query(sql1, function (err, recordsets) {
            request.query(sql2, function (err, recordsets1) {
              if(err){
                res.sendStatus(500);
              }
              else{
                // console.log(recordset.recordset)
              // console.log(recordsets.recordset)
              // console.log(recordset1.recordset)
              res.send({details : recordset.recordset, table : recordsets.recordset, id : req.session.admin[0].UserID, fname : req.session.admin[0].FirstName, lname : req.session.admin[0].LastName,headings : recordsets1.recordset})
            }
          });
          });
        });
      }
      else{
        // console.log(req.body.status+'else')
        var sql = "SELECT '"+req.body.Categories+"' as category, WM.*,M.Type,m.DueDate, (ISNULL(wm.TotalPrice,0)+ISNULL(wm.HandlingFeeAmt,0)-ISNULL(wm.HandlingDiscountAmt,0)+ISNULL(wm.ShippingCost,0)) AS TotalPriceAmt, ISNULL(ShippingCost,0) AS ShippingAmt,ISNULL(HandlingFeeAmt,0) AS HandlingAmt, ISNULL(HandlingDiscountAmt,0) AS HandlingDiscAmt,(case when exists(select 1 from users where users.UserID=wm.AssignedTo) then wm.AssignedTo else 0 end) as  Assignto,isnull(wm.MembershipRenewalPrice,0) as MRP,Isnull(wm.MembershipUpgradePrice,0) as MUP FROM WorkOrderMain WM join Members M on WM.MemberNumber=M.MemberNumber WHERE WorkOrderNumber = "+req.body.WorkOrderNumber+"";
        // console.log(sql)
        var sql1 = "Select (case when li.Description like'DNA%' then 8 else li.Categoryid end) as Categoryid,(case when li.Description like'DNA%' then 'DNA kits' else Replace(c.Category+'('+isnull(c.Note,'')+')','()','') end) as Header,  li.LineItemId, li.Description, LineId, isnull(l.Price, li.price) as Price,li.StoreItem,isnull(l.Postage, li.ItemPostage) as ItemPostage,  li.ItemPostageType, NewBreederOnly,l.LineId, l.Quantity, l.postage,(l.Price * l.Quantity) + isnull(l.Postage,0) as SubTotal, l.LineItemComplete, null as weight from WorkOrderLineItems li join WorkOrderCategory c on li.categoryid = c.categoryid join WorkOrderLines l on li.lineitemid = l.lineitemid Where l.workordernumber = "+req.body.WorkOrderNumber+" order by c.SortOrder, li.ItemSortOrder"
        var sql2 = "Select (case when li.Description like'DNA%' then 8 else li.Categoryid end) as Categoryid,(case when li.Description like'DNA%' then 'DNA kits' else Replace(c.Category+'('+isnull(c.Note,'')+')','()','') end) as Header from  WorkOrderLineItems li join WorkOrderCategory c on li.categoryid = c.categoryid join WorkOrderLines l on li.lineitemid = l.lineitemid Where l.workordernumber = "+req.body.WorkOrderNumber+" order by c.SortOrder, li.ItemSortOrder"
        request.query(sql, function (err, recordset) {
          request.query(sql1, function (err, recordsets) {
            request.query(sql2, function (err, recordsets1) {  

              if(err){
                res.sendStatus(500);
              }
              else{
            // console.log(recordset.recordset)
            res.send({details : recordset.recordset, table : recordsets.recordset, id : req.session.admin[0].UserID, fname : req.session.admin[0].FirstName, lname : req.session.admin[0].LastName,headings : recordsets1.recordset})
          }
        });
          });
        });  
      }
    }
  });
});
// ------------------------------------------------Update Work Order-----------------------------------------------------------
router.post('/updateworkorder1', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      function removeUndefinedProps(obj) {
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
            delete obj[prop];
          }
        }
        return obj;
      }
      var obj = req.body;
      removeUndefinedProps(obj)
    // console.log(obj);
    // console.log(req.body)
    // console.log(req.body.WorkOrderNumber);
    request.input('WorkOrderNumber', sql.Int, req.body.WorkOrderNumber);
    request.input('WorkOrderDate', sql.DateTime, req.body.WorkOrderDate);
    request.input('MemberNumber', sql.Int, req.body.MemberNumber);
    request.input('Notes', sql.VarChar(250), req.body.Notes);
    request.input('TotalPrice', sql.Decimal(8,2), req.body.TotalPriceAmt);
    request.input('HandlingFee', sql.Decimal(8,2), req.body.HandlingAmt);
    request.input('HandlingDiscount', sql.Decimal(8,2), req.body.HandlingDiscountAmt);
    request.input('ShippingCost', sql.Decimal(8,2), req.body.ShippingAmt);
    request.input('ShippingType', sql.VarChar(250), req.body.ShippingType);
    request.input('MembershipRenewalPrice', sql.Decimal(8,2), req.body.MembershipRenewalPrice);
    request.input('MembershipUpgradePrice', sql.Decimal(8,2), req.body.MembershipUpgradePrice);
    request.input('MembershipUpgradeType', sql.VarChar(50), req.body.MembershipUpgradeType);
    request.input('FirstName', sql.VarChar(250), req.body.FirstName);
    request.input('LastName', sql.VarChar(250), req.body.LastName);
    request.input('Email', sql.VarChar(250), req.body.Email);
    request.input('Phone', sql.VarChar(50), req.body.Phone);  
    request.input('BillingAddress', sql.VarChar(250), req.body.BillingAddress);
    request.input('BillingCity', sql.VarChar(250), req.body.BillingCity);
    request.input('BillingState', sql.VarChar(50), req.body.BillingState);
    request.input('BillingZip', sql.VarChar(50), req.body.BillingZip);
    request.input('BillingCountry', sql.VarChar(50), req.body.BillingCountry);
    request.input('ShippingFirstName', sql.VarChar(250), req.body.ShippingFirstName);
    request.input('ShippingLastName', sql.VarChar(250), req.body.ShippingLastName);
    request.input('ShippingAddress', sql.VarChar(250), req.body.ShippingAddress);
    request.input('ShippingCity', sql.VarChar(250), req.body.ShippingCity);
    request.input('ShippingState', sql.VarChar(50), req.body.ShippingState);
    request.input('ShippingZip', sql.VarChar(50), req.body.ShippingZip);
    request.input('ShippingCountry', sql.VarChar(50), req.body.ShippingCountry);
    request.input('AssignedTo', sql.Int, req.body.AssignedTo)
    request.input('AssignedBy', sql.VarChar(255), req.body.AssignedBy);
    request.input('Status', sql.VarChar(50), req.body.Status);
    request.input('Name', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
    request.execute('_Updateworkorder', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err);
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets);
        res.sendStatus(200);
      }
    });
  }
});
});
// ------------------------------------------------Update Work Order-----------------------------------------------------------
router.post('/updateworkorder3', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    // var amount = 0.01;
    var amount=req.body.ework.TotalPriceAmt;
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            // console.log(invoice)
            orderDetails.setDescription('');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.ework.FirstName);
            billTo.setLastName(req.body.ework.LastName);
            billTo.setCompany('');
            billTo.setAddress(req.body.ework.BillingAddress);
            billTo.setCity(req.body.ework.BillingCity);
            billTo.setState(req.body.ework.BillingState);
            billTo.setZip(req.body.ework.BillingZip);
            billTo.setCountry(req.body.ework.BillingCountry);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.ework.ShippingFirstName);
            shipTo.setLastName(req.body.ework.ShippingLastName);
            shipTo.setCompany('');
            shipTo.setAddress(req.body.ework.ShippingAddress);
            shipTo.setCity(req.body.ework.ShippingCity);
            shipTo.setState(req.body.ework.ShippingState);
            shipTo.setZip(req.body.ework.ShippingZip);
            shipTo.setCountry(req.body.ework.ShippingCountry);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.ework.Email);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);
            transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(() => {
        var apiResponse = ctrl.getResponse();
        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

        if(response !== null) {
          if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
            if(response.getTransactionResponse().getMessages() !== null) {
              request.input('WorkOrderNumber', sql.Int, req.body.ework.WorkOrderNumber);
              request.input('WorkOrderDate', sql.DateTime, req.body.ework.WorkOrderDate);
              request.input('MemberNumber', sql.Int, req.body.ework.MemberNumber);
              request.input('Notes', sql.VarChar(250), req.body.ework.Notes);
              request.input('TotalPrice', sql.Money, amount);
              request.input('HandlingFee', sql.Money, req.body.ework.HandlingAmt);
              request.input('HandlingDiscount', sql.Money, req.body.ework.HandlingDiscountAmt);
              request.input('ShippingCost', sql.Money, req.body.ework.ShippingAmt);
              request.input('ShippingType', sql.VarChar(250), req.body.ework.ShippingType);
              request.input('MembershipRenewalPrice', sql.Money, req.body.ework.MembershipRenewalPrice);
              request.input('MembershipUpgradePrice', sql.Money, req.body.ework.MembershipUpgradePrice);
              request.input('MembershipUpgradeType', sql.VarChar(50), req.body.ework.MembershipUpgradeType);
              request.input('FirstName', sql.VarChar(250), req.body.ework.FirstName);
              request.input('LastName', sql.VarChar(250), req.body.ework.LastName);
              request.input('Email', sql.VarChar(250), req.body.ework.Email);
              request.input('Phone', sql.VarChar(50), req.body.ework.Phone);  
              request.input('BillingAddress', sql.VarChar(250), req.body.ework.BillingAddress);
              request.input('BillingCity', sql.VarChar(250), req.body.ework.BillingCity);
              request.input('BillingState', sql.VarChar(50), req.body.ework.BillingState);
              request.input('BillingZip', sql.VarChar(50), req.body.ework.BillingZip);
              request.input('BillingCountry', sql.VarChar(50), req.body.ework.BillingCountry);
              request.input('ShippingFirstName', sql.VarChar(250), req.body.ework.ShippingFirstName);
              request.input('ShippingLastName', sql.VarChar(250), req.body.ework.ShippingLastName);
              request.input('ShippingAddress', sql.VarChar(250), req.body.ework.ShippingAddress);
              request.input('ShippingCity', sql.VarChar(250), req.body.ework.ShippingCity);
              request.input('ShippingState', sql.VarChar(50), req.body.ework.ShippingState);
              request.input('ShippingZip', sql.VarChar(50), req.body.ework.ShippingZip);
              request.input('ShippingCountry', sql.VarChar(50), req.body.ework.ShippingCountry);
              request.input('AssignedTo', sql.Int, req.body.ework.AssignedTo)
              request.input('paycomp', sql.Int, 1)
              request.input('AssignedBy', sql.VarChar(255), req.body.ework.AssignedBy);
              request.input('Status', sql.VarChar(50), req.body.ework.Status);
              request.input('PymtType', sql.VarChar(50), req.body.pay.Payment);
              request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
              request.input('CCNumber', sql.VarChar(50), req.body.pay.cc);
              request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
              request.input('CCSecCode', sql.VarChar(9), req.body.pay.cvv);
              request.input('eChkABACode', sql.VarChar(4), null);
              request.input('eChkAcctNo', sql.VarChar(20), null);
              request.input('eChkAcctType', sql.VarChar(50), null);
              request.input('eChkAcctName', sql.VarChar(50), null);
              request.input('eChkBankName', sql.VarChar(50), null);
              request.input('Name', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
              request.execute('_Updateworkorder', function(err, recordsets, returnValue, affected) {
                if(err){
                  // console.log(err)
                }
                else{
                  // console.log(recordsets.recordset)
                }
              });
              // console.log({msg : 'Transaction was successful.' })
              // console.log('Successfully created transaction with Transaction ID: ' + response.getTransactionResponse().getTransId());
              // console.log('Response Code: ' + response.getTransactionResponse().getResponseCode());
              res.send({ msg: 'Transaction was successful.' });
              var content = req.body.worklists.reduce(function(a, b ,currentIndex) {
                return a + '<tr><td style="border:1px solid black;">' + (currentIndex + 1) + '</td><td style="border:1px solid black;">' + b.Description + '</td><td style="border:1px solid black;">' + b.Quantity + '</td><td style="border:1px solid black;">$' + b.Price + '</td><td style="border:1px solid black;">$' + b.Quantity * b.Price + '</td></tr>';
              }, '');
              var today = new Date();
              var date = (today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear();
              let now = new Date();
        
            var time = new Intl.DateTimeFormat('default',
                {
                    hour12: true,
                    hour: 'numeric',
                    minute: 'numeric'
                }).format(now);
        
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                    pass: 'Abbi@2021'
                  }
                });
        
                var mailOptions = {
                  from: 'abbi@integrity-tek.com',
                  to: ['abbi@integrity-tek.com',req.body.ework.Email],
                  subject: 'Work Order',
                  html : `<!DOCTYPE html><html><body><div><h3>General Information</h3><span>Merchant : American Bucking Bull, Inc.</span><br><span>Date/Time : ${date} ${time} </span></div><div> <h3>Order Information </h3><span>Invoice Number : 133280</span><br><span>Description : ${req.body.ework.orderDesc}</span><br><span>Total :  $ ${req.body.ework.TotalPrice.toFixed(2)}</span><br><span>Payment Method : ${req.body.pay.Payment}</span><br></div><div><h3>Member Information</h3><span>Member Name : ${req.body.ework.FirstName} ${req.body.ework.LastName}</span><br><span>Address : ${req.body.ework.BillingAddress}</span><br><span>City : ${req.body.ework.BillingCity}</span><br><span>State : ${req.body.ework.BillingState}</span><br><span>Zip Code : ${req.body.ework.BillingZip}</span><br><span>Country : ${req.body.ework.BillingCountry}</span><br><span>Phone : ${req.body.ework.Phone}</span><br> <span>Email : ${req.body.ework.Email}</span><br></div><div><h3>Shipping Information</h3><span>Name : ${req.body.ework.FirstName} ${req.body.ework.LastName}</span><br><span>Address : ${req.body.ework.ShippingAddress}</span><br><span>City : ${req.body.ework.ShippingCity}</span><br><span>State : ${req.body.ework.ShippingState}</span><br><span>Zip Code : ${req.body.ework.ShippingZip}</span><br><span>Country : ${req.body.ework.ShippingCountry}</span><br><span>Shipping : $ ${req.body.ework.ShippingAmt}</span></div><div> <h3>Item Information</h3><br><table style="width:100%;border:1px solid black;"><tr><th style="border:1px solid black;">Item</th><th style="border:1px solid black;">Description</th><th style="border:1px solid black;">Qty</th><th style="border:1px solid black;">Unit Price</th><th style="border:1px solid black;">Item Total</th> </tr>${content}</table></div><br><br><br><div><span>The preceding e-mail message (including any attachments) contains information that may be confidential, may be protected by the attorney-client or other applicable privileges, or may constitute non-public information. It is intended to be conveyed only to the designated recipient(s) named above. If you are not an intended recipient of this message, please notify the sender by replying to this message and then delete all copies of it from your computer system. Any use, dissemination, distribution, or reproduction of this message by unintended recipients is not authorized and may be unlawful.</span></div></body></html>`
                };
                transporter.sendMail(mailOptions, function(error, info){
                  if (error) {
                    // res.sendStatus(500)
                  } else {
                    // res.sendStatus(200)
                  }
                });
            } else {
              if(response.getTransactionResponse().getErrors() !== null) {
                let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                res.send({ msg: `${code}: ${text}`
              });
              } else {
                res.send({ msg: 'Transaction failed.' });
              }
            }    
          } else {
            if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
              let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
              let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
              res.send({ msg: `${code}: ${text}`
            });
            } else {
              let code = response.getMessages().getMessage()[0].getCode();
              let text = response.getMessages().getMessage()[0].getText();
              res.send({ msg: `${code}: ${text}`
            });
            }   
          }    

        } else {
          res.send({ msg: 'No response.' });
        }
      });
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);

  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.ework.FirstName);
  billTo.setLastName(req.body.ework.LastName);
  billTo.setCompany('');
  billTo.setAddress(req.body.ework.BillingAddress);
  billTo.setCity(req.body.ework.BillingCity);
  billTo.setState(req.body.ework.BillingState);
  billTo.setZip(req.body.ework.BillingZip);
  billTo.setCountry(req.body.ework.BillingCountry);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.body.ework.ShippingFirstName);
  shipTo.setLastName(req.body.ework.ShippingLastName);
  shipTo.setCompany('');
  shipTo.setAddress(req.body.ework.ShippingAddress);
  shipTo.setCity(req.body.ework.ShippingCity);
  shipTo.setState(req.body.ework.ShippingState);
  shipTo.setZip(req.body.ework.ShippingZip);
  shipTo.setCountry(req.body.ework.ShippingCountry);

  var customer = new ApiContracts.CustomerDataType();
  customer.setEmail(req.body.ework.Email);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);   
  transactionRequestType.setCustomer(customer);   
  var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  //pretty print request
  // console.log(JSON.stringify(createRequest.getJSON(), null, 2));

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    //pretty print response
    // console.log(JSON.stringify(response, null, 2));

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          request.input('WorkOrderNumber', sql.Int, req.body.ework.WorkOrderNumber);
          request.input('WorkOrderDate', sql.DateTime, req.body.ework.WorkOrderDate);
          request.input('MemberNumber', sql.Int, req.body.ework.MemberNumber);
          request.input('Notes', sql.VarChar(250), req.body.ework.Notes);
          request.input('TotalPrice', sql.Money, amount);
          request.input('HandlingFee', sql.Money, req.body.ework.HandlingAmt);
          request.input('HandlingDiscount', sql.Money, req.body.ework.HandlingDiscountAmt);
          request.input('ShippingCost', sql.Money, req.body.ework.ShippingAmt);
          request.input('ShippingType', sql.VarChar(250), req.body.ework.ShippingType);
          request.input('MembershipRenewalPrice', sql.Money, req.body.ework.MembershipRenewalPrice);
          request.input('MembershipUpgradePrice', sql.Money, req.body.ework.MembershipUpgradePrice);
          request.input('MembershipUpgradeType', sql.VarChar(50), req.body.ework.MembershipUpgradeType);
          request.input('FirstName', sql.VarChar(250), req.body.ework.FirstName);
          request.input('LastName', sql.VarChar(250), req.body.ework.LastName);
          request.input('Email', sql.VarChar(250), req.body.ework.Email);
          request.input('Phone', sql.VarChar(50), req.body.ework.Phone);  
          request.input('BillingAddress', sql.VarChar(250), req.body.ework.BillingAddress);
          request.input('BillingCity', sql.VarChar(250), req.body.ework.BillingCity);
          request.input('BillingState', sql.VarChar(50), req.body.ework.BillingState);
          request.input('BillingZip', sql.VarChar(50), req.body.ework.BillingZip);
          request.input('BillingCountry', sql.VarChar(50), req.body.ework.BillingCountry);
          request.input('ShippingFirstName', sql.VarChar(250), req.body.ework.ShippingFirstName);
          request.input('ShippingLastName', sql.VarChar(250), req.body.ework.ShippingLastName);
          request.input('ShippingAddress', sql.VarChar(250), req.body.ework.ShippingAddress);
          request.input('ShippingCity', sql.VarChar(250), req.body.ework.ShippingCity);
          request.input('ShippingState', sql.VarChar(50), req.body.ework.ShippingState);
          request.input('ShippingZip', sql.VarChar(50), req.body.ework.ShippingZip);
          request.input('ShippingCountry', sql.VarChar(50), req.body.ework.ShippingCountry);
          request.input('AssignedTo', sql.Int, req.body.ework.AssignedTo)
          request.input('AssignedBy', sql.VarChar(255), req.body.ework.AssignedBy);
          request.input('Status', sql.VarChar(50), req.body.ework.Status);
          request.input('paycomp', sql.Int, 1)
          request.input('PymtType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(9), null);
          request.input('eChkABACode', sql.VarChar(4), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(20), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(50), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('Name', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
          request.execute('_Updateworkorder', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              // console.log(recordsets.recordset)
            }
          });
          // console.log({msg : 'Transaction was successful.' })
          res.send({ msg: 'Transaction was successful.' });
          var content = req.body.worklists.reduce(function(a, b ,currentIndex) {
            return a + '<tr><td style="border:1px solid black;">' + (currentIndex + 1) + '</td><td style="border:1px solid black;">' + b.Description + '</td><td style="border:1px solid black;">' + b.Quantity + '</td><td style="border:1px solid black;">$' + b.Price + '</td><td style="border:1px solid black;">$' + b.Quantity * b.Price + '</td></tr>';
          }, '');
          var today = new Date();
          var date = (today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear();
          let now = new Date();
    
        var time = new Intl.DateTimeFormat('default',
            {
                hour12: true,
                hour: 'numeric',
                minute: 'numeric'
            }).format(now);
    
          var transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: 'abbi@integrity-tek.com',
                pass: 'Abbi@2021'
              }
            });
    
            var mailOptions = {
              from: 'abbi@integrity-tek.com',
              to: ['abbi@integrity-tek.com',req.body.ework.Email],
              subject: 'Work Order',
              html : `<!DOCTYPE html><html><body><div><h3>General Information</h3><span>Merchant : American Bucking Bull, Inc.</span><br><span>Date/Time : ${date} ${time} </span></div><div> <h3>Order Information </h3><span>Invoice Number : 133280</span><br><span>Description : ${req.body.ework.orderDesc}</span><br><span>Total :  $ ${req.body.ework.TotalPrice.toFixed(2)}</span><br><span>Payment Method : ${req.body.pay.Payment}</span><br></div><div><h3>Member Information</h3><span>Member Name : ${req.body.ework.FirstName} ${req.body.ework.LastName}</span><br><span>Address : ${req.body.ework.BillingAddress}</span><br><span>City : ${req.body.ework.BillingCity}</span><br><span>State : ${req.body.ework.BillingState}</span><br><span>Zip Code : ${req.body.ework.BillingZip}</span><br><span>Country : ${req.body.ework.BillingCountry}</span><br><span>Phone : ${req.body.ework.Phone}</span><br> <span>Email : ${req.body.ework.Email}</span><br></div><div><h3>Shipping Information</h3><span>Name : ${req.body.ework.FirstName} ${req.body.ework.LastName}</span><br><span>Address : ${req.body.ework.ShippingAddress}</span><br><span>City : ${req.body.ework.ShippingCity}</span><br><span>State : ${req.body.ework.ShippingState}</span><br><span>Zip Code : ${req.body.ework.ShippingZip}</span><br><span>Country : ${req.body.ework.ShippingCountry}</span><br><span>Shipping : $ ${req.body.ework.ShippingAmt}</span></div><div> <h3>Item Information</h3><br><table style="width:100%;border:1px solid black;"><tr><th style="border:1px solid black;">Item</th><th style="border:1px solid black;">Description</th><th style="border:1px solid black;">Qty</th><th style="border:1px solid black;">Unit Price</th><th style="border:1px solid black;">Item Total</th> </tr>${content}</table></div><br><br><br><div><span>The preceding e-mail message (including any attachments) contains information that may be confidential, may be protected by the attorney-client or other applicable privileges, or may constitute non-public information. It is intended to be conveyed only to the designated recipient(s) named above. If you are not an intended recipient of this message, please notify the sender by replying to this message and then delete all copies of it from your computer system. Any use, dissemination, distribution, or reproduction of this message by unintended recipients is not authorized and may be unlawful.</span></div></body></html>`
            };
            transporter.sendMail(mailOptions, function(error, info){
              if (error) {
                // res.sendStatus(500)
              } else {
                // res.sendStatus(200)
              }
            });
        }  
        else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('WorkOrderNumber', sql.Int, req.body.ework.WorkOrderNumber);
  request.input('WorkOrderDate', sql.DateTime, req.body.ework.WorkOrderDate);
  request.input('MemberNumber', sql.Int, req.body.ework.MemberNumber);
  request.input('Notes', sql.VarChar(250), req.body.ework.Notes);
  request.input('TotalPrice', sql.Money, amount);
  request.input('HandlingFee', sql.Money, req.body.ework.HandlingAmt);
  request.input('HandlingDiscount', sql.Money, req.body.ework.HandlingDiscountAmt);
  request.input('ShippingCost', sql.Money, req.body.ework.ShippingAmt);
  request.input('ShippingType', sql.VarChar(250), req.body.ework.ShippingType);
  request.input('MembershipRenewalPrice', sql.Money, req.body.ework.MembershipRenewalPrice);
  request.input('MembershipUpgradePrice', sql.Money, req.body.ework.MembershipUpgradePrice);
  request.input('MembershipUpgradeType', sql.VarChar(50), req.body.ework.MembershipUpgradeType);
  request.input('FirstName', sql.VarChar(250), req.body.ework.FirstName);
  request.input('LastName', sql.VarChar(250), req.body.ework.LastName);
  request.input('Email', sql.VarChar(250), req.body.ework.Email);
  request.input('Phone', sql.VarChar(50), req.body.ework.Phone);  
  request.input('BillingAddress', sql.VarChar(250), req.body.ework.BillingAddress);
  request.input('BillingCity', sql.VarChar(250), req.body.ework.BillingCity);
  request.input('BillingState', sql.VarChar(50), req.body.ework.BillingState);
  request.input('BillingZip', sql.VarChar(50), req.body.ework.BillingZip);
  request.input('BillingCountry', sql.VarChar(50), req.body.ework.BillingCountry);
  request.input('ShippingFirstName', sql.VarChar(250), req.body.ework.ShippingFirstName);
  request.input('ShippingLastName', sql.VarChar(250), req.body.ework.ShippingLastName);
  request.input('ShippingAddress', sql.VarChar(250), req.body.ework.ShippingAddress);
  request.input('ShippingCity', sql.VarChar(250), req.body.ework.ShippingCity);
  request.input('ShippingState', sql.VarChar(50), req.body.ework.ShippingState);
  request.input('ShippingZip', sql.VarChar(50), req.body.ework.ShippingZip);
  request.input('ShippingCountry', sql.VarChar(50), req.body.ework.ShippingCountry);
  request.input('AssignedTo', sql.Int, req.body.ework.AssignedTo)
  request.input('AssignedBy', sql.VarChar(255), req.body.ework.AssignedBy);
  request.input('Status', sql.VarChar(50), req.body.ework.Status);
  request.input('PymtType', sql.VarChar(50), null);
  request.input('CCType', sql.VarChar(50), null);
  request.input('CCNumber', sql.VarChar(50), null);
  request.input('CCExpDate', sql.VarChar(50), null);
  request.input('CCSecCode', sql.VarChar(9), null);
  request.input('eChkABACode', sql.VarChar(4), null);
  request.input('eChkAcctNo', sql.VarChar(20), null);
  request.input('eChkAcctType', sql.VarChar(50), null);
  request.input('eChkAcctName', sql.VarChar(50), null);
  request.input('eChkBankName', sql.VarChar(50), null);
  request.input('paycomp', sql.Int, 1)
  request.input('Name', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
  request.execute('_Updateworkorder', function(err, recordsets, returnValue, affected) {
    if(err){
      res.send({msg:'Error'});
    }
    else{
      res.send({msg:'successfull'})
      var content = req.body.worklists.reduce(function(a, b ,currentIndex) {
        return a + '<tr><td style="border:1px solid black;">' + (currentIndex + 1) + '</td><td style="border:1px solid black;">' + b.Description + '</td><td style="border:1px solid black;">' + b.Quantity + '</td><td style="border:1px solid black;">$' + b.Price + '</td><td style="border:1px solid black;">$' + b.Quantity * b.Price + '</td></tr>';
      }, '');
      var today = new Date();
      var date = (today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear();
      let now = new Date();

    var time = new Intl.DateTimeFormat('default',
        {
            hour12: true,
            hour: 'numeric',
            minute: 'numeric'
        }).format(now);

      var transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: 'abbi@integrity-tek.com',
            pass: 'Abbi@2021'
          }
        });

        var mailOptions = {
          from: 'abbi@integrity-tek.com',
          to: ['abbi@integrity-tek.com',req.body.ework.Email],
          subject: 'Work Order',
          html : `<!DOCTYPE html><html><body><div><h3>General Information</h3><span>Merchant : American Bucking Bull, Inc.</span><br><span>Date/Time : ${date} ${time} </span></div><div> <h3>Order Information </h3><span>Invoice Number : 133280</span><br><span>Description : ${req.body.ework.orderDesc}</span><br><span>Total :  $ ${req.body.ework.TotalPrice.toFixed(2)}</span><br><span>Payment Method : ${req.body.pay.Payment}</span><br></div><div><h3>Member Information</h3><span>Member Name : ${req.body.ework.FirstName} ${req.body.ework.LastName}</span><br><span>Address : ${req.body.ework.BillingAddress}</span><br><span>City : ${req.body.ework.BillingCity}</span><br><span>State : ${req.body.ework.BillingState}</span><br><span>Zip Code : ${req.body.ework.BillingZip}</span><br><span>Country : ${req.body.ework.BillingCountry}</span><br><span>Phone : ${req.body.ework.Phone}</span><br> <span>Email : ${req.body.ework.Email}</span><br></div><div><h3>Shipping Information</h3><span>Name : ${req.body.ework.FirstName} ${req.body.ework.LastName}</span><br><span>Address : ${req.body.ework.ShippingAddress}</span><br><span>City : ${req.body.ework.ShippingCity}</span><br><span>State : ${req.body.ework.ShippingState}</span><br><span>Zip Code : ${req.body.ework.ShippingZip}</span><br><span>Country : ${req.body.ework.ShippingCountry}</span><br><span>Shipping : $ ${req.body.ework.ShippingAmt}</span></div><div> <h3>Item Information</h3><br><table style="width:100%;border:1px solid black;"><tr><th style="border:1px solid black;">Item</th><th style="border:1px solid black;">Description</th><th style="border:1px solid black;">Qty</th><th style="border:1px solid black;">Unit Price</th><th style="border:1px solid black;">Item Total</th> </tr>${content}</table></div><br><br><br><div><span>The preceding e-mail message (including any attachments) contains information that may be confidential, may be protected by the attorney-client or other applicable privileges, or may constitute non-public information. It is intended to be conveyed only to the designated recipient(s) named above. If you are not an intended recipient of this message, please notify the sender by replying to this message and then delete all copies of it from your computer system. Any use, dissemination, distribution, or reproduction of this message by unintended recipients is not authorized and may be unlawful.</span></div></body></html>`
        };
        transporter.sendMail(mailOptions, function(error, info){
          if (error) {
            // res.sendStatus(500)
          } else {
            // res.sendStatus(200)
          }
        });
    }
  });
}
}
});
}
});
});
// -------------------------------------------------------Workorder update-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updateworkorder2', function(req, res) {
      var data = req.body.ework1;
    // console.log(data)
    var data1 = req.body.ework;
    // console.log(data1)
    for(i=0;i<data.length;i++){
      if(data[i].Quantity!=null && data[i].LineId==null){
          // console.log(data[i])
          var sql1 = "insert into WorkOrderLines(WorkOrderNumber, LineItemId, Quantity, Price, Postage, OnlineStoreId, LineItemComplete) values("+data1.WorkOrderNumber+", "+data[i].LineItemId+", "+data[i].Quantity+", "+data[i].Price+", "+data[i].ItemPostage+", "+data[i].StoreItem+",(Case when '"+data[i].LineItemComplete+"' is null then 0 when '"+data[i].LineItemComplete+"'='false' then 0 else 1 end))"
        // console.log(sql1);
        request.query(sql1, function (err, recordset1) {
          if(err){
            console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset1.recordset1)
            res.sendStatus(200)
          }
        });
      }
    }
  });
  });
// -------------------------------------------------------Workorder update-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updateworkorder', function(req, res) {
      var data = req.body;
      // console.log(data)
      for(i=0;i<data.length;i++){
        if(data[i].LineId != null && data[i].Quantity !=null){
          var sql = "UPDATE WorkOrderLines SET Quantity = "+data[i].Quantity+",Price = "+data[i].Price+",Postage = "+data[i].ItemPostage+",LineItemComplete =(Case when '"+data[i].LineItemComplete+"' is null then 0 when '"+data[i].LineItemComplete+"'='false' then 0 else 1 end) where LineId = "+data[i].LineId+""          // console.log(sql);
          request.query(sql, function (err, recordset) {
            if(err){
              //console.log(err)
              // res.sendStatus(500);
            }
            else{
              // console.log(recordset.recordset)
              // res.send(recordset.recordset)
            }
          });
        }
        else {
          var sql = "Delete from WorkOrderLines Where LineId="+data[i].LineId+""
          request.query(sql, function (err, recordset) {
            if(err){
              //console.log(err)
              // res.sendStatus(500);
            }
            else{
              // console.log(recordset.recordset)
              // res.send(recordset.recordset)
            }
          });
        }
      }
    });
  });
// -------------------------------------------------------Add Work Order-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addmemberworkorder', function(req, res) {
      if(req.session && req.session.admin){
        res.locals.admin = req.session.admin;
      // console.log(req.body)
      var sql = "SELECT MemberNumber, FirstName, LastName, Type, MemberBirthdate,  joinDate, DueDate, Address, City, state, Zip, Country, Email, Phone, AlternateAccount FROM Members WHERE MemberNumber = "+req.body.member+"";
      // console.log(sql)
      var sql1 = "Select (case when li.Description like'DNA%' then 8 else li.Categoryid end) as Categoryid,(case when li.Description like'DNA%' then 'DNA kits' else Replace(c.Category+'('+isnull(c.Note,'')+')','()','') end) as Header from WorkOrderLineItems li join WorkOrderCategory c on li.categoryid = c.categoryid left join Inventory_Store i on li.storeitem = i.productid Where PricingYear = Year(GETDATE()) and c.CategoryId<>6 order by c.SortOrder, li.ItemSortOrder"
      var sql2 = "Select (case when li.Description like'DNA%' then 8 else li.Categoryid end) as Categoryid, LineItemId, Description, li.Price, StoreItem, ItemPostage, ItemPostageType, NewBreederOnly,null as LineId, null as Quantity, null as SubTotal, null as LineItemComplete, i.weight from WorkOrderLineItems li join WorkOrderCategory c on li.categoryid = c.categoryid left join Inventory_Store i on li.storeitem = i.productid Where PricingYear = Year(GETDATE()) and c.CategoryId<>6 order by c.SortOrder, li.ItemSortOrder "
      request.query(sql, function (err, recordset) {
        request.query(sql1, function (err, recordsets) {
          request.query(sql2, function (err, recordset1) {
            if(err){
              res.sendStatus(500);
            }
            else{
          // console.log(recordsets.recordset)
          // console.log(recordset1.recordset)
          res.send({personaldata : recordset.recordset, headings : recordsets.recordset,  listdata : recordset1.recordset, id : req.session.admin[0].UserID, fname : req.session.admin[0].FirstName, lname : req.session.admin[0].LastName})
        }
      });
        });
      });
    }
  });
  });
// ------------------------------------------------Add Work Order-----------------------------------------------------------
router.post('/insertworkorder', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      function removeUndefinedProps(obj) {
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
            delete obj[prop];
          }
        }
        return obj;
      }
      var obj = req.body;
      removeUndefinedProps(obj)
    // console.log(obj);
    // console.log(req.body)
    // console.log(req.body.WorkOrderNumber);
    request.input('MemberNumber', sql.Int, req.body.MemberNumber);
    request.input('Notes', sql.VarChar(250), req.body.notes);
    request.input('CreatedBy', sql.VarChar(255), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName)
    request.input('TotalPrice', sql.Decimal(8,2), req.body.TotalPriceAmt);
    request.input('HandlingFee', sql.Decimal(8,2), req.body.HandlingAmt);
    request.input('HandlingDiscount', sql.Decimal(8,2), req.body.HandlingDiscountAmt);
    request.input('ShippingCost', sql.Decimal(8,2), req.body.shippingAmt);
    request.input('ShippingType', sql.VarChar(250), req.body.ShippingType);
    request.input('MembershipRenewalPrice', sql.Decimal(8,2), req.body.MembershipRenewalPrice);
    request.input('MembershipUpgradePrice', sql.Decimal(8,2), req.body.SubTotal1);
    request.input('MembershipUpgradeType', sql.VarChar(50), req.body.Account);
    request.input('FirstName', sql.VarChar(250), req.body.FirstName);
    request.input('LastName', sql.VarChar(250), req.body.LastName);
    request.input('Email', sql.VarChar(250), req.body.Email);
    request.input('Phone', sql.VarChar(50), req.body.Phone);  
    request.input('BillingAddress', sql.VarChar(250), req.body.Address);
    request.input('BillingCity', sql.VarChar(250), req.body.City);
    request.input('BillingState', sql.VarChar(50), req.body.state);
    request.input('BillingZip', sql.VarChar(50), req.body.Zip);
    request.input('BillingCountry', sql.VarChar(50), req.body.Country);
    request.input('ShippingFirstName', sql.VarChar(250), req.body.ShippingFirstName);
    request.input('ShippingLastName', sql.VarChar(250), req.body.ShippingLastName);
    request.input('ShippingAddress', sql.VarChar(250), req.body.ShippingAddress);
    request.input('ShippingCity', sql.VarChar(250), req.body.ShippingCity);
    request.input('ShippingState', sql.VarChar(50), req.body.ShippingState);
    request.input('ShippingZip', sql.VarChar(50), req.body.ShippingZip);
    request.input('ShippingCountry', sql.VarChar(50), req.body.ShippingCountry);
    request.input('AssignedTo', sql.Int, req.body.AssignedTo)
    request.input('AssignedBy', sql.VarChar(255), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
    request.input('Status', sql.VarChar(50), req.body.Status);
    request.input('Name', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
    request.execute('_NewWorkorder', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err);
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  }
});
});
// ------------------------------------------------Add Work Order & pay-----------------------------------------------------------
router.post('/insertworkorder5', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.workorders.TotalPriceAmt;
    // var amount =1;
    if(req.body.pay.Payment == 'other'){
      req.body.workorders.TotalPriceAmt = req.body.workorders.TotalPriceAmt - req.body.workorders.HandlingAmt;
      req.body.workorders.HandlingAmt = 0;

    }
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            // console.log(invoice)
            orderDetails.setDescription('');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.workorders.FirstName);
            billTo.setLastName(req.body.workorders.LastName);
            billTo.setAddress(req.body.workorders.Address);
            billTo.setCity(req.body.workorders.City);
            billTo.setState(req.body.workorders.State);
            billTo.setZip(req.body.workorders.Zip);
            billTo.setCountry(req.body.workorders.Country);
            billTo.setPhoneNumber(req.body.workorders.Phone);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.workorders.Email);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.workorders.ShippingFirstName);
            shipTo.setLastName(req.body.workorders.ShippingLastName);
            shipTo.setAddress(req.body.workorders.ShippingAddress);
            shipTo.setCity(req.body.workorders.ShippingCity);
            shipTo.setState(req.body.workorders.ShippingState);
            shipTo.setZip(req.body.workorders.ShippingZip);
            shipTo.setCountry(req.body.workorders.ShippingCountry);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);
            transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(() => {
        var apiResponse = ctrl.getResponse();
        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

        if(response !== null) {
          if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
            if(response.getTransactionResponse().getMessages() !== null) {
              request.input('MemberNumber', sql.Int, req.body.workorders.MemberNumber);
              request.input('Notes', sql.VarChar(250), req.body.workorders.Notes);
              request.input('CreatedBy', sql.VarChar(255), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName)
              request.input('TotalPrice', sql.Decimal(8,2), req.body.workorders.TotalPriceAmt);
              request.input('HandlingFee', sql.Decimal(8,2), req.body.workorders.HandlingAmt);
              request.input('HandlingDiscount', sql.Decimal(8,2), req.body.workorders.HandlingDiscountAmt);
              request.input('ShippingCost', sql.Decimal(8,2), req.body.workorders.ShippingAmt);
              request.input('ShippingType', sql.VarChar(250), req.body.workorders.ShippingType);
              request.input('MembershipRenewalPrice', sql.Decimal(8,2), req.body.workorders.MembershipRenewalPrice);
              request.input('MembershipUpgradePrice', sql.Decimal(8,2), req.body.workorders.SubTotal1);
              request.input('MembershipUpgradeType', sql.VarChar(50), req.body.workorders.Account);
              request.input('FirstName', sql.VarChar(250), req.body.workorders.FirstName);
              request.input('LastName', sql.VarChar(250), req.body.workorders.LastName);
              request.input('Email', sql.VarChar(250), req.body.workorders.Email);
              request.input('Phone', sql.VarChar(50), req.body.workorders.Phone);  
              request.input('BillingAddress', sql.VarChar(250), req.body.workorders.Address);
              request.input('BillingCity', sql.VarChar(250), req.body.workorders.City);
              request.input('BillingState', sql.VarChar(50), req.body.workorders.state);
              request.input('BillingZip', sql.VarChar(50), req.body.workorders.Zip);
              request.input('BillingCountry', sql.VarChar(50), req.body.workorders.Country);
              request.input('ShippingFirstName', sql.VarChar(250), req.body.workorders.ShippingFirstName);
              request.input('ShippingLastName', sql.VarChar(250), req.body.workorders.ShippingLastName);
              request.input('ShippingAddress', sql.VarChar(250), req.body.workorders.ShippingAddress);
              request.input('ShippingCity', sql.VarChar(250), req.body.workorders.ShippingCity);
              request.input('ShippingState', sql.VarChar(50), req.body.workorders.ShippingState);
              request.input('ShippingZip', sql.VarChar(50), req.body.workorders.ShippingZip);
              request.input('ShippingCountry', sql.VarChar(50), req.body.workorders.ShippingCountry);
              request.input('AssignedTo', sql.Int, req.body.workorders.AssignedTo)
              request.input('AssignedBy', sql.VarChar(255), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
              request.input('Status', sql.VarChar(50), req.body.workorders.Status);
              request.input('Name', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
              request.input('paycomp', sql.Int, 1)
              request.input('PymtType', sql.VarChar(50), req.body.pay.Payment);
              request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
              request.input('CCNumber', sql.VarChar(50), req.body.pay.cc);
              request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
              request.input('CCSecCode', sql.VarChar(9), req.body.pay.cvv);
              request.input('eChkABACode', sql.VarChar(4), null);
              request.input('eChkAcctNo', sql.VarChar(20), null);
              request.input('eChkAcctType', sql.VarChar(50), null);
              request.input('eChkAcctName', sql.VarChar(50), null);
              request.input('eChkBankName', sql.VarChar(50), null);
              request.execute('_NewWorkorder', function(err, recordsets, returnValue, affected) {
                if(err){
                  // console.log(err)
                }
                else{
                  // console.log(recordsets.recordset)
                }
              });
              res.send({ msg: 'Transaction was successful.' });
              var content = req.body.worklists.reduce(function(a, b ,currentIndex) {
                return a + '<tr><td style="border:1px solid black;">' + (currentIndex + 1) + '</td><td style="border:1px solid black;">' + b.Description + '</td><td style="border:1px solid black;">' + b.Quantity + '</td><td style="border:1px solid black;">$' + b.Price + '</td><td style="border:1px solid black;">$' + b.Quantity * b.Price + '</td></tr>';
              }, '');
              var today = new Date();
              var date = (today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear();
              let now = new Date();
        
            var time = new Intl.DateTimeFormat('default',
                {
                    hour12: true,
                    hour: 'numeric',
                    minute: 'numeric'
                }).format(now);
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                    pass: 'Abbi@2021'
                  }
                });
        
                var mailOptions = {
                  from: 'abbi@integrity-tek.com',
                  to: ['abbi@integrity-tek.com',req.body.workorders.Email],
                  subject: 'Work Order',
                  html : `<!DOCTYPE html><html><body><div><h3>General Information</h3><span>Merchant : American Bucking Bull, Inc.</span><br><span>Date/Time : ${date} ${time} </span></div><div> <h3>Order Information </h3><span>Invoice Number : ${invoice} </span><br><span>Description : ${req.body.workorders.orderDesc}</span><br><span>Total :  $ ${req.body.workorders.TotalPriceAmt}</span><br><span>Payment Method : ${req.body.pay.Payment}</span><br></div><div><h3>Member Information</h3><span>Member Name : ${req.body.workorders.FirstName} ${req.body.workorders.LastName}</span><br><span>Address : ${req.body.workorders.Address}</span><br><span>City : ${req.body.workorders.City}</span><br><span>State : ${req.body.workorders.state}</span><br><span>Zip Code : ${req.body.workorders.Zip}</span><br><span>Country : ${req.body.workorders.Country}</span><br><span>Phone : ${req.body.workorders.Phone}</span><br> <span>Email : ${req.body.workorders.Email}</span><br></div><div><h3>Shipping Information</h3><span>Name : ${req.body.workorders.FirstName} ${req.body.workorders.LastName}</span><br><span>Address : ${req.body.workorders.ShippingAddress}</span><br><span>City : ${req.body.workorders.ShippingCity}</span><br><span>State : ${req.body.workorders.ShippingState}</span><br><span>Zip Code : ${req.body.workorders.ShippingZip}</span><br><span>Country : ${req.body.workorders.ShippingCountry}</span><br><span>Shipping : $ ${req.body.workorders.shippingAmt}</span></div><div> <h3>Item Information</h3><br><table style="width:100%;border:1px solid black;"><tr><th style="border:1px solid black;">Item</th><th style="border:1px solid black;">Description</th><th style="border:1px solid black;">Qty</th><th style="border:1px solid black;">Unit Price</th><th style="border:1px solid black;">Item Total</th> </tr>${content}</table></div><br><br><br><div><span>The preceding e-mail message (including any attachments) contains information that may be confidential, may be protected by the attorney-client or other applicable privileges, or may constitute non-public information. It is intended to be conveyed only to the designated recipient(s) named above. If you are not an intended recipient of this message, please notify the sender by replying to this message and then delete all copies of it from your computer system. Any use, dissemination, distribution, or reproduction of this message by unintended recipients is not authorized and may be unlawful.</span></div></body></html>`
                };
                transporter.sendMail(mailOptions, function(error, info){
                  if (error) {
                    // res.sendStatus(500)
                  } else {
                    // res.sendStatus(200)
                  }
                });
            } else {
              if(response.getTransactionResponse().getErrors() !== null) {
                let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                res.send({ msg: `${code}: ${text}`
              });
              } else {
                res.send({ msg: 'Transaction failed.' });
              }
            }    
          } else {
            if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
              let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
              let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
              res.send({ msg: `${code}: ${text}`
            });
            } else {
              let code = response.getMessages().getMessage()[0].getCode();
              let text = response.getMessages().getMessage()[0].getText();
              res.send({ msg: `${code}: ${text}`
            });
            }   
          }    

        } else {
          res.send({ msg: 'No response.' });
        }
      });
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);

  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('Add Work Order');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.ework.ShippingFirstName);
  billTo.setLastName(req.body.ework.ShippingLastName);
  billTo.setAddress(req.body.ework.BillingAddress);
  billTo.setCity(req.body.ework.BillingCity);
  billTo.setState(req.body.ework.BillingState);
  billTo.setZip(req.body.ework.BillingZip);
  billTo.setCountry(req.body.ework.BillingCountry);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.body.ework.ShippingFirstName);
  shipTo.setLastName(req.body.ework.ShippingLastName);
  shipTo.setAddress(req.body.ework.ShippingAddress);
  shipTo.setCity(req.body.ework.ShippingCity);
  shipTo.setState(req.body.ework.ShippingState);
  shipTo.setZip(req.body.ework.ShippingZip);
  shipTo.setCountry(req.body.ework.ShippingCountry);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(function(){

        var apiResponse = ctrl.getResponse();

        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    //pretty print response
    // console.log(JSON.stringify(response, null, 2));

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          request.input('MemberNumber', sql.Int, req.body.workorders.MemberNumber);
          request.input('Notes', sql.VarChar(250), req.body.workorders.Notes);
          request.input('CreatedBy', sql.VarChar(255), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName)
          request.input('TotalPrice', sql.Decimal(8,2), req.body.workorders.TotalPriceAmt);
          request.input('HandlingFee', sql.Decimal(8,2), req.body.workorders.HandlingAmt);
          request.input('HandlingDiscount', sql.Decimal(8,2), req.body.workorders.HandlingDiscountAmt);
          request.input('ShippingCost', sql.Decimal(8,2), req.body.workorders.ShippingAmt);
          request.input('ShippingType', sql.VarChar(250), req.body.workorders.ShippingType);
          request.input('MembershipRenewalPrice', sql.Decimal(8,2), req.body.workorders.MembershipRenewalPrice);
          request.input('MembershipUpgradePrice', sql.Decimal(8,2), req.body.workorders.SubTotal1);
          request.input('MembershipUpgradeType', sql.VarChar(50), req.body.workorders.Account);
          request.input('FirstName', sql.VarChar(250), req.body.workorders.FirstName);
          request.input('LastName', sql.VarChar(250), req.body.workorders.LastName);
          request.input('Email', sql.VarChar(250), req.body.workorders.Email);
          request.input('Phone', sql.VarChar(50), req.body.workorders.Phone);  
          request.input('BillingAddress', sql.VarChar(250), req.body.workorders.Address);
          request.input('BillingCity', sql.VarChar(250), req.body.workorders.City);
          request.input('BillingState', sql.VarChar(50), req.body.workorders.state);
          request.input('BillingZip', sql.VarChar(50), req.body.workorders.Zip);
          request.input('BillingCountry', sql.VarChar(50), req.body.workorders.Country);
          request.input('ShippingFirstName', sql.VarChar(250), req.body.workorders.ShippingFirstName);
          request.input('ShippingLastName', sql.VarChar(250), req.body.workorders.ShippingLastName);
          request.input('ShippingAddress', sql.VarChar(250), req.body.workorders.ShippingAddress);
          request.input('ShippingCity', sql.VarChar(250), req.body.workorders.ShippingCity);
          request.input('ShippingState', sql.VarChar(50), req.body.workorders.ShippingState);
          request.input('ShippingZip', sql.VarChar(50), req.body.workorders.ShippingZip);
          request.input('ShippingCountry', sql.VarChar(50), req.body.workorders.ShippingCountry);
          request.input('AssignedTo', sql.Int, req.body.workorders.AssignedTo)
          request.input('AssignedBy', sql.VarChar(255), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
          request.input('Status', sql.VarChar(50), req.body.workorders.Status);
          request.input('Name', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
          request.input('paycomp', sql.Int, 1)
          request.input('PymtType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(9), null);
          request.input('eChkABACode', sql.VarChar(4), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(20), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(50), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.execute('_NewWorkorder', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              // console.log(recordsets.recordset)
            }
          });
          // console.log({msg : 'Transaction was successful.' })
          res.send({ msg: 'Transaction was successful.' });
          var content = req.body.worklists.reduce(function(a, b ,currentIndex) {
            return a + '<tr><td style="border:1px solid black;">' + (currentIndex + 1) + '</td><td style="border:1px solid black;">' + b.Description + '</td><td style="border:1px solid black;">' + b.Quantity + '</td><td style="border:1px solid black;">$' + b.Price + '</td><td style="border:1px solid black;">$' + b.Quantity * b.Price + '</td></tr>';
          }, '');
          var today = new Date();
              var date = (today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear();
              let now = new Date();
        
            var time = new Intl.DateTimeFormat('default',
                {
                    hour12: true,
                    hour: 'numeric',
                    minute: 'numeric'
                }).format(now);
    
          var transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: 'abbi@integrity-tek.com',
                pass: 'Abbi@2021'
              }
            });
    
            var mailOptions = {
              from: 'abbi@integrity-tek.com',
              to: ['abbi@integrity-tek.com',req.body.workorders.Email],
              subject: 'Work Order',
              html : `<!DOCTYPE html><html><body><div><h3>General Information</h3><span>Merchant : American Bucking Bull, Inc.</span><br><span>Date/Time : ${date} ${time} </span></div><div> <h3>Order Information </h3><span>Invoice Number : ${invoice} </span><br><span>Description : ${req.body.workorders.orderDesc}</span><br><span>Total :  $ ${req.body.workorders.TotalPriceAmt}</span><br><span>Payment Method : ${req.body.pay.Payment}</span><br></div><div><h3>Member Information</h3><span>Member Name : ${req.body.workorders.FirstName} ${req.body.workorders.LastName}</span><br><span>Address : ${req.body.workorders.Address}</span><br><span>City : ${req.body.workorders.City}</span><br><span>State : ${req.body.workorders.state}</span><br><span>Zip Code : ${req.body.workorders.Zip}</span><br><span>Country : ${req.body.workorders.Country}</span><br><span>Phone : ${req.body.workorders.Phone}</span><br> <span>Email : ${req.body.workorders.Email}</span><br></div><div><h3>Shipping Information</h3><span>Name : ${req.body.workorders.FirstName} ${req.body.workorders.LastName}</span><br><span>Address : ${req.body.workorders.ShippingAddress}</span><br><span>City : ${req.body.workorders.ShippingCity}</span><br><span>State : ${req.body.workorders.ShippingState}</span><br><span>Zip Code : ${req.body.workorders.ShippingZip}</span><br><span>Country : ${req.body.workorders.ShippingCountry}</span><br><span>Shipping : $ ${req.body.workorders.shippingAmt}</span></div><div> <h3>Item Information</h3><br><table style="width:100%;border:1px solid black;"><tr><th style="border:1px solid black;">Item</th><th style="border:1px solid black;">Description</th><th style="border:1px solid black;">Qty</th><th style="border:1px solid black;">Unit Price</th><th style="border:1px solid black;">Item Total</th> </tr>${content}</table></div><br><br><br><div><span>The preceding e-mail message (including any attachments) contains information that may be confidential, may be protected by the attorney-client or other applicable privileges, or may constitute non-public information. It is intended to be conveyed only to the designated recipient(s) named above. If you are not an intended recipient of this message, please notify the sender by replying to this message and then delete all copies of it from your computer system. Any use, dissemination, distribution, or reproduction of this message by unintended recipients is not authorized and may be unlawful.</span></div></body></html>`
            };
            transporter.sendMail(mailOptions, function(error, info){
              if (error) {
                // res.sendStatus(500)
              } else {
                // res.sendStatus(200)
              }
            });
        }  
        else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('MemberNumber', sql.Int, req.body.workorders.MemberNumber);
  request.input('Notes', sql.VarChar(250), req.body.workorders.Notes);
  request.input('CreatedBy', sql.VarChar(255), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName)
  request.input('TotalPrice', sql.Decimal(8,2), req.body.workorders.TotalPriceAmt);
  request.input('HandlingFee', sql.Decimal(8,2), req.body.workorders.HandlingAmt);
  request.input('HandlingDiscount', sql.Decimal(8,2), req.body.workorders.HandlingDiscountAmt);
  request.input('ShippingCost', sql.Decimal(8,2), req.body.workorders.ShippingAmt);
  request.input('ShippingType', sql.VarChar(250), req.body.workorders.ShippingType);
  request.input('MembershipRenewalPrice', sql.Decimal(8,2), req.body.workorders.MembershipRenewalPrice);
  request.input('MembershipUpgradePrice', sql.Decimal(8,2), req.body.workorders.SubTotal1);
  request.input('MembershipUpgradeType', sql.VarChar(50), req.body.workorders.Account);
  request.input('FirstName', sql.VarChar(250), req.body.workorders.FirstName);
  request.input('LastName', sql.VarChar(250), req.body.workorders.LastName);
  request.input('Email', sql.VarChar(250), req.body.workorders.Email);
  request.input('Phone', sql.VarChar(50), req.body.workorders.Phone);  
  request.input('BillingAddress', sql.VarChar(250), req.body.workorders.Address);
  request.input('BillingCity', sql.VarChar(250), req.body.workorders.City);
  request.input('BillingState', sql.VarChar(50), req.body.workorders.state);
  request.input('BillingZip', sql.VarChar(50), req.body.workorders.Zip);
  request.input('BillingCountry', sql.VarChar(50), req.body.workorders.Country);
  request.input('ShippingFirstName', sql.VarChar(250), req.body.workorders.ShippingFirstName);
  request.input('ShippingLastName', sql.VarChar(250), req.body.workorders.ShippingLastName);
  request.input('ShippingAddress', sql.VarChar(250), req.body.workorders.ShippingAddress);
  request.input('ShippingCity', sql.VarChar(250), req.body.workorders.ShippingCity);
  request.input('ShippingState', sql.VarChar(50), req.body.workorders.ShippingState);
  request.input('ShippingZip', sql.VarChar(50), req.body.workorders.ShippingZip);
  request.input('ShippingCountry', sql.VarChar(50), req.body.workorders.ShippingCountry);
  request.input('AssignedTo', sql.Int, req.body.workorders.AssignedTo)
  request.input('AssignedBy', sql.VarChar(255), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
  request.input('Status', sql.VarChar(50), req.body.workorders.Status);
  request.input('Name', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
  request.input('PymtType', sql.VarChar(50), null);
  request.input('CCType', sql.VarChar(50), null);
  request.input('CCNumber', sql.VarChar(50), null);
  request.input('CCExpDate', sql.VarChar(50), null);
  request.input('CCSecCode', sql.VarChar(9), null);
  request.input('eChkABACode', sql.VarChar(4), null);
  request.input('eChkAcctNo', sql.VarChar(20), null);
  request.input('eChkAcctType', sql.VarChar(50), null);
  request.input('eChkAcctName', sql.VarChar(50), null);
  request.input('eChkBankName', sql.VarChar(50), null);
  request.input('paycomp', sql.Int, 1)
  request.execute('_NewWorkorder', function(err, recordsets, returnValue, affected) {
    if(err){
      res.send({msg:'Error'});
    }
    else{
      res.send({msg:'successfull'})

      var content = req.body.worklists.reduce(function(a, b ,currentIndex) {
        return a + '<tr><td style="border:1px solid black;">' + (currentIndex + 1) + '</td><td style="border:1px solid black;">' + b.Description + '</td><td style="border:1px solid black;">' + b.Quantity + '</td><td style="border:1px solid black;">$' + b.Price + '</td><td style="border:1px solid black;">$' + b.Quantity * b.Price + '</td></tr>';
      }, '');
      var today = new Date();
      var date = (today.getMonth()+1)+'/'+today.getDate()+'/'+today.getFullYear();
      let now = new Date();

    var time = new Intl.DateTimeFormat('default',
        {
            hour12: true,
            hour: 'numeric',
            minute: 'numeric'
        }).format(now);

      var transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
          user: 'abbi@integrity-tek.com',
            pass: 'Abbi@2021'
          }
        });

        var mailOptions = {
          from: 'abbi@integrity-tek.com',
          to: ['abbi@integrity-tek.com',req.body.workorders.Email],
          subject: 'Work Order',
          html : `<!DOCTYPE html><html><body><div><h3>General Information</h3><span>Merchant : American Bucking Bull, Inc.</span><br><span>Date/Time : ${date} ${time}</span></div><div> <h3>Order Information </h3><span>Invoice Number : ${invoice}</span><br><span>Description : ${req.body.workorders.orderDesc}</span><br><span>Total :  $ ${req.body.workorders.TotalPriceAmt}</span><br><span>Payment Method : ${req.body.pay.Payment}</span><br></div><div><h3>Member Information</h3><span>Member Name : ${req.body.workorders.FirstName} ${req.body.workorders.LastName}</span><br><span>Address : ${req.body.workorders.Address}</span><br><span>City : ${req.body.workorders.City}</span><br><span>State : ${req.body.workorders.state}</span><br><span>Zip Code : ${req.body.workorders.Zip}</span><br><span>Country : ${req.body.workorders.Country}</span><br><span>Phone : ${req.body.workorders.Phone}</span><br> <span>Email : ${req.body.workorders.Email}</span><br></div><div><h3>Shipping Information</h3><span>Name : ${req.body.workorders.FirstName} ${req.body.workorders.LastName}</span><br><span>Address : ${req.body.workorders.ShippingAddress}</span><br><span>City : ${req.body.workorders.ShippingCity}</span><br><span>State : ${req.body.workorders.ShippingState}</span><br><span>Zip Code : ${req.body.workorders.ShippingZip}</span><br><span>Country : ${req.body.workorders.ShippingCountry}</span><br><span>Shipping : $ ${req.body.workorders.shippingAmt}</span></div><div> <h3>Item Information</h3><br><table style="width:100%;border:1px solid black;"><tr><th style="border:1px solid black;">Item</th><th style="border:1px solid black;">Description</th><th style="border:1px solid black;">Qty</th><th style="border:1px solid black;">Unit Price</th><th style="border:1px solid black;">Item Total</th> </tr>${content}</table></div><br><br><br><div><span>The preceding e-mail message (including any attachments) contains information that may be confidential, may be protected by the attorney-client or other applicable privileges, or may constitute non-public information. It is intended to be conveyed only to the designated recipient(s) named above. If you are not an intended recipient of this message, please notify the sender by replying to this message and then delete all copies of it from your computer system. Any use, dissemination, distribution, or reproduction of this message by unintended recipients is not authorized and may be unlawful.</span></div></body></html>`
        };
        transporter.sendMail(mailOptions, function(error, info){
          if (error) {
            // res.sendStatus(500)
          } else {
            // res.sendStatus(200)
          }
        });
    }
  });
}
}
});
}
});
});
// -------------------------------------------------------Workorder New-------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/insertworkorder2', function(req, res) {
      console.log(req.body,'called')
      var data = req.body;
    for(i=0;i<data.length;i++){
      if(data[i].Quantity!=null || data[i].LineId != null){
        var sql = "insert into WorkOrderLines(WorkOrderNumber, LineItemId, Quantity, Price, Postage, OnlineStoreId, LineItemComplete) values((SELECT max(WorkOrderNumber) FROM WorkOrdermain), "+data[i].LineItemId+", "+data[i].Quantity+", "+data[i].Price+", "+data[i].ItemPostage+", "+data[i].StoreItem+",(Case when '"+data[i].LineItemComplete+"' is null then 0 when '"+data[i].LineItemComplete+"'='false' then 0 else 1 end));SELECT 1"
        console.log(sql);
        request.query(sql, function (err, recordset) {
          if(err){
            //console.log(err)
            res.sendStatus(500);
          }
          else{
            console.log(recordset,'oooooooooooooo')
            // res.send(recordset1.recordset1)
          }
        });
      }
    }
  });
  });
// -------------------------------------------------------Status Dropdown-------------------------------------------
var request = new sql.Request();
router.get('/statusdata', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
        // create Request object
      // console.log(req.body)
      var sql = "select Distinct status from WorkOrderMain";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordset.recordset)
          res.send(recordset.recordset)
        }
      });
    });
});
// -------------------------------------------------------Search breeder--------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/searchbreeder', function(req, res) {
        // console.log(req.body.text)
        var sql1 = "Select MemberNumber, (Lastname+','+Firstname) as Membername from members where Firstname like '%"+req.body.text+"%' or lastname like '%"+req.body.text+"%'"
        // console.log(sql1);
        request.query(sql1, function (err, recordset1) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset1.recordset)
            res.send(recordset1.recordset)
          }
        });
      });
  });
//-------------------------------------------------------------Add Animal----------------------------------------------------
router.post('/addanimaldata', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    function removeUndefinedProps(obj1) {
      for (var prop in obj1) {
        if (obj1.hasOwnProperty(prop) && obj1[prop] === undefined) {
          delete obj1[prop];
        }
      }
      return obj1;
    }
    var obj1 = req.body;
    removeUndefinedProps(obj1)
  // console.log("-----------------------------------------------------------------------------------------------")
  // console.log(req.body)
  // console.log("-----------------------------------------------------------------------------------------------")
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request obj1ect
    var request = new sql.Request();
    request.input('MemberNo', sql.VarChar(100), req.body.memberno);
    request.input('Birthdate', sql.DateTime, req.body.bdate);
    request.input('PrivateHerd', sql.VarChar(255), req.body.herd);
    request.input('Misc', sql. VarChar(255), null);
    request.input('Animal', sql. VarChar(255), req.body.name);
    request.input('TypeService', sql.VarChar(10), req.body.sex);
    request.input('OriginalBreeder', sql.VarChar(255), req.body.memberno.split('-')[0].trim());
    request.input('Horns', sql.VarChar(10), req.body.horn);
    request.input('Description', sql.VarChar(255), null);
    request.input('Main', sql.VarChar(50), req.body.main);
    request.input('Second', sql.VarChar(50), req.body.second);
    request.input('Pattern', sql.VarChar(50), req.body.pattern);
    request.input('Markings', sql.VarChar(50), req.body.markings);
    request.input('Others', sql.VarChar(50), req.body.others);
    request.input('DNA', sql.VarChar(255), req.body.dnano);
    request.input('Stype', sql.VarChar(50), req.body.stype);
    request.input('Verified', sql.VarChar(50), null);
    request.input('Submitted', sql.VarChar(255), req.body.edate);
    request.input('Status', sql.VarChar(255), req.body.status);
    request.input('Dateregestered', sql.DateTime, req.body.rdate);
    request.input('Lastupdate', sql.DateTime, req.body.ldate);
    request.input('UpdatedBy', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('dnad', sql.Int, req.body.dnad);
    request.input('Notes', sql.VarChar(4000), req.body.note);
    request.input('Prt', sql.Int, 0);
    request.input('Sendtodna', sql.Int, req.body.senddna);
    request.input('EarTag', sql.VarChar(50), req.body.eid);
    request.input('PendingPrinting', sql.Int, req.body.print)
    request.input('paymentId', sql.Int, req.body.payment)
    request.input('type', sql.VarChar(10), 'Add')
    request.execute('_AdminanimalInsert', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        console.log(recordsets.recordset)
        res.send(recordsets.recordset)
      }
    });
  });
}
});
//----------------------------getPaymentTable for memeber payments in admin------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/getPaymentTable', function(req, res) {
    var sql = "SELECT r.RegNo, r.Animal, r.PrivateHerd, r.Birthdate,r.dateregestered, r.typeservice, r.Horns, eid.status as EIDOrder, SuperStakesNumber FROM Registration r left join RegistrationEID eid on r.regno = eid.regno and eid.paymentid =" + req.body.id + "left join SuperStakes ss on r.regno = ss.regno WHERE r.PaymentID  =" +req.body.id +"";
    //console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------Update Animal----------------------------------------------------
router.post('/updatefullanimaldata', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    function removeUndefinedProps(obj1) {
      for (var prop in obj1) {
        if (obj1.hasOwnProperty(prop) && obj1[prop] === undefined) {
          delete obj1[prop];
        }
      }
      return obj1;
    }
    var obj1 = req.body;
    removeUndefinedProps(obj1)
    // console.log(req.body)
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request obj1ect
    var request = new sql.Request();
    request.input('MemberNo', sql.Int, req.body.MemberNo);
    request.input('ID', sql.Int, req.body.ID);
    request.input('Birthdate', sql.DateTime, req.body.BirthDate);
    request.input('PrivateHerd', sql.VarChar(255), req.body.PrivateHerd);
    request.input('Misc', sql. VarChar(255), null);
    request.input('Animal', sql. VarChar(255), req.body.Animal);
    request.input('TypeService', sql.VarChar(10), req.body.TypeService);
    request.input('OriginalBreeder', sql.VarChar(255), req.body.MemberNo);
    request.input('Horns', sql.VarChar(10), req.body.Horns);
    request.input('type', sql.VarChar(10), 'Update');
    request.input('Description', sql.VarChar(255), req.body.Description);
    request.input('DNA', sql.VarChar(255), req.body.DNA);
    request.input('Stype', sql.VarChar(50), req.body.stype);
    request.input('Verified', sql.VarChar(50), null);
    request.input('Submitted', sql.VarChar(255), req.body.Submitted);
    request.input('Status', sql.VarChar(255), req.body.Status);
    request.input('Dateregestered', sql.DateTime, req.body.Dateregestered);
    request.input('Lastupdate', sql.DateTime, req.body.Lastupdate);
    request.input('UpdatedBy', sql.VarChar(50), req.session.admin[0].FirstName+' '+req.session.admin[0].LastName);
    request.input('dnad', sql.Int, req.body.DNAD);
    request.input('Notes', sql.VarChar(4000), req.body.RNotes);
    request.input('Prt', sql.Int, 0);
    request.input('Sendtodna', sql.Int, req.body.Sendtodna);
    request.input('EarTag', sql.VarChar(50), req.body.EarTag);
    request.input('PendingPrinting', sql.Int, req.body.PendingPrinting)
    request.input('paymentId', sql.Int, req.body.PaymentID)
    request.execute('_AdminanimalInsert', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.sendStatus(200);
    }
  });
  });
  }
});
  //-------------------------------------------------------------User Data------------------------------------
  router.get('/adminuserdata', function(req,res){
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      var fname = req.session.admin[0].FirstName;
      var lname = req.session.admin[0].LastName;
      var image = req.session.admin[0].Picture;
      var id = req.session.admin[0].UserID;
      var security = req.session.admin[0].SecurityLevel;
      // console.log(fname)
      // console.log(lname)
      // console.log(image)
      // console.log(id)
      // console.log(security)
      res.send({fname : fname,lname : lname,image : image,id : id, security : security})
    }
    else{
      req.session.reset();
      res.redirect('/admin');
    }
  })
  //-------------------------------------------------------------Edit Animal----------------------------------------------------
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editanimalsdata', function(req, res) {
      // console.log(req.body)
      var sql = "SELECT MemberNo, reg.RegNo,reg.ID, Animal, TypeService, PrivateHerd, BirthDate, DNA, Description , Horns, stype, reg.Notes As RNotes, Lastprinted, EarTag, Misc, Verified, Status , (SELECT MemberName FROM Members WHERE Members.MemberNumber = reg.OriginalBreeder) AS OriginalBreeder , reg.OriginalBreeder AS HiddenOriginalBreeder, [DNA'd] as DNAD, Sendtodna, DateSentToDna, Submitted , Dateregestered, Lastupdate, PendingPrinting, PaymentID, sold, reg.Updatedby AS Updatedby , YEAR(bc.CertificateDate) as CertYear, bsb.ProgramYear AS BSBProgramYear FROM Registration reg LEFT JOIN BreedersCertificate bc ON reg.regno = bc.sireregno LEFT JOIN BackSeatBuckers bsb ON reg.regno = bsb.regno WHERE reg.RegNo ='"+req.body.RegNo+"'";
      // console.log(sql)
      var sql1 = "SELECT Members.MemberNumber, Phone, Type, LastName + ', ' + FirstName AS MemberName, email, MemberNumber, AltPhone, updated, RanchName, Office, Members.UpdatedBy AS UpdatedBy2, Address, Fax, Members.Notes As MNotes, City, JoinDate, State, DueDate, Zip, PaidDate, Inactive FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE Registration.RegNo='"+req.body.RegNo+"'"
      var sql2 = "select A.ID,A.Animal,B.PrivateHerd as sireherd,C.PrivateHerd as damherd, A.Sire,(SELECT ANIMAL from Registration where RegNo=A.Sire) as sirname,A.Dam,(SELECT ANIMAL from Registration where RegNo=A.Dam) as damname,B.Sire as grandsire,(SELECT ANIMAL from Registration where RegNo=B.Sire) as grandsirname,(SELECT PrivateHerd from Registration where RegNo=B.sire) as grandsireherd,B.Dam as granddam,(SELECT ANIMAL from Registration where RegNo=B.dam) as granddamname,(SELECT PrivateHerd from Registration where RegNo=B.dam) as granddamherd,C.Sire as grandsire2,(SELECT ANIMAL from Registration where RegNo=C.Sire) as grandsirname2,(SELECT PrivateHerd from Registration where RegNo=C.sire) as grandsireherd2,C.Dam as granddam2,(SELECT ANIMAL from Registration where RegNo=C.dam) as granddamname2,(SELECT PrivateHerd from Registration where RegNo=C.dam) as granddamherd2 from Registration A join Registration B on B.RegNo=A.Sire join Registration C on C.RegNo=A.Dam  where A.RegNo='"+req.body.RegNo+"'"
      var sql3 = "SELECT Ranag_new AS Ranagainst,Animal,registration.memberno,ov.ID as VoucherId,ov.VoucherNo,ov.Notes VoucherNotes,PrivateHerd,TypeService,Qualified,Relationship,New,SampleID,RegistrationDNA.ID,Test,RegistrationDNA.SType,[Number of markers] AS Markers,[Number of exclusions] AS Exclusions,[Genotype?] AS Genotype FROM RegistrationDNA INNER JOIN Registration ON RegistrationDNA.Ranag_new = Registration.RegNo left join OffspringVouchers ov on ov.SireRegNo = cast(RegistrationDNA.Ranag_new as varchar(50)) and ov.offspringRegNo = cast('"+req.body.RegNo+"' as varchar(50)) WHERE (((RegistrationDNA.RelationShip = 'P') OR (RegistrationDNA.RelationShip = 'O')) AND (('"+req.body.RegNo+"' = Null) OR (RegistrationDNA.Regno ='"+req.body.RegNo+"')))"  
      var sql4 = "SELECT PrevMember, LastName + ', ' + FirstName AS MemberName, RanchName, SaleDate FROM RegistrationHistory INNER JOIN Members ON RegistrationHistory.PrevMember = Members.MemberNumber INNER JOIN Registration ON Registration.RegNo = RegistrationHistory.Regno WHERE Registration.RegNo ='"+req.body.RegNo+"'"
      var sql5 = "SELECT Registration.ID, RegNo, Animal, PBS_ID, Description, Birthdate, TypeService, MemberName FROM Registration INNER JOIN Members ON Registration.MemberNo = Members.MemberNumber WHERE ((Sire = '"+req.body.RegNo+"') OR (Dam = '"+req.body.RegNo+"'))"
      var sql6 = "select * from RegistrationEID where regno='"+req.body.RegNo+"'"
      var sql7 = "SELECT * FROM AnimalEarning WHERE RegNo = '"+req.body.RegNo+"'"
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          request.query(sql2, function (err, recordsets2) {
            request.query(sql3, function (err, recordsets3) {
              request.query(sql4, function (err, recordsets4) {
                request.query(sql5, function (err, recordsets5) {
                  request.query(sql6, function (err, recordsets6) {
                    request.query(sql7, function (err, recordsets7) {
                      if(err){
                        // console.log(err)
                        res.sendStatus(500);
                      }
                      else{
                        // console.log(recordsets.recordset);
                        res.send({a:recordsets?.recordset,b:recordsets1?.recordset,c:recordsets2?.recordset,d:recordsets3?.recordset,e:recordsets4?.recordset,f:recordsets5?.recordset,g:recordsets6?.recordset,h:recordsets7?.recordset})
                      }
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
});
  //-------------------------------------------------------------Update Print Edit Animal----------------------------------------------------
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updateprintanimal', function(req, res) {
      var sql = "Update Registration set Lastprinted=GETDATE() where RegNo="+req.body.RegNo+"";
      request.query(sql, function (err, recordsets) {        
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          res.sendStatus(200)
        }
      });
    });
  });
  //-------------------------------------------------------------Add Earnings----------------------------------------------------
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addearningsdata', function(req, res) {
      // console.log(req.body)
      var sql = "INSERT INTO AnimalEarning (RegNo, EventName, EventDate, Score, Placing, MoneyEarned) VALUES ("+req.body.editanimal.RegNo+",'"+req.body.addearnings.name+"', '"+req.body.addearnings.date+"', '"+req.body.addearnings.placing+"', "+req.body.addearnings.score+", "+req.body.addearnings.money+");select * from AnimalEarning where RegNo="+req.body.editanimal.RegNo+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {        
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          res.send(recordsets.recordset)
        }
      });
    });
  });
    //-------------------------------------------------------------Delete Earnings----------------------------------------------------
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deleteanimalearning', function(req, res) {
      var sql = "delete from AnimalEarning where AnimalEarningID="+req.body.AnimalEarningID+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {        
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          res.sendStatus(200)
        }
      });
    });
  });
  //-------------------------------------------------------------Update Earnings----------------------------------------------------
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updateaniearning', function(req, res) {
      var sql = "Update AnimalEarning set EventName='"+req.body.EventName+"',EventDate='"+req.body.EventDate+"',Score="+req.body.Score+",Placing="+req.body.Placing+",MoneyEarned="+req.body.MoneyEarned+" where AnimalEarningID="+req.body.AnimalEarningID+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {        
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          res.sendStatus(200)
        }
      });
    });
  });
//--------------------------------------------------------------Reports--------------------------------------------------------------
//----------------------------------------------------------Ad Hoc Report-----------------------------------------------------
// -------------------------------------------------------Member Inventory--------------------------------------------------------
router.get('/memberinventoryreport', function(req, res) {
 if(req.session && req.session.admin){
  res.locals.admin = req.session.admin;
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.execute('_MemberInventoryReport', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
}
});
// -------------------------------------------------------Member Due Date--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/memberduedatereport', function(req, res) {
    var sdate = moment(req.body.sdate).format('YYYY-MM-DD');
    var edate = moment(req.body.edate).format('YYYY-MM-DD');
    var sql = "SELECT * FROM Members WHERE (DueDate BETWEEN '"+sdate+"' AND '"+edate+"') AND (Type <> 'Lifetime')";
    //console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Member Start Date--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/memberstartdatereport', function(req, res) {
    var sdate = moment(req.body.sdate).format('YYYY-MM-DD');
    var edate = moment(req.body.edate).format('YYYY-MM-DD');
    var sql = "SELECT * FROM Members WHERE (JoinDate BETWEEN '"+sdate+"' AND '"+edate+"')";
    //console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Animal Birth Date--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/animalbirthdatereport', function(req, res) {
    var sdate = moment(req.body.sdate).format('YYYY-MM-DD');
    var edate = moment(req.body.edate).format('YYYY-MM-DD');
    var sql = "SELECT RegNo,Animal,Birthdate,PrivateHerd,TypeService,Description,Dateregestered,MemberNo,[DNA'd] as DNAd FROM Registration WHERE (Birthdate BETWEEN '"+sdate+"' AND '"+edate+"')";
    //console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Animal Registration Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/animalregreport', function(req, res) {
    var asdate = moment(req.body.asdate).format('YYYY-MM-DD');
    // console.log(asdate) 
    var aedate = moment(req.body.aedate).format('YYYY-MM-DD');
    // console.log(aedate)
    var sql = "SELECT RegNo,Animal,Dateregestered,PrivateHerd,TypeService,Description,MemberNo,[DNA'd] as DNAd FROM Registration WHERE ((Dateregestered BETWEEN '"+asdate+"' AND '"+aedate+"') AND (Dateregestered IS NOT NULL))";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Membership Month Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/membershipbymonthreport', function(req, res) {
    var sql = "SELECT * FROM Members WHERE ((MONTH(JoinDate) = '"+req.body.month+"') AND (YEAR(JoinDate) = '"+req.body.year+"'))";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Print Member Inventory--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/printinventory', function(req, res) {
    var sql = "select LastName+','+FirstName Membername,Region,RanchName,Address,City,State,Zip,Phone,AltPhone,DueDate,PaidDate,Email,Type,updated,m.Updatedby,r.RegNo,r.Animal,r.TypeService,r.Birthdate,r.Sire,r.Dam,r.DNA,r.PrivateHerd,m.MemberNumber from Members m join Registration r on m.MemberNumber=r.MemberNo where MemberNo="+req.body.MemberNumber+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Membership Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/membershipreport', function(req, res) {
    var sql = "Select * from Members Where Type='"+req.body.type+"'";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/labelcertireport', function(req, res) {
    var sql = "SELECT DISTINCT MemberNumber, LastName + ', ' + FirstName AS MemberName FROM Members INNER JOIN Registration ON Members.MemberNumber = Registration.MemberNo WHERE (PendingPrinting = 1)";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -----------------------------------------------------Update Label Report--------------------------------------------------------
router.post('/updatelabelcertireport', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNo', sql.Int, req.body.member);
    request.input('Action', sql.VarChar(10), 'Add');
    request.execute('_UpdateMemprintpending', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -----------------------------------------------------Update Label Report--------------------------------------------------------
router.post('/removelabelcertireport', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNo', sql.Int, req.body.MemberNumber);
    request.input('Action', sql.VarChar(10), 'Delete');
    request.execute('_UpdateMemprintpending', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.sendStatus(200);
    }
  });
  });
});
// -------------------------------------------------------Print Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/printlabelcertireport', function(req, res) {
    var sql = "select Distinct FirstName,LastName,Address,City,State,Zip,Country from Members INNER JOIN Registration ON Members.MemberNumber = Registration.MemberNo WHERE (PendingPrinting = 1)";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Failed Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/labelfailedreport', function(req, res) {
    var sql = "SELECT Members.LastName + ', ' + Members.FirstName AS MemberName FROM Members INNER JOIN Registration ON Members.MemberNumber = Registration.MemberNo INNER JOIN tempLetterOfFailedTesting ON Registration.RegNo = tempLetterOfFailedTesting.RegNo";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Print Failed Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/printfaillabelcertireport', function(req, res) {
    var sql = "select Distinct FirstName,LastName,Address,City,State,Zip,Country from Members INNER JOIN Registration ON Members.MemberNumber = Registration.MemberNo INNER JOIN tempLetterOfFailedTesting ON Registration.RegNo = tempLetterOfFailedTesting.RegNo";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Non Match Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/labelnomatchreport', function(req, res) {
    var sql = "SELECT distinct Members.LastName + ', ' + Members.FirstName AS MemberName FROM Members INNER JOIN Registration ON Members.MemberNumber = Registration.MemberNo INNER JOIN tempLetterOfNonMatch ON Registration.RegNo = tempLetterOfNonMatch.RegNo";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Print Non Match Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/printnonmatchlabelreport', function(req, res) {
    var sql = "select Distinct FirstName,LastName,Address,City,State,Zip,Country from Members INNER JOIN Registration ON Members.MemberNumber = Registration.MemberNo INNER JOIN tempLetterOfNonMatch ON Registration.RegNo = tempLetterOfNonMatch.RegNo";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Membership Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/labelreportmembership', function(req, res) {
    var sql = "select FirstName,LastName,Address,City,State,Zip,Country from Members WHERE (Type = '"+req.body.type+"')";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Membership Cards Search--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/membershipcardsearch', function(req, res) {
    var sql = "select * from Members where PaidDate between '"+req.body.from+"' and '"+req.body.to+"'";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Membership Cards Print--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/membershipcardprint', function(req, res) {
    var sql = "select MemberNumber,LastName+' '+Firstname as Mn,Type,Isnull(Format(Duedate,'MM/dd/yyyy'),'') DueDate from Members where PaidDate between '"+req.body.from+"' and '"+req.body.to+"' and Isnull(gopaperless,'')<>1";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Range Of Number Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/rangeofnumber', function(req, res) {
    var sql = "select FirstName,LastName,Address,City,State,Zip,Country from Members WHERE (MemberNumber BETWEEN "+req.body.from+" AND "+req.body.to+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Search Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/searchmemberreport', function(req, res) {
    var sql = "SELECT tempMembershipLabelID, LastName + ', ' + FirstName AS MemberName, tempMembershipLabel.MemberNumber FROM tempMembershipLabel INNER JOIN Members ON tempMembershipLabel.MemberNumber = Members.MemberNumber";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -----------------------------------------------------Label Search Report--------------------------------------------------------
router.post('/labelsearchreport', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNo', sql.Int, req.body.number);
    request.input('Action', sql.VarChar(10), 'Add');
    request.execute('_InstempmemberLabel', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -----------------------------------------------------Remove Search Report--------------------------------------------------------
router.post('/removesearchlabel', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNo', sql.Int, req.body.MemberNumber);
    request.input('Action', sql.VarChar(10), 'Delete');
    request.execute('_InstempmemberLabel', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.sendStatus(200);
    }
  });
  });
});
// -------------------------------------------------------Print Search Label Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/printsearchlabelreport', function(req, res) {
    var sql = "select FirstName,LastName,Address,City,State,Zip,Country FROM tempMembershipLabel INNER JOIN Members ON tempMembershipLabel.MemberNumber = Members.MemberNumber";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//------------------------------------------------------------Letter of Failed testing-----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/failedcount', function(req, res) {
    var sql = "SELECT COUNT(LetterOfFailedTestingID) AS ID FROM tempLetterOfFailedTesting";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------Failed letter list------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/failedletter', function(req, res) {
    var sql = "Select Distinct (M.LastName+','+M.FirstName) as MemberName, M.MemberNumber from  tempLetterOfFailedTesting t join Registration r on t.RegNo=r.RegNo join Members m on r.MemberNo=m.MemberNumber";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset.length);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------Print Failed letter------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/printfailedletter', function(req, res) {
    var sql = "Select Format(Getdate(),'MM/dd/yyyy') as tdate, (M.LastName+','+M.FirstName) as Membername,M.UserName from Members M where M.MemberNumber="+req.body.MemberNumber+"";
    var sql1="Select R.Animal,R.PrivateHerd,T.RegNo  from  tempLetterOfFailedTesting t join Registration r on t.RegNo=r.RegNo join Members m on r.MemberNo=m.MemberNumber where M.MemberNumber="+req.body.MemberNumber+""
    // console.log(sql);
    request.query(sql, function (err, recordsets) { 
      request.query(sql1, function (err, recordsets1) {       
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send({data : recordsets.recordset, table : recordsets1.recordset})
      }
    });
    });
  });
});
// -------------------------------------------------------Failed Letter insert Search--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/failedlettersearch', function(req, res) {
    var sql = "Insert into tempLetterOfFailedTesting(RegNo) select RegNo from  Registration WHERE RegNo = "+req.body.number+" AND Status like 'Failed Testing%'";
    var sql1="Select R.Animal,R.PrivateHerd,T.RegNo  from  tempLetterOfFailedTesting t join Registration r on t.RegNo=r.RegNo join Members m on r.MemberNo=m.MemberNumber where M.MemberNumber=(Select MemberNo from Registration where Regno="+req.body.number+")"
    // console.log(sql1);
    request.query(sql, function (err, recordsets) {
      request.query(sql1, function (err, recordsets1) {        
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets1.recordset)
      }
    });
    });
  });  
});
// -------------------------------------------------------Failed Letter view Search--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/failedletterview', function(req, res) {
    var sql = "SELECT Registration.MemberNo, tempLetterOfFailedTesting.RegNo, Animal, PrivateHerd FROM tempLetterOfFailedTesting INNER JOIN Registration ON tempLetterOfFailedTesting.RegNo = Registration.RegNo";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Failed Letter Delete--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/failedletterdelete', function(req, res) {
    // console.log(req.body)
    var sql = "Delete from tempLetterOfFailedTesting where RegNo="+req.body.RegNo+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200)
      }
    });
  });
});
//-------------------------------------------------------------Print Failed letter2------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/failedLetterprints', function(req, res) {
    var sql = "Select Format(Getdate(),'MM/dd/yyyy') as tdate, (M.LastName+','+M.FirstName) as Membername,M.UserName from Members M where M.MemberNumber="+req.body.MemberNo+"";
    var sql1="Select R.Animal,R.PrivateHerd,T.RegNo  from  tempLetterOfFailedTesting t join Registration r on t.RegNo=r.RegNo join Members m on r.MemberNo=m.MemberNumber where M.MemberNumber="+req.body.MemberNo+""
    // console.log(sql);
    request.query(sql, function (err, recordsets) { 
      request.query(sql1, function (err, recordsets1) {       
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send({data1 : recordsets.recordset, table1 : recordsets1.recordset})
      }
    });
    });
  });
});
// -------------------------------------------------------Failed Letter Range--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/regnorange', function(req, res) {
    var sql = "Insert into tempLetterOfFailedTesting(RegNo) select RegNo from  Registration WHERE (RegNo Between "+req.body.from+" and "+req.body.to+") AND Status like 'Failed Testing%'";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Failed Letter Regno Range view--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/failedletterregnorange', function(req, res) {
    var sql = "SELECT Registration.MemberNo, tempLetterOfFailedTesting.RegNo, Animal, PrivateHerd FROM tempLetterOfFailedTesting INNER JOIN Registration ON tempLetterOfFailedTesting.RegNo = Registration.RegNo";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Failed Letter Range Delete--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/regnorangedelete', function(req, res) {
    var sql = "Delete from tempLetterOfFailedTesting where RegNo="+req.body.RegNo+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200)
      }
    });
  });
});
// -------------------------------------------------------DNA Testing--------------------------------------------------------
router.post('/dnatesting', function(req, res) {
  // console.log( moment(req.body.from).format('MM/DD/YYYY'))
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    // console.log(req.body)
    var request = new sql.Request();
    request.input('date', sql.Int, req.body.date);
    request.input('StartDate', sql.DateTime, req.body.from);
    request.input('EndDate', sql.DateTime, req.body.to);
    request.input('Status', sql.VarChar(200), req.body.status);
    request.execute('_DNAtesting_testing', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Cattle Service Dropdown--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/cattleservice', function(req, res) {
    var sql = "select * from ExportTarget where category = 'DNA' order by DefaultExport desc";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Batch List Dropdown--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/batchlist', function(req, res) {
    var sql = "SELECT DISTINCT TOP 50 DNABatch.BatchID, BatchFileName, FileName FROM dbo.RegistrationDNA INNER JOIN DNABatch ON RegistrationDNA.BatchID = DNABatch.BatchID WHERE (DNABatch.BatchID <> 0) ORDER BY DNABatch.BatchID DESC";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Batch DNA Data--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showbatchdata', function(req, res) {
    // console.log(req.body);
    var sql = "SELECT RegistrationDNA.ID as RegNoID,'2001396'as Owner,CAST(RegistrationDNA.Regno AS int)as Request,RegistrationDNA.Test,RegistrationDNA.Relationship,Registration.DNA as SampleID,RegistrationDNA.Ranag_new as RegNo,Registration.PrivateHerd as TagTattoo,Registration.Animal,Registration.TypeService as Sex,'RL' as Brd,RegistrationDNA.SType,Registration.Birthdate,'' as BarCode,(Case when RegistrationDNA.New=0 then 'C' Else 'R' end) as New,Registration.Status FROM dbo.RegistrationDNA INNER JOIN dbo.Registration ON dbo.RegistrationDNA.Ranag_new = dbo.Registration.RegNo  where RegistrationDNA.BatchID="+req.body.batch+"";
    var sql1= "SELECT FileName FROM dbo.RegistrationDNA INNER JOIN DNABatch ON RegistrationDNA.BatchID = DNABatch.BatchID Where RegistrationDNA.BatchID="+req.body.batch+""
    request.query(sql, function (err, recordsets) {        
      // console.log(sql);
      request.query(sql1, function (err, recordsets1) {  
        // console.log(sql1);
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send({data : recordsets.recordset, file : recordsets1.recordset});
      }
    });
    });
  });
});
//--------------------------------------------------------------------Send PS DNA Testing-----------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/dnatestingcsvmail', function(req, res) {
      if(req.body.status == 'Pending-Sent'){
        // console.log(req.body.status)
        var sql = "SELECT FileName FROM dbo.RegistrationDNA INNER JOIN DNABatch ON RegistrationDNA.BatchID = DNABatch.BatchID Where RegistrationDNA.BatchID="+req.body.batch+"";
        // console.log(sql);
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets.recordset[0].FileName)
            var transporter = nodemailer.createTransport({
              service: 'gmail',
              auth: {
                user: 'abbi@integrity-tek.com',
                pass: 'Abbi@2021'
              }
            });

            var mailOptions = {
              from: 'no-reply',
              to: 'ericjohnton@gmail.com',
              cc: 'marlissa@pbr.com',
              subject: 'Lab Testing '+moment().format('MM-DD-yyyy'),
              text: "Please check the attachment 😊",
              attachments: [
              {
                filename: recordsets.recordset[0].FileName,
                path: 'http://office.americanbuckingbull.com/DNATesting/Send_DNA_CSV/'+recordsets.recordset[0].FileName
              }
              ]
            };
            transporter.sendMail(mailOptions, function(error, info){
              if (error) {
                // console.log(error);
              } else {
                // console.log('Email sent: ' + info.response);
                res.sendStatus(200);
              }
            });
          }
        });
      }
      else{
        // console.log(req.body.status)
        var year = moment().format('yyyy');
        var month = moment().format('MM');
        var day = moment().format('DD');
        var sql = "SELECT Child.ID,RegistrationDNA.Regno,RegistrationDNA.Relationship,RegistrationDNA.Test,RegistrationDNA.SType,child.Animal,Child.Description,Child.Status,Child.Birthdate,Members.MemberName FROM RegistrationDNA INNER JOIN Registration child ON RegistrationDNA.Regno = Child.RegNo INNER JOIN Members ON Child.MemberNo = Members.MemberNumber INNER JOIN Registration Parent on RegistrationDNA.Ranag_New = Parent.RegNo WHERE (RegistrationDNA.Sent = 0 AND Child.Sendtodna = 1AND ((Child.Status = '"+req.body.status+"' OR '"+req.body.status+"' is NULL or ('"+req.body.status+"' = 'Pending'and Child.Status = 'Waiting For Dam Auth.')) AND (Child.Status  not like 'Waiting For Samples%' AND Child.Status <> 'Cataloged'AND (Child.Status <> 'Waiting For Dam Auth.'or (Child.MemberNo = parent.MemberNo or parent.typeservice like '%B')))AND(Child.Animal LIKE '%'  OR Members.MemberName LIKE '%' )))ORDER BY RegistrationDNA.Regno, RegistrationDNA.Relationship";
        request.query(sql, function (err, recordsets) {
          var sql1 = "INSERT INTO DNABatch(SendDate) VALUES (Getdate()); select @@IDENTITY as BatchID"
          request.query(sql1, function (err, recordsets1) {
            var sql2 = "UPDATE DNABatch SET BatchFileName = '"+month+"_"+day+"_"+year+"-DNASample_"+recordsets1.recordset[0].BatchID+"', FileName = '"+month+day+year+"_DNASample_"+recordsets1.recordset[0].BatchID+"' WHERE (BatchID = "+recordsets1.recordset[0].BatchID+")"
            request.query(sql2, function (err, recordsets2) {
              var sql3 = "SELECT FileName FROM  DNABatch  Where BatchID="+recordsets1.recordset[0].BatchID+"";
        // console.log(sql3)
        request.query(sql3, function (err, recordset) {
        // console.log(recordset.recordset[0].FileName)
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          var fields = ['ID', 'Regno', 'Relationship','Test', 'SType', 'Animal','Description', 'Status', 'Birthdate', 'MemberName'];
          var data1 = recordsets.recordset;
          var csv = json2csv.parse(data1, {fields: fields });
          fs.writeFile('public/uploads/'+month+day+year+'_DNASample_'+recordsets1.recordset[0].BatchID+'.txt', csv, function(err) {
            if(err){
              // console.log(err)
            }
            else{
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                  pass: 'Abbi@2021'
                }
              });
              var mailOptions = {
                from: 'no-reply',
                to: 'abbi@integrity-tek.com',
                subject: 'Lab Testing '+moment().format('MM-DD-yyyy'),
                text: "Please check the attachment 😊",
                attachments: [
                {
                  filename: recordset.recordset[0].FileName+".txt",
                  path: 'public/uploads/'+recordset.recordset[0].FileName+".txt"
                }
                ]
              };
              transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                  // console.log(error);
                } else {
                  // console.log('Email sent: ' + info.response);
                  res.sendStatus(200);
                }
              });
            }
          });
        }
      });
      });
          });
        });
      }
    });
});
// -------------------------------------------------------DNA Verify--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/dnaverifydata', function(req, res) {
    // console.log(req.body)
    var sql = "select distinct ranag_new from registrationDNA where regno in (select * from SplitString(Replace('"+req.body.offspring+"',char(10),','),',')) and relationship='P'";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        var data = recordsets.recordset;
        var result = data.map(function(val) {
          return val.ranag_new;
        }).join('\n');
        console.log(result);
        res.send(result);
      }
    });
  });
});
//--------------------------------------------------------Get DNA Results------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/showdnares', function(req, res) {
    // console.log(req.body)
    var sql = "select * from labImport_tempGEN";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Release To DB------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/releasedb', function(req, res) {
    // console.log(req.body)
    var date = moment().format('MM-DD-YYYY');
    var sql = "UPDATE g SET Results = tmp.ResultsAllele, [Date Tested] = GETDATE() FROM dbo.RegistrationGeno g JOIN dbo.labImport_tempGEN tmp ON g.[Case] = tmp.[Case] AND g.SampleID = tmp.SampleID AND g.Marker = tmp.Marker";
    var sql1 = "INSERT INTO dbo.RegistrationGeno([Association Code], [Case], [SampleID], [Marker], [Results], [Date Tested]) SELECT tmp.AssociationCode, tmp.[Case], tmp.SampleID, tmp.Marker, tmp.ResultsAllele, GETDATE() FROM dbo.labImport_tempGEN tmp LEFT JOIN dbo.RegistrationGeno g ON tmp.[Case] = g.[Case] AND tmp.SampleID = g.SampleID AND tmp.Marker = g.Marker";
    var sql2="SELECT RegNo, Animal, Sire, Dam FROM dbo.Registration WHERE UpdatedBy = 'DNA Import' AND Status = 'Research' AND LastUpdate >= DATEADD(MINUTE,-5,GETDATE())";
    console.log(sql,'sqllll');
    console.log(sql1,'sqlll11');
    console.log(sql2,'')
    request.query(sql, function (err, recordsets) {
    request.query(sql1, function (err, recordsets1) { 
    request.query(sql2, function (err, recordsets2) {  
    var data = recordsets2.recordset; 
    console.log(data,'datatatata')   
      if(err){
        console.log(err,'errorrr')
        res.sendStatus(500);
      }
      else{

        var transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: 'abbi@integrity-tek.com',
            pass: 'Abbi@2021'
          },
          tls: { rejectUnauthorized: false }
        });

        var mailOptions = {
          from: 'no-reply',
          to: 'abbi@integrity-tek.com',
          subject: 'DNA Testing:  Import Research Animals : '+date,
          html : 'The following animals have been set to a Research status : '+data
        };

        transporter.sendMail(mailOptions, function(error, info){
          if (error) {
            console.log(error,'errorr')
        res.sendStatus(500);
      } else {
        res.sendStatus(200);
      }
    });
      }
    });
  });
     });
  });
});
//--------------------------------------------------------Clear Temp------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/cleartemp', function(req, res) {
    // console.log(req.body)
    var sql = "DELETE FROM dbo.labImport_tempACK;DELETE FROM dbo.labImport_tempPar;DELETE FROM dbo.labImport_tempGEN";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.sendStatus(200);
      }
    });
  });
});
//-----------------------------------DNA Test Result---------------------------------------------------
// var storage = multer.diskStorage({ //multers disk storage settings
//   destination: function (req, file, cb) {
//     cb(null, 'public/uploads/DNA')
//   },
//   filename: function (req, file, cb) {
//     cb(null, file.originalname)
//   }
// });
// var upload = multer({ //multer settings
//   storage: storage,
// });

var storage = multer.diskStorage({
  destination: './public/uploads/DNA',

  filename: function (req, file, cb) {
      cb(null, file.originalname.replace(path.extname(file.originalname), "") + '-' + Date.now() + path.extname(file.originalname))
  }
})

var upload = multer({ storage: storage })

router.post('/dnatestres',upload.single('file'), function(req, res) {
  console.log(req.file,'reqfileeee')
  sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  const csvFilePath=req.file.path;
  const csv=require('csvtojson')
  csv().fromFile(csvFilePath).then((jsonObj)=>{
    var data = JSON.stringify(jsonObj);
    // console.log(jsonObj)
    request.input('data', sql.VarChar('max'), data);
    request.execute('ImportLabRes', function(err, recordsets, returnValue, affected) {
      if(err){
        console.log(err);
      }
      else{
        console.log('inside')
res.sendStatus(200);
      }
    });
  });
});
});
//-----------------------------------------------------Eid Order Import-----------------------------------------
// router.post('/eidordeimport', function(req, res) {
//   sql.connect(config, function (err) { 
//     if (err) console.log(err);
//     // create Request object
//     var request = new sql.Request();
//     for(i=0; i< req.body.excelRows.length;i++){
//     request.input('PO_Number', sql.VarChar(20), req.body.excelRows[i].PO_Number);
//     request.input('EIDNumber', sql.VarChar(20), req.body.excelRows[i].EIDNumber);
//     request.input('BrandNo', sql.VarChar(20), req.body.excelRows[i].BrandNo);
//     request.input('Type', sql.VarChar(15), req.body.fileType);
//     var sqlselect @Product=Product,@qty=Quantity,@BreederNo=BreederNo,@Regno=RegNo 
//     from EIDOrderExport where PO_Number=@PO_Number and HerdNo=@BrandNo;

//   }
//   });
// });
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/eidordeimport', function(req, res) {
    console.log(req.body.excelRows,'reqbodyyyyyy');
    for(i=0; i< req.body.excelRows.length;i++){
    var sql = "Declare @Product Nvarchar(20),@qty int,@BreederNo int,@Regno int;select @Product=Product,@qty=Quantity,@BreederNo=BreederNo,@Regno=RegNo from EIDOrderExport where PO_Number='" + req.body.excelRows[i].PO_Number +"'and  HerdNo='" + req.body.excelRows[i].BrandNo + "';Insert into EIDOrderImport(PO_Number,Product,Quantity,BreederNo,RegNo,HerdNo,[EID Number]) values('" + req.body.excelRows[i].PO_Number + "',@Product,@qty,@BreederNo,@Regno, '" + req.body.excelRows[i].BrandNo + "','" + req.body.excelRows[i].EIDNumber + "');Update Registration set EarTag='"+req.body.excelRows[i].EIDNumber+"' where RegNo=@Regno and MemberNo=@BreederNo and PrivateHerd='"+req.body.excelRows[i].BrandNo+"';";
    console.log(sql,'sqlll');
    request.query(sql, function (err, recordsets) {        
      if(err){
        console.log(err,'err')
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  }
  if(req.body.fileType == 'Reorder') {
    var sql1 = "update eid set eid.notes = COALESCE(cast(eid.notes as varchar(8000)) + ' -- ', '') + 'Reorder Imported on ' + cast(getdate() as varchar(25)) from RegistrationEID eid join RegistrationEIDReorder ro on eid.regtagid =ro.regtagid join EIDOrderImport i on eid.regno = i.regno where ro.paymentid = i.po_number and ro.ReorderStatus = 'Ordered';";
    var sql2 = "update ro set ro.ReorderStatus = 'Received' from RegistrationEID eid join RegistrationEIDReorder ro on eid.regtagid =ro.regtagid join EIDOrderImport i on eid.regno = i.regno where ro.paymentid = i.po_number and ro.ReorderStatus = 'Ordered'";
    request.query(sql1, function (err, recordsets1) { 
      request.query(sql2, function (err, recordsets2) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  })
  }
  });
});
//----------------------------------------------------Get Results DNA verify----------------------------------------
router.post('/dnaverifysubmit', function(req, res) {
  // var data = req.body.parent;
  // var result = data.map(function(val) {
  //   return val.ranag_new;
  // }).join(',');
  // console.log(result);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('Regno_off', sql.VarChar(500), req.body.offspring.offspring);
    request.input('Regno_par', sql.VarChar(500), req.body.parent);
    request.execute('_getresults', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//----------------------------------------------------Check Single----------------------------------------
router.post('/checksingle', function(req, res) {
  // console.log(req.body.reg.RegNo);
  // console.log(req.body.txtreg.txtRegNo);
  // console.log(req.body.num);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('RegNo', sql.Int, req.body.reg.RegNo);
    request.input('txtRegNo', sql.Int, req.body.txtreg.txtRegNo);
    request.input('Type', sql.VarChar(10), 'insert');
    request.execute('_SaveSingleAnimal', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//----------------------------------------------------Check Multiple----------------------------------------
router.post('/checkml', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    if(req.body.multiplelist.check == 1){
      // console.log('if')
      request.input('RegNo', sql.Int, req.body.editanimal.RegNo);
      request.input('txtRegNo', sql.Int, req.body.multiplelist.RegNo);
      request.input('Type', sql.VarChar(10), 'insert');
      request.execute('_SaveSingleAnimal', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else if(req.body.multiplelist.check == 0){
      // console.log('else')
      request.input('RegNo', sql.Int, req.body.editanimal.RegNo);
      request.input('txtRegNo', sql.Int, req.body.multiplelist.RegNo);
      request.input('Type', sql.VarChar(10), 'delete');
      request.execute('_SaveSingleAnimal', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    }
    else{
      res.sendStatis(500);
    }
  });
});
//--------------------------------------------------------Adhoc members---------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/adhocmembers', function(req, res) {
    // console.log(req.body.event)
    var sql = "Select Table_Name, Column_Name, Data_Type, isnull(Character_Maximum_Length,0) as Maxlength from INFORMATION_SCHEMA.COLUMNS where Table_Name = '"+req.body.event+"' order by ordinal_position";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Adhoc registration---------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/adhocregistration', function(req, res) {
    // console.log(req.body.event)
    var sql = "Select Table_Name, Column_Name, Data_Type, isnull(Character_Maximum_Length,0) as Maxlength from INFORMATION_SCHEMA.COLUMNS where Table_Name = '"+req.body.event+"' order by ordinal_position";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Adhoc payments---------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/adhocpayments', function(req, res) {
    // console.log(req.body.event)
    var sql = "Select Table_Name, Column_Name, Data_Type, isnull(Character_Maximum_Length,0) as Maxlength from INFORMATION_SCHEMA.COLUMNS where Table_Name = '"+req.body.event+"' order by ordinal_position";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Adhoc eventsmember---------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/adhoceventsmember', function(req, res) {
    // console.log(req.body.event)
    var sql = "Select Table_Name, Column_Name, Data_Type, isnull(Character_Maximum_Length,0) as Maxlength from INFORMATION_SCHEMA.COLUMNS where Table_Name = '"+req.body.event+"' order by ordinal_position";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Adhoc eventsanimal---------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/adhoceventsanimal', function(req, res) {
    // console.log(req.body.event)
    var sql = "Select Table_Name, Column_Name, Data_Type, isnull(Character_Maximum_Length,0) as Maxlength from INFORMATION_SCHEMA.COLUMNS where Table_Name = '"+req.body.event+"' order by ordinal_position";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Adhoc events---------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/adhocevents', function(req, res) {
    // console.log(req.body.event)
    var sql = "Select Table_Name, Column_Name, Data_Type, isnull(Character_Maximum_Length,0) as Maxlength from INFORMATION_SCHEMA.COLUMNS where Table_Name = '"+req.body.event+"' order by ordinal_position";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Adhoc Next---------------------------------------------------------------
router.post('/adhocnext', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('table', sql.VarChar(500), req.body.tables);
    request.input('columns', sql.VarChar(500), req.body.nextarray);
    request.execute('prepselstmt', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset[0].col)
        res.send({col : recordsets.recordset[0].col, stmt : recordsets.recordset[0].stmt, tbl : recordsets.recordset[0].tbl});
      }
    });
  });
});
//--------------------------------------------------------Get Records---------------------------------------------------------------
router.post('/getrecords', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('stmt', sql.VarChar(8000), req.body.stmt);
    request.input('type', sql.VarChar(10), 'getrec');
    request.execute('runadhocreport', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Get Count---------------------------------------------------------------
router.post('/getcount', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('stmt', sql.VarChar(8000), req.body.stmt);
    request.input('type', sql.VarChar(10), 'getcount');
    request.execute('runadhocreport', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Get Records1---------------------------------------------------------------
router.post('/getrecords1', function(req, res) {
  // console.log(req.body.stmt.ID[0]);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('ID', sql.Int, req.body.stmt.ID[0]);
    request.input('type', sql.VarChar(10), 'getrec');
    request.execute('load_runadhocreport', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Get Count1---------------------------------------------------------------
router.post('/getcount1', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('ID', 'stmt', sql.Int, req.body.stmt.ID);
    request.input('type', sql.VarChar(10), 'getcount');
    request.execute('load_runadhocreport', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Save Adhoc---------------------------------------------------------------
router.post('/saveadhoc', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('stmt', sql.VarChar(8000), req.body.stmt);
    request.input('Qname', sql.VarChar(100), req.body.query.name);
    request.input('type', sql.VarChar(10), 'save');
    request.execute('load_save_adhocreport', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Load Adhoc--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/loadadhoc', function(req, res) {
    // console.log(req.body)
    var sql = "select * from tbladhocreport where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        var sql1 = "select * from SplitString('"+recordsets.recordset[0].sortcols+"',',')"
        var sql2 = "select * from SplitString('"+recordsets.recordset[0].filtercols+"',',')"
        var sql3 = "select Trim(Substring(ltrim(value),1,charindex(' ',ltrim(value)))) as col,Trim(REVERSE(SUBSTRING(Reverse(value),1,4))) as [asc] from SplitString('"+recordsets.recordset[0].Sort+"',',')"
        // console.log(sql3)
        var sql4 = "select Trim(Substring(ltrim(value),1,charindex(' ',ltrim(value)))) as col,Trim(Substring(ltrim(value),charindex(' ',ltrim(value))+1,2)) as equal,Trim(REVERSE(SUBSTRING(Reverse(value),1,CHARINDEX(' ',Reverse(value))))) as value from SplitString('"+recordsets.recordset[0].Filter+"',',')"
        var sql5="select SUBSTRING(value,CHARINDEX('.',value)+1,LEN(value)) as head from SplitString('"+recordsets.recordset[0].sortcols+"',',')"
        request.query(sql1, function (err, recordsets1) {
          request.query(sql2, function (err, recordsets2) {
            request.query(sql3, function (err, recordsets3) {
              request.query(sql4, function (err, recordsets4) { 
                request.query(sql5, function (err, recordsets5) {        
                  if(err){
                    // console.log(err)
                    res.sendStatus(500);
                  }
                  else{
            // console.log(recordsets1.recordset)
            // console.log(recordsets2.recordset)
            // console.log(recordsets3.recordset)
            // console.log(recordsets4.recordset)
            // console.log(recordsets5.recordset)
            res.send({sort : recordsets1.recordset, filter : recordsets2.recordset, sor : recordsets3.recordset, fil : recordsets4.recordset, head : recordsets5.recordset});
          }
        });
              });
            });
          });
        });
      }
    });
  });
});
// -------------------------------------------------------Add Sort--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/addsort', function(req, res) {
    // console.log(req.body)
    var sql = "Select *  from SplitString('"+req.body.col+"',',')";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Truncate SF--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/trunsf', function(req, res) {
    // console.log(req.body)
    var sql = "Truncate table tempadhocsort;Truncate table tempadhocFilter;";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Select Adhoc--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/selectadhoc', function(req, res) {
    var sql = "Select ID,Qname from tbladhocreport order by Qname";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Add Filter--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/addfilter', function(req, res) {
    // console.log(req.body)
    var sql = "Select Table_Name+'.'+Column_Name as col from INFORMATION_SCHEMA.COLUMNS where Table_Name in(select value from SplitString('"+req.body.tbl+"',',')) order by ordinal_position";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Delete Adhoc--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deleteadhoc', function(req, res) {
    // console.log(req.body)
    var sql = "Delete from tbladhocreport Where ID="+req.body.ID+";Select ID,Qname from tbladhocreport order by Qname";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Save Sort--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/savesort', function(req, res) {
    // console.log(req.body)
    var sql = "Insert into tempadhocsort(col,[asc])values('"+req.body.col+"','"+req.body.asc+"');select * from tempadhocsort";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Save Filter--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/savefilter', function(req, res) {
    // console.log(req.body)
    var sql = "Insert into tempadhocFilter(col,equal,value) values('"+req.body.col+"','"+req.body.equal+"','"+req.body.value+"');select * from tempadhocFilter";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Delete Sort--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletesort', function(req, res) {
    // console.log(req.body)
    var sql = "Delete from tempadhocsort where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200)
      }
    });
  });
});
// -------------------------------------------------------Delete Filter--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletefilter', function(req, res) {
    // console.log(req.body)
    var sql = "Delete from tempadhocFilter where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Add new list--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/addtonewlist', function(req, res) {
    // console.log(req.body)
    var sql = "IF NOT EXISTS (SELECT 1 FROM quicklist where listname = '"+req.body.list.quick+"' and memberno is null) insert into QuickList(ListName) values('"+req.body.list.quick+"');select @@identity as ListId";
    var sql1 = "insert into QuickList_animal( ListId, RegNo) values((select @@identity), "+req.body.regno.txtRegNo+")";
    // console.log(sql);
    // console.log(sql1);
    request.query(sql, function (err, recordsets) {     
      request.query(sql1, function (err, recordsets1) {    
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
    });
  });
});
// -------------------------------------------------------Geno Data--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/genodata', function(req, res) {
    // console.log(req.body)
    var sql = "Select * from tbladhocreport Where Qname='Geno Research'";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Edit Geno Head--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editgenodata', function(req, res) {
    // console.log(req.body)
    var sql="UPDATE g SET Marker='"+req.body.Marker+"',Results ='"+req.body.Results+"' FROM dbo.RegistrationGeno g JOIN dbo.Registration r ON  g.SampleID = r.DNA Where r.RegNo="+req.body.regno+" and Marker='"+req.body.Marker1+"'"
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
  });
});
});
//--------------------------------------------------------Geno Reports---------------------------------------------------------------
router.post('/genorecords', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('stmt', sql.VarChar(8000), req.body.sqlstmt);
    request.input('custpar1', sql.VarChar(50), req.body.Custpar1);
    request.input('custpar2', sql.VarChar(50), req.body.Custpar2);
    request.input('custpar3', sql.VarChar(50), req.body.Custpar3);
    request.input('custpar4', sql.VarChar(50), null);
    request.input('custpar5', sql.VarChar(50), null);
    request.input('custpartype1', sql.VarChar(50), req.body.Custpartype1);
    request.input('custpartype2', sql.VarChar(50), req.body.Custpartype2);
    request.input('custpartype3', sql.VarChar(50), req.body.Custpartype3);
    request.input('custpartype4', sql.VarChar(50), null);
    request.input('custpartype5', sql.VarChar(50), null);
    request.input('custparval1', sql.VarChar(50), req.body.Custparval1);
    request.input('custparval2', sql.VarChar(50), req.body.Custparval2);
    request.input('custparval3', sql.VarChar(50), req.body.Custparval3);
    request.input('custparval4', sql.VarChar(50), null);
    request.input('custparval5', sql.VarChar(50), null);
    request.input('type', sql.VarChar(10), 'getrec');
    request.execute('runadhocreport_custom', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------Geno Count---------------------------------------------------------------
router.post('/genocount', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('stmt', sql.VarChar(8000), req.body.sqlstmt);
    request.input('custpar1', sql.VarChar(50), req.body.Custpar1);
    request.input('custpar2', sql.VarChar(50), req.body.Custpar2);
    request.input('custpar3', sql.VarChar(50), req.body.Custpar3);
    request.input('custpar4', sql.VarChar(50), null);
    request.input('custpar5', sql.VarChar(50), null);
    request.input('custpartype1', sql.VarChar(50), req.body.Custpartype1);
    request.input('custpartype2', sql.VarChar(50), req.body.Custpartype2);
    request.input('custpartype3', sql.VarChar(50), req.body.Custpartype3);
    request.input('custpartype4', sql.VarChar(50), null);
    request.input('custpartype5', sql.VarChar(50), null);
    request.input('custparval1', sql.VarChar(50), req.body.Custparval1);
    request.input('custparval2', sql.VarChar(50), req.body.Custparval2);
    request.input('custparval3', sql.VarChar(50), req.body.Custparval3);
    request.input('custparval4', sql.VarChar(50), null);
    request.input('custparval5', sql.VarChar(50), null);
    request.input('type', sql.VarChar(10), 'getcount');
    request.execute('runadhocreport_custom', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Add new list 1--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/addtonewlist1', function(req, res) {
    // console.log(req.body)
    var sql = "insert into QuickList_animal( ListId, RegNo) values( "+req.body.list.quick+", "+req.body.regno.txtRegNo+") ";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Check DNA--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/checkdna', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT COUNT(ID) AS CountID FROM Registration WHERE (DNA = '"+req.body.DNA+"') ";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Delete Dna list--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletednalist', function(req, res) {
    // console.log(req.body)
    var sql = "delete from RegistrationDNA where Regno="+req.body.RegNo+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Remove DNA Panel--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletednapan', function(req, res) {
    // console.log(req.body)
    var sql = "DELETE FROM RegistrationDNA WHERE ID ="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Add new list 2--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/addtonewlist2', function(req, res) {
    // console.log(req.body)
    var sql ="delete from QuickList_Animal where ListId ="+req.body.list.quick+"";
    var sql1 = "insert into QuickList_animal( ListId, RegNo) values( "+req.body.list.quick+", "+req.body.regno.txtRegNo+") ";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      request.query(sql1, function (err, recordsets1) {        
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
    });
  });
});
// -------------------------------------------------------Display List--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/displaylist', function(req, res) {
    // console.log(req.body)
    var sql = "Select ListId,  ListName from QuickList order by listname";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Get Mem & Quick List--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/getmemquicklist', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT MemberNumber, CAST(MemberNumber AS nvarchar) + ' - ' + LastName + ', ' + FirstName AS MemberName FROM Members ORDER BY LastName, FirstName";
    var sql1 = "Select ListId,  ListName from QuickList order by listname";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {
      request.query(sql1, function (err, recordsets1) {        
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send({member : recordsets.recordset, list : recordsets1.recordset});
      }
    });
    });
  });
});
//----------------------------------------------------Multiple List----------------------------------------
router.post('/multiplelist', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('RegNo', sql.Int, req.body.editanimal.RegNo);
    request.input('MemberNo', sql.Int, req.body.multiplelist.member);
    request.input('gender', sql.VarChar(10), req.body.multiplelist.gender);
    request.input('quicklistId', sql.Int, req.body.multiplelist.quick);
    request.execute('_getAnimalListforDNA', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//----------------------------------------------------Search Owner----------------------------------------
router.post('/searchtransferowner', function(req, res) {
  // console.log(req.body);
  // console.log(req.body.details.number);
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('RegNoID', sql.Int, req.body.id.ID);
    request.input('MemberNo', sql.Int, req.body.details.number);
    request.input('memberName', sql.VarChar(200), req.body.details.name);
    request.execute('_AnimalList_TransferOwner', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
//----------------------------------------------------Search Owner Member----------------------------------------
router.post('/searchtransferownermember', function(req, res) {
  // console.log(req.body.memberprofile);
  // console.log(req.body.details.number);
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('RegNoID', sql.Int, null);
    request.input('MemberNo', sql.Int, req.body.searchowner.number);
    request.input('memberName', sql.VarChar(200), req.body.searchowner.name);
    request.execute('_AnimalList_TransferOwner', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(req.body.memberprofile.RegNo)
        res.send({members : recordsets.recordset, id : req.body.memberprofile.RegNo});
      }
    });
  });
});
//----------------------------------------------------Transfer Owner Member----------------------------------------
 sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/transferedanimaldata', function(req, res) {
    var sql = "Select t.*,(select LastName+','+Firstname from Members Where MemberNumber=t.oldMemberno) as Membername from TempTransferanimal t Where Memberno="+req.session.user[0].MemberNumber+" and status='Not Paid'";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.send(recordsets.recordset)
        }
      });
  });
});
//----------------------------------------------------Transfer Animal Pay----------------------------------------
router.post('/transferedanimalPay',  function(req, res) {
  console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.amount;
    // var amount = 1;
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      request.execute('_getinvoiceid',  function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription('Animal transfer');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.bills.FirstName);
            billTo.setLastName(req.body.bills.LastName);
            billTo.setCompany('ABBI');
            billTo.setAddress(req.body.bills.Address);
            billTo.setCity(req.body.bills.City);
            billTo.setState(req.body.bills.State);
            billTo.setZip(req.body.bills.Zip);
            billTo.setCountry(req.body.bills.Country);
            billTo.setPhoneNumber(req.body.bills.Phone);
            billTo.setEmail(req.body.bills.Email);
            billTo.setFaxNumber(req.body.bills.Fax);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.bills.Email);

            // var shipTo = new ApiContracts.CustomerAddressType();
            // shipTo.setFirstName(req.body.bills.FirstName1);
            // shipTo.setLastName(req.body.bills.LastName1);
            // shipTo.setAddress(req.body.bills.Address1);
            // shipTo.setCity(req.body.bills.City1);
            // shipTo.setState(req.body.bills.State1);
            // shipTo.setZip(req.body.bills.Zip1);
            // shipTo.setCountry(req.body.bills.Country1);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setCustomer(customer);
            // transactionRequestType.setShipTo(shipTo);      
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    var date = moment().format('MM-DD-YYYY');
                    request.input('OldMemberNo', sql.Int, req.body.animaldata.oldMemberno);
                    request.input('NewMemberNo', sql.Int, req.session.user[0].MemberNumber);
                    request.input('RegNo', sql.Int, req.body.animaldata.RegNo);
                    request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
                    request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
                    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
                    request.input('CCNumber', sql.VarChar(50), req.body.pay.cc);
                    request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
                    request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
                    request.input('eChkABACode', sql.VarChar(9), null);
                    request.input('eChkAcctNo', sql.VarChar(4), null);
                    request.input('eChkAcctType', sql.VarChar(20), null);
                    request.input('eChkAcctName', sql.VarChar(50), null);
                    request.input('eChkBankName', sql.VarChar(50), null);
                    request.input('subtotal', sql.Money, amount);
                    request.execute('_transferanimalWo', function(err, recordsets, returnValue, affected) {
                    var paymentid = recordsets.recordset[0].PaymentID;
              if(err){
                console.log(err,'error')
              }
              else{
                var transporter = nodemailer.createTransport({
                  service: 'gmail',
                  auth: {
                    user: 'abbi@integrity-tek.com',
                    pass: 'Abbi@2021'
                  }
                });

                var mailOptions = {
                  from: 'no-reply',
                  to: ['abbi@integrity-tek.com',req.body.bills.Email],
                  subject: 'Animal Transfer - ABBI',
                  html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Animal Transfer</h1>\n                      <h2>Hi '"+req.session.user[0].MemberName+"'</h2>\n <p>'                     <h2>You have Animal transfer request in your login. Please login into your ABBI account and check animal transfer screen.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
                };

                transporter.sendMail(mailOptions, function(error, info){
                  if (error) {
                  } else {
                  }
                });
              }
            });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ success: 'Transaction was successful.', paymentid : invoice, Amount : amount, date : date, paymentType : req.body.pay.Payment });
} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);
  
  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  orderDetails.setDescription('Animal transfer');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.bills.FirstName);
  billTo.setLastName(req.body.bills.LastName);
  billTo.setCompany('ABBI');
  billTo.setAddress(req.body.bills.Address);
  billTo.setCity(req.body.bills.City);
  billTo.setState(req.body.bills.State);
  billTo.setZip(req.body.bills.Zip);
  billTo.setCountry(req.body.bills.Country);
  billTo.setPhoneNumber(req.body.bills.Phone);
  billTo.setEmail(req.body.bills.Email);
  billTo.setFaxNumber(req.body.bills.Fax);

  var customer = new ApiContracts.CustomerDataType();
  customer.setEmail(req.body.bills.Email);

  // var shipTo = new ApiContracts.CustomerAddressType();
  // shipTo.setFirstName(req.body.bills.FirstName1);
  // shipTo.setLastName(req.body.bills.LastName1);
  // shipTo.setAddress(req.body.bills.Address1);
  // shipTo.setCity(req.body.bills.City1);
  // shipTo.setState(req.body.bills.State1);
  // shipTo.setZip(req.body.bills.Zip1);
  // shipTo.setCountry(req.body.bills.Country1);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setCustomer(customer);
  // transactionRequestType.setShipTo(shipTo);      
  var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          var date = moment().format('MM-DD-YYYY');
          request.input('OldMemberNo', sql.Int, req.body.animaldata.oldMemberno);
          request.input('NewMemberNo', sql.Int, req.session.user[0].MemberNumber);
          // console.log(req.session.user[0].MemberNumber)
          request.input('RegNo', sql.Int, req.body.animaldata.RegNo);
          // console.log(req.body.eventiddata[0].RegNo)
          request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
          console.log(req.body.pay.Payment)
          request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
          console.log(req.session.user[0].sessionID)
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          console.log(req.body.pay.Payment)
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(50), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          console.log(req.body.pay.aba)
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          console.log(req.body.pay.acno)
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          console.log(req.body.pay.actype)
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          console.log(req.body.pay.acname)
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          console.log(req.body.pay.bank)
          request.input('subtotal', sql.Money, amount);
          request.execute('_transferanimalWo', function(err, recordsets, returnValue, affected) {
            var paymentid = recordsets.recordset[0].PaymentID;
            console.log("----------------------------------------"+paymentid)
            res.send({ success:'Transaction Successfull', paymentid : paymentid, Amount : amount, date : date, paymentType : req.body.pay.Payment });
            if(err){
              // console.log(err)
            }
            else{
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                  pass: 'Abbi@2021'
                }
              });

              var mailOptions = {
                from: 'no-reply',
                to: ['abbi@integrity-tek.com',req.body.bills.Email],
                subject: 'Animal Transfer - ABBI',
                html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Animal Transfer</h1>\n                      <h2>Hi '"+req.session.user[0].MemberName+"'</h2>\n <p>'                     <h2>You have Animal transfer request in your login. Please login into your ABBI account and check animal transfer screen.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
              };

              transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                } else {
                }
              });
            }
          });
res.send({ success: 'Transaction was successful.', paymentid : invoice, Amount : amount, date : date, paymentType : req.body.pay.Payment });

}  
else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('OldMemberNo', sql.Int, req.body.animaldata.oldMemberno);
  request.input('NewMemberNo', sql.Int, req.session.user[0].MemberNumber);
  request.input('RegNo', sql.Int, req.body.animaldata.RegNo);
  request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
  request.input('EventID', sql.Int, req.body.eventiddata[0].EventID);
  request.input('SessionID', sql.VarChar(100), req.session.user[0].sessionID);
  request.input('CCType', sql.VarChar(50), );
  request.input('CCNumber', sql.VarChar(50), card);
  request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
  request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
  request.input('eChkABACode', sql.VarChar(9), null);
  request.input('eChkAcctNo', sql.VarChar(4), null);
  request.input('eChkAcctType', sql.VarChar(20), null);
  request.input('eChkAcctName', sql.VarChar(50), null);
  request.input('eChkBankName', sql.VarChar(50), null);
  request.input('subtotal', sql.Money, amount);
  request.execute('_transferanimalWo', function(err, recordsets, returnValue, affected) {
    if (err) {
      // console.log(err)
    }
    else{
      res.send({msg: "Successfull"})
    }
  });
}
}
});
}
});
});

//-------------------------------------------------------------Billing Details Admin----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/getbilldetailsadmin', function(req, res) {
      console.log(req.body)
      if(req.session && req.session.admin){
        res.locals.admin = req.session.admin;
        var sql = "Select * from Members Where MemberNumber="+req.body.Memberno+"";
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
      }
      else{
        req.session.reset();
        res.redirect('/');
      }
    });
  });
//----------------------------------------------------Transfer Animal Pay Admin----------------------------------------
router.post('/transferedanimalPayAdmin', function(req, res) {
  // console.log(req.body);
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.bills.amount;
    // var amount = 1;
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription('Animal transfer');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.bills.FirstName);
            billTo.setLastName(req.body.bills.LastName);
            billTo.setAddress(req.body.bills.Address);
            billTo.setCity(req.body.bills.City);
            billTo.setState(req.body.bills.State);
            billTo.setZip(req.body.bills.Zip);
            billTo.setCountry(req.body.bills.Country);
            billTo.setPhoneNumber(req.body.bills.Phone);
            billTo.setEmail(req.body.bills.Email);

            // var shipTo = new ApiContracts.CustomerAddressType();
            // shipTo.setFirstName(req.body.bills.FirstName1);
            // shipTo.setLastName(req.body.bills.LastName1);
            // shipTo.setAddress(req.body.bills.Address1);
            // shipTo.setCity(req.body.bills.City1);
            // shipTo.setState(req.body.bills.State1);
            // shipTo.setZip(req.body.bills.Zip1);
            // shipTo.setCountry(req.body.bills.Country1);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.bills.Email);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setCustomer(customer);
            // transactionRequestType.setShipTo(shipTo);      
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    var date = moment().format('MM-DD-YYYY');
                    request.input('OldMemberNo', sql.Int, req.body.animaldata.oldMemberno);
                    request.input('NewMemberNo', sql.Int, req.body.animaldata.NewMemberno);
                    request.input('RegNo', sql.Int, req.body.animaldata.RegNo);
                    request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
                    request.input('SessionID', sql.VarChar(100), null);
                    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
                    request.input('CCNumber', sql.VarChar(50), card);
                    request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
                    request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
                    request.input('eChkABACode', sql.VarChar(9), null);
                    request.input('eChkAcctNo', sql.VarChar(4), null);
                    request.input('eChkAcctType', sql.VarChar(20), null);
                    request.input('eChkAcctName', sql.VarChar(50), null);
                    request.input('eChkBankName', sql.VarChar(50), null);
                    request.input('subtotal', sql.Money, amount);
                    request.execute('_transferanimalWo', function(err, recordsets, returnValue, affected) {
              console.log(recordsets.recordset[0].PaymentID)
             var paymentid = recordsets.recordset[0].PaymentID;
              if(err){
                console.log(err)
              }
              else{
                var transporter = nodemailer.createTransport({
                  service: 'gmail',
                  auth: {
                    user: 'abbi@integrity-tek.com',
                    pass: 'Abbi@2021'
                  }
                });

                var mailOptions = {
                  from: 'no-reply',
                  to: ['abbi@integrity-tek.com',req.body.bills.Email],
                  subject: 'Animal Transfer - ABBI',
                  html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Animal Transfer</h1>\n                      <h2>Hi '"+req.body.bills.FirstName+"'</h2>\n <p>'                     <h2>Animal transfered Successfully by admin. please contact office for queries.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
                };

                transporter.sendMail(mailOptions, function(error, info){
                  if (error) {
                  } else {
                  }
                });
              }
            });
            res.send({ success:'Transaction Successfull', paymentid : invoice, Amount : amount, date : date, paymentType : req.body.pay.Payment });

// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});

} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);
  
  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  orderDetails.setDescription('Animal transfer');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.bills.FirstName);
  billTo.setLastName(req.body.bills.LastName);
  billTo.setAddress(req.body.bills.Address);
  billTo.setCity(req.body.bills.City);
  billTo.setState(req.body.bills.State);
  billTo.setZip(req.body.bills.Zip);
  billTo.setCountry(req.body.bills.Country);
  billTo.setPhoneNumber(req.body.bills.Phone);
  billTo.setEmail(req.body.bills.Email);


  var customer = new ApiContracts.CustomerDataType();
  customer.setEmail(req.body.bills.Email);

  // var shipTo = new ApiContracts.CustomerAddressType();
  // shipTo.setFirstName(req.body.bills.FirstName1);
  // shipTo.setLastName(req.body.bills.LastName1);
  // shipTo.setAddress(req.body.bills.Address1);
  // shipTo.setCity(req.body.bills.City1);
  // shipTo.setState(req.body.bills.State1);
  // shipTo.setZip(req.body.bills.Zip1);
  // shipTo.setCountry(req.body.bills.Country1);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setCustomer(customer);
  // transactionRequestType.setShipTo(shipTo);      
  var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          var date = moment().format('MM-DD-YYYY');
          request.input('OldMemberNo', sql.Int, req.body.animaldata.oldMemberno);
          request.input('NewMemberNo', sql.Int, req.body.animaldata.NewMemberno);
          request.input('RegNo', sql.Int, req.body.animaldata.RegNo);
          request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
          request.input('SessionID', sql.VarChar(100), null);
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);
          request.input('CCSecCode', sql.VarChar(50), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('subtotal', sql.Money, amount);
          request.execute('_transferanimalWo', function(err, recordsets, returnValue, affected) {
            var paymentid = recordsets.recordset[0].PaymentID;
            console.log("----------------------------------------"+paymentid)
            res.send({ success:'Transaction Successfull', paymentid : invoice, Amount : amount, date : date, paymentType : req.body.pay.Payment });
            if(err){
              console.log(err)
            }
            else{
              var transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                  user: 'abbi@integrity-tek.com',
                  pass: 'Abbi@2021'
                }
              });

              var mailOptions = {
                from: 'no-reply',
                to: ['abbi@integrity-tek.com',req.body.bills.Email],
                subject: 'Animal Transfer - ABBI',
                html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Animal Transfer</h1>\n                      <h2>Hi '"+req.body.bills.FirstName+"'</h2>\n <p>'                     <h2>Animal transfered Successfully by admin. please contact office for queries.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
              };

              transporter.sendMail(mailOptions, function(error, info){
                if (error) {
                } else {
                }
              });
            }
          });
}  
else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('OldMemberNo', sql.Int, req.body.animaldata.oldMemberno);
  request.input('NewMemberNo', sql.Int, req.body.animaldata.NewMemberno);
  request.input('RegNo', sql.Int, req.body.animaldata.RegNo);
  request.input('PaymentType', sql.VarChar(20), req.body.pay.Payment);
  request.input('SessionID', sql.VarChar(100), null);
  request.input('CCType', sql.VarChar(50), );
  request.input('CCNumber', sql.VarChar(50), card);
  request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
  request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
  request.input('eChkABACode', sql.VarChar(9), null);
  request.input('eChkAcctNo', sql.VarChar(4), null);
  request.input('eChkAcctType', sql.VarChar(20), null);
  request.input('eChkAcctName', sql.VarChar(50), null);
  request.input('eChkBankName', sql.VarChar(50), null);
  request.input('subtotal', sql.Money, amount);
  request.execute('_transferanimalWo', function(err, recordsets, returnValue, affected) {
    if (err) {
      // console.log(err)
    }
    else{
      res.send({msg: "Successfull"})
    }
  });
}
}
});
}
});
});
 //----------------------------------------------------Transfer Owner Member----------------------------------------
 sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/transferedanimaldataadmin', function(req, res) {
    var sql = "Select t.*,(select LastName+','+Firstname from Members Where MemberNumber=t.oldMemberno) as Membername,(select LastName+','+Firstname from Members Where MemberNumber=t.Memberno) as Membername2 from TempTransferanimal t Where status='Not Paid'";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.send(recordsets.recordset)
        }
      });
  });
});
//----------------------------------------------------Transfer Owner Member----------------------------------------
 sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/transferownernamemember', function(req, res) {
  console.log(req.body)
    var sql = "Insert into TempTransferanimal(RegNo,Animal,Memberno,oldMemberno,Typeservice,Birthdate,Status) select RegNo,Animal,"+req.body.data.MemberNumber+","+req.session.user[0].MemberNumber+",TypeService,Birthdate,'Not Paid' from Registration Where RegNo="+req.body.id+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        var transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: 'abbi@integrity-tek.com',
            pass: 'Abbi@2021'
          }
        });

        var mailOptions = {
          from: 'no-reply',
          to: ["abbi@integrity-tek.com",req.body.data.Email],
          //req.body.data.Email, 
          // abbi@integrity-tek.com
          subject: 'Pay for Animal Transfer - ABBI',
          html : "<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Pay for Animal Transfer</h1>\n                      <h2>Hi '"+req.body.data.MemberName+"'</h2>\n <p>'                     <h2>I have requested for an animal transfer to your account. Please make a payment of $ 30.00 by logging into your account and go to Transfer Animals section to complete the payment.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
        };

        transporter.sendMail(mailOptions, function(error, info){
          if (error) {
        // console.log(error);
      } else {
        // console.log(info)
        res.sendStatus(200)
      }
    });
      }
    });
  });
});
//----------------------------------------------------Transfer Owner----------------------------------------
router.post('/transferownername', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('RegnoId', sql.Int, req.body.num.ID);
    request.input('NewMemberNo', sql.Int, req.body.details.MemberNumber);
    request.input('oldMemberNo', sql.Int, req.body.num.MemberNo);
    request.execute('_transferownership', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        var transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: 'abbi@integrity-tek.com',
            pass: 'Abbi@2021'
          }
        });

        var mailOptions = {
          from: 'no-reply',
          to: 'abbi@integrity-tek.com',
          subject: 'Animal Transfered Successfully - ABBI',
          html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Animal Transfer</h1>\n                      <h2>Hi User</h2>\n <p>'                     <h2>Animal transfered Successfully by admin. please contact office for queries.</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
        };

        transporter.sendMail(mailOptions, function(error, info){
          if (error) {
        // console.log(error);
      } else {
        // console.log(info)
      }
    });
        res.sendStatus(200);
      }
    });
});
});
// -------------------------------------------------------Event Section--------------------------------------------------------
// -------------------------------------------------------Online Event--------------------------------------------------------
// -------------------------------------------------------Get Event Years--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/geteventyear', function(req, res) {
    // console.log(req.body)
    var sql = "select a.* from (Select eventid,event,substring(event,1,charindex(' ',event)) as sort from Events where ScheduledPayments = 1)a order by sort desc";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset.length);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Get ol Event Years--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/geteventdatedropdown', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT DISTINCT YEAR(closedate) AS closedate FROM Events order by closedate";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset.length);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Get Event Data--------------------------------------------------------
router.post('/geteventsdata', function(req, res) {
  console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('year', sql.Int, req.body.Year);
    request.execute('_onlineEvents', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset.length)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Delete Event--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deleteeventsdata', function(req, res) {
    // console.log(req.body)
    var sql = "DELETE FROM Events_PaymentSchedule WHERE EventID ="+req.body.EventID+"";
    var sql1 = "delete  from Events_EntryPayment where EntryId in(select entryid from Events_Entry where EventID="+req.body.EventID+");DELETE FROM Events_Entry WHERE EventID ="+req.body.EventID+"";
    var sql2 = "DELETE FROM Events WHERE EventID ="+req.body.EventID+"";
    // console.log(sql1);
    request.query(sql, function (err, recordsets) { 
      request.query(sql1, function (err, recordsets1) {  
        request.query(sql2, function (err, recordsets2) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
      });
    });
  });
});
// -------------------------------------------------------Edit Event--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editeventdata', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT Eventid, Event, BeginDate, EndDate, OpenDate, CloseDate, Description, Category, EventType, Location, EntryFee, OneParentPenalty, TwoParentPenalty, Display, EventSeason, ScheduledPayments, OnlineEntry, EntryNote, LateFee, LateFee2, AddEntryInfo FROM Events WHERE EventID =  "+req.body.EventID+"";
    // var sql1 = "Select Eventid, Event from Events where ScheduledPayments = 1 order by begindate desc"
    // console.log(sql);
    request.query(sql, function (err, recordsets) {  
    // request.query(sql1, function (err, recordsets1) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        // console.log(recordsets1.recordset);
        res.send({details : recordsets.recordset});//, dropdown : recordsets1.recordset
      }
    });
  // });
});
});
// -------------------------------------------------------Add Additional Event--------------------------------------------------------
router.post('/addeventadditionaltable', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('FieldTitle', sql.VarChar(), req.body.title);
    request.input('Display', sql.VarChar(), req.body.display);
    request.input('Reference', sql.VarChar(), req.body.location);
    request.input('Fieldtype', sql.VarChar(), req.body.type);
    request.input('Required', sql.Bit, req.body.required);
    request.execute('_instempadditionalfields', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Show Temp Events--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/showtempevent', function(req, res) {
    // console.log(req.body)
    var sql = "Select * from tempadditionalfields";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Delete Temp Events--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletetempevent', function(req, res) {
    // console.log(req.body)
    var sql = "Delete from tempadditionalfields where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Save Online Event--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/saveaddevent', function(req, res) {
    // console.log(req.body)
    var sql = "Insert into tempadditionalfields(Process,ProcessID,Reference,FieldTitle,Display,Fieldtype,Required)VALUES('Event',NULL,'"+req.body.location+"','"+req.body.title+"','"+req.body.display+"','"+req.body.type+"',"+req.body.required+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Event Payment--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/eventdropdown', function(req, res) {
    // console.log(req.body)
    var sql = "select a.* from (Select Eventid,Event,substring(event,1,charindex(' ',event)) as sort from Events where ScheduledPayments = 1)a order by sort desc";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Event Member--------------------------------------------------------
router.post('/saveaddevent', function(req, res) {
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body.fees;
    removeUndefinedProps(obj)
    // console.log(req.body)
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('Event', sql.VarChar(200), req.body.event.event)
    request.input('BeginDate', sql.DateTime, moment(req.body.event.bdate).format('MM/DD/YYYY'))
    request.input('EndDate', sql.DateTime, moment(req.body.event.edate).format('MM/DD/YYYY'))
    request.input('OpenDate', sql.DateTime, moment(req.body.event.odate).format('MM/DD/YYYY'))
    request.input('CloseDate', sql.DateTime, moment(req.body.event.cdate).format('MM/DD/YYYY'))
    // request.input('Description', sql.VarChar(8000), req.body.desc.textInput)
    request.input('UserID', sql.Int, req.session.admin[0].UserID)
    request.input('Category', sql.VarChar(50), req.body.event.category)
    request.input('EventType', sql.VarChar(50), req.body.event.type)
    request.input('Location', sql.VarChar(250), req.body.event.location)
    request.input('EntryFee', sql.Int, req.body.event.fee)
    request.input('OneParentPenalty', sql.Int, req.body.event.parent1)
    request.input('TwoParentPenalty', sql.Int, req.body.event.parent2)
    request.input('Display', sql.Int, req.body.event.display)
    request.input('EventSeason', sql.Int, req.body.event.season)
    request.input('ScheduledPayments', sql.Bit, req.body.fees.spay)
    request.input('OnlineEntry', sql.Bit, req.body.event.oentry)
    request.input('EntryNote', sql.VarChar(500), req.body.event.note)
    request.input('LateFee', sql.Int, req.body.fees.fee1)
    request.input('LateFee2', sql.Int, req.body.fees.fee2)
    request.input('AddEntryInfo', sql.Bit, req.body.event.addentry)
    request.execute('_saveneweventinfo', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err);
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
  }
});
//----------------------------------------------------Search E pay------------------------------------------
router.post('/searchepayment', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('EventId', sql.Int, req.body.event);
    request.input('MemberNumber', sql.Int, parseInt(req.body.member));
    request.input('ScheduleId',sql.Int, parseInt(req.body.date))
    request.execute('_EventPaymentList', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
//----------------------------------------------------Event------------------------------------------
router.post('/searchepayment1', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('EventId', sql.Int, req.body.event);
    request.input('MemberNumber', sql.Int, 0);
    request.input('ScheduleId',sql.Int, 0)
    request.execute('_EventPaymentList', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// ---------------------------------------------------------Date Dropdown------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/choosedate', function(req, res) {
    // console.log(req.body)
    var sql = "Select scheduleid, convert(varchar(20),paymentclosedate, 101) as ScheduleDate from events_paymentSchedule where(eventid =  "+req.body.event+") order by paymentclosedate";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ---------------------------------------------------------Member Dropdown------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/choosemember', function(req, res) {
    // console.log(req.body)
    var sql = "Select distinct m.memberNumber, cast(m.membernumber as varchar(20)) + ' - ' + m.membername as member, membername from events_member m join events_entry e on m.eventsmemberid = e.eventsmemberid where(e.eventid = "+req.body.event+") order by m.membername";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//---------------------------------------------------------Modal Event Payment-----------------------------------
router.post('/modaleventpayment', function(req, res) {
  // console.log(req.body)
  var sql = "Select EntryId from Events_Entry Where EntryId="+req.body.entryid+""
  request.query(sql, function (err, recordsets) {        
    if(err){
      // console.log(err)
      res.sendStatus(500);
    }
    else{
      // console.log(recordsets.recordset);
      res.send(recordsets.recordset);
    }
  });
});
// -------------------------------------------------------Edit Event Payment--------------------------------------------------------
router.post('/editeventpayments', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    // console.log(req.body.details.MemberNumber != null)
    if(req.body.details.MemberNumber != null){
      // console.log('if')
      // console.log(req.body.modal.EntryId)
      // console.log(req.body.details.MemberNumber)
      request.input('EntryId', sql.Int, req.body.modal.EntryId);
      request.input('NewMemberNo', sql.Int, req.body.details.MemberNumber);
      request.execute('_EventEntry_Transfer', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
    }
    else if(req.body.details.MemberNo != null && req.body.details.animal != null){
      // console.log('else')
      request.input('EntryId', sql.Int, req.body.modal.EntryId);
      request.input('NewMemberNo', sql.Int, req.body.details.MemberNo);
      request.input('NewRegNo', sql.Int, req.body.details.animal);
      request.execute('_EventEntry_ChangeNomination', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
    }
    else if(req.body.details.active != null){
      // console.log(req.body)
      request.input('EntryId', sql.Int, req.body.modal.EntryId);
      request.input('Inactive', sql.Int, req.body.details.active);
      request.execute('_inactivemember', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
    }
  });
});
// -------------------------------------------------------------Populate Additional Events---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/populateadditional', function(req, res) {
      var year = moment().format('yyyy');
      var sql = "Select f.*, FieldValueId, ReferenceId, Number_Value, Decimal_Value, String_Value, Money_Value, Text_Value from AdditionalFields f left join AdditionalFieldValues fv on f.fieldid = fv.fieldid and fv.referenceid = Null where Process = 'Event' and ProcessId = 315  and (reference='All' OR f.Reference=f.Reference)";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Populate Scheduled Payments---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/schedulepayments', function(req, res) {
      // console.log(req.body)
      var sql = "Select  case when paymentclosedate = (select min(paymentclosedate) from events_paymentschedule where eventid = "+req.body.EventID+") then 'Initial Payment' when FinalEventPayment = 1 THEN 'Event Entry Payment' when NominationPayment = 1 THEN 'Nomination Payment' ELSE 'Sustaining Payment' end as Description, * from events_paymentSchedule where eventid = "+req.body.EventID+" order by PaymentCloseDate";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Events ID Dropdown----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/eventiddropdown', function(req, res) {
      var year = moment().format('yyyy');
      var sql = "SELECT EventID, Event, BeginDate, EndDate FROM Events where eventseason >= "+year+" order by isnull(begindate,closedate) desc";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Events All ID Dropdown----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/alleventiddropdown', function(req, res) {
      var year = moment().format('yyyy');
      var sql = "SELECT EventID, Event, BeginDate, EndDate FROM Events order by isnull(begindate,closedate) desc";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Events Status Dropdown----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/eventestatusdropdown', function(req, res) {
      var year = moment().format('yyyy');
      var sql = "Select distinct status from registrationEID order by status";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//-------------------------------------------Roaster Event List---------------------------------------------
router.post('/roastereventlist', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('EventID', sql.Int, req.body.EventID);
    request.execute('_OnlineEvents_Roster', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
//-------------------------------------------Roaster Additional Info---------------------------------------------
router.post('/additionalinforoaster', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('Eventid', sql.Int, req.body.EventID);
    request.execute('_OnlineEvents_GetAdditionalInfo', function(err, recordsets, returnValue, affected) {
      request.execute('_visiblebuckounce', function(err, recordsets1, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
      // console.log(recordsets1.recordset)
      res.send({details : recordsets.recordset, buck : recordsets1.recordset});
    }
  });
    });
  });
});
//-------------------------------------------Save Roaster Additional Info---------------------------------------------
router.post('/saveaddinfo', function(req, res) {
  // console.log(JSON.stringify(req.body))
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('eventid', sql.Int, req.body.eventid.EventID);
    request.input('json', sql.VarChar(8000),JSON.stringify(req.body.eventinfo))
    request.execute('_saveadditionaleventinfo', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets)
        res.sendStatus(200)
      }
    });
  });
});
//-------------------------------------------Download Event Data---------------------------------------------
router.post('/downloadaddinfo', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('EventID', sql.Int, req.body.EventID);
    request.input('Regno', sql.Int, req.body.Regno);
    request.execute('_OnlineEvents_GetAdditionalInfo', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------------Members Event EID Dropdown----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/eventeidmember', function(req, res) {
      var year = moment().format('yyyy');
      var sql = "select membernumber, cast(memberNumber as varchar(10)) + ' - ' + lastname + ', ' + firstname as membername from members m where exists (Select memberno from registration r join registrationeid eid on r.regno = eid.regno where memberno = m.membernumber) or exists (Select membernumber from registrationeid where membernumber = m.membernumber) Order by lastname, firstname";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//-------------------------------------------Search EID Manager---------------------------------------------
router.post('/searcheventeidmanager', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNo', sql.VarChar(25), req.body.membernumber);
    request.input('Status', sql.VarChar(25), req.body.status);
    request.input('EID', sql.VarChar(25), req.body.eid);
    request.input('Regno', sql.Int, req.body.reg);
    request.input('Owner', sql.VarChar(25), req.body.owner);
    request.input('Vet', sql.VarChar(25), req.body.vet);
    request.execute('_RegistrationEID_Search', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
//-------------------------------------------Add EID Manager---------------------------------------------
router.post('/addneweidmanager', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('EID', sql.VarChar(25), req.body.eid);
    request.input('Regno', sql.Int, req.body.regno);
    request.input('PrivateHerd', sql.VarChar(255), req.body.herd);
    request.input('Birthdate', sql.DateTime, req.body.bdate);
    request.input('Color', sql.VarChar(255), req.body.color);
    request.input('Description', sql.VarChar(500), req.body.description);
    request.input('Dentition', sql.VarChar(255), req.body.dentition);
    request.input('DateApplied', sql.DateTime, req.body.date);
    request.input('MemberNumber', sql.Int, req.body.member);
    request.input('Owner', sql.VarChar(255), req.body.owner);
    request.input('VetMemberNo', sql.Int, req.body.vetmember);
    request.input('Veterinarian', sql.VarChar(255), req.body.vet);
    request.input('Clinic', sql.VarChar(255), req.body.clinic);
    request.input('Notes', sql.VarChar(255), req.body.note);
    request.input('Status', sql.VarChar(25), req.body.status);
    request.execute('_RegistrationEID_Insert', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err);
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------------Edit EID Manager----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editeidmanager', function(req, res) {
      // console.log(req.body)
      var year = moment().format('yyyy');
      var sql = "Select (select LastName+','+FirstName from Members where MemberNumber=(select MemberNo from Registration where RegNo="+req.body.eid.RegNo+")) as AniOwner, eid.*, p.Paymentdate,R.Animal,R.Dateregestered,R.Description as AniDesc,R.EarTag from registrationEID eid left join payments p on eid.paymentid = p.paymentid Join Registration R on eid.RegNo=R.RegNo where regTagId ="+req.body.eid.RegTagId+"";
      var sql1 = "Select reorderdate, reorderstatus, paymentid from RegistrationEIDReorder where RegTagId ="+req.body.eid.RegTagId+""
      // console.log(sql)
      // console.log(sql1)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          if (err) {
            res.sendStatus(500);
          }
          else {
          // console.log(recordsets.recordset)
          res.send({details : recordsets.recordset, table : recordsets1.recordset});
        }
      });
      });
    });
  });
//------------------------------------------------Delete EID MAnager---------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deleteeidmanager', function(req, res) {
      // console.log(req.body)
      var year = moment().format('yyyy');
      var sql = "delete from RegistrationEID Where RegTagId="+req.body.RegTagId+"";
      // console.log(sql1)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
//-------------------------------------------Update EID Manager---------------------------------------------
router.post('/updateeidmanager', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('RegTagId', sql.Int, req.body.RegTagId);
    request.input('EID', sql.VarChar(25), req.body.EID);
    request.input('Regno', sql.Int, req.body.RegNo);
    request.input('PrivateHerd', sql.VarChar(255), req.body.PrivateHerd);
    request.input('Birthdate', sql.DateTime, req.body.birthdate);
    request.input('Color', sql.VarChar(255), req.body.color);
    request.input('Description', sql.VarChar(500), req.body.Dentition);
    request.input('Dentition', sql.VarChar(255), req.body.description);
    request.input('DateApplied', sql.DateTime, req.body.DateApplied);
    request.input('MemberNumber', sql.Int, req.body.MemberNumber);
    request.input('Owner', sql.VarChar(255), req.body.Owner);
    request.input('VetMemberNo', sql.Int, req.body.VetMemberNo);
    request.input('Veterinarian', sql.VarChar(255), req.body.Veterinarian);
    request.input('Clinic', sql.VarChar(255), req.body.Clinic);
    request.input('Notes', sql.VarChar(255), req.body.Notes);
    request.input('Status', sql.VarChar(25), req.body.Status);
    request.input('PaymentId', sql.Int, req.body.PaymentId);
    request.execute('_RegistrationEID_Update', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err);
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
//-------------------------------------------View EID---------------------------------------------
router.post('/showeidimport', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('EventEID_ID', sql.Int, req.body.event);
    request.execute('_EIDImportMatch', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err);
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
//-----------------------------------------------------------Import EID Event----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/eventeidimportlist', function(req, res) {
      var sql = "select EventEID_ID, ImportDesc from EventEID order by datescanned desc";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//-----------------------------------------------------------Export EID Event----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/fileeid', function(req, res) {
      var sql = "Select top 100 BatchId,batchfilename, filename from ExportBatch where reference = 'DestronExport' and senddate is not null order by senddate desc";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//-----------------------------------------------------------Export EID Count----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/exporteidcount', function(req, res) {
      var sql = "select sum(isnull(i.cost,0)) as cost from EIDOrderExport e join inventory_store i on e.product = i.productnumber or (e.product = 'TESet2206LABBI' and i.productnumber = 'DFABBIEID') where datesent is null and (('Order' = 'Order' and EID is null) or ('Order' = 'Reorder' and EID is not null))";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//-----------------------------------------------------------View Batch----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/viewbatch', function(req, res) {
      // console.log(req.body)
      var sql = "Select filename from ExportBatch where reference = 'DestronExport' and BatchId="+req.body[0].BatchId+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//-----------------------------------------------------------Delete Order----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deleteveorder', function(req, res) {
      // console.log(req.body)
      var sql = "Delete from EIDOrderExport where orderExportId="+req.body.OrderExportId+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
    });
  });
//-------------------------------------------------Create Order----------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/createorder', function(req, res) {
      var date = moment().format('MM/DD/yyyy')
      console.log(req.body,'reqbodyyyyyyy')
      var sql="declare @batchid int;INSERT INTO ExportBatch(SendDate, reference) VALUES (Getdate(), 'DestronExport');SET @batchid=@@identity;select format(SendDate,'yyyyMMdd')+'_DestronExport_'+Cast(BatchID as nvarchar) as FileName,BatchId from ExportBatch Where BatchID=@batchid;"
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          var filename = recordsets.recordset[0].FileName+'.xls';
          var file = recordsets.recordset[0].FileName;
          var batchid = recordsets.recordset[0].BatchId;
          var data1 = req.body.array;
          var xls = json2xls(data1)
          fs.writeFileSync('public/uploads/Orders/'+filename, xls, 'binary', function(err){
            console.log(err,'error')
          })  
          
          var sql1="UPDATE ExportBatch SET BatchFileName ='"+file+"', FileName ='"+filename+"' WHERE BatchID = "+batchid+""
          console.log(sql1,'sql11')
          var sql2="Update EIDOrderExport set datesent = getdate(), Batchid="+batchid+" where OrderExportId in (select OrderExportId from EIDOrderExport e join inventory_store i on e.product = i.productnumber or (e.product = 'ANTESet2206LABBI' and i.productnumber = 'DFABBIEID')  where datesent is null and (('Order' = 'Order' and EID is null) or ('Order' = 'Reorder' and EID is not null)))"
          console.log(sql2,'sql222')
          request.query(sql1, function (err, recordsets1) {
            request.query(sql2, function (err, recordsets2) {
              if (err) {
                console.log(err,'error')
                res.sendStatus(500);
              }
              else {     
                res.sendStatus(200);
              }
            });
          });
          var transporter = nodemailer.createTransport({
            service: 'gmail',
            auth: {
              user: 'abbi@integrity-tek.com',
              pass: 'Abbi@2021'
            }
            // tls: { rejectUnauthorized: false }
          });
          var mailOptions = {
            from: 'abbi@integrity-tek.com',
            to: 'marlissa@pbr.com',       //marlissa@pbr.com
            cc:req.body.exportObj.cc ? req.body.exportObj.cc : '',
            subject: 'ABBI Product Order Export - '+date,
            html:req.body.exportObj.notes,
            attachments: [{
              filename: filename,
              path: 'public/uploads/Orders/'+filename
            }]
          };
          console.log( transporter.sendMail(mailOptions),'transsss')
            // send mail with defined transport object
            transporter.sendMail(mailOptions, function(error, response){
              console.log(response,'response')
              if(error){
                console.log("Email could not sent due to error: "+error);
                res.sendStatus(500);
              } else {
                console.log('mail sent')
              }
            });
               
          }
        });
    });
  });
    //---------------------------------------------------------View Eid Export------------------------------------------------------------
    router.get('/ViewEIDExport', function(req, res) {
      // console.log(req.body)
      sql.connect(config, function (err) { 
        if (err) console.log(err);
        // create Request object
        var request = new sql.Request();
        request.execute('_EIDOrderExportList', function(err, recordsets, returnValue, affected) {
          if(err){
            res.sendStatus(500);
          }
          else{
            // console.log(recordsets.recordset)
            res.send(recordsets.recordset);
          }
        });
      });
    });
//---------------------------------------------------------View Eid Export------------------------------------------------------------
router.get('/getorderdetails', function(req, res) {
      // console.log(req.body)
      sql.connect(config, function (err) { 
        if (err) console.log(err);
        // create Request object
        var request = new sql.Request();
        request.execute('_EIDOrderExportList1', function(err, recordsets, returnValue, affected) {
          if(err){
            res.sendStatus(500);
          }
          else{
            // console.log(recordsets.recordset)
            res.send(recordsets.recordset);
          }
        });
      });
    });
//---------------------------------------------------------View Reorder Export------------------------------------------------------------
router.get('/viewreorderexport', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('Type', sql.VarChar(25), req.body.Reorder);
    request.execute('_EIDOrderExportList', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//----------------------------------------------------------EID Import Event List------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/eidimporteventlist', function(req, res) {
      var sql = "Select eventid, event from events where begindate <= getdate() and display=1 order by begindate desc";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      }); 
    });
  });
//----------------------------------------------------------Add EID Import------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  var storage = multer.diskStorage({ //multers disk storage settings
    destination: function (req, file, cb) {
      cb(null, 'public/uploads/EIDImport')
    },
    filename: function (req, file, cb) {
        //var datetimestamp = Date.now();
        cb(null, file.originalname)
    }
  });
  var upload = multer({ //multer settings
    storage: storage,
  }).single('file');
  
  
  router.post('/addeidimport', function(req, res) {
      var data = req.body.first;
      var date = moment(req.body.first.sdate).format('YYYY-MM-DD');
      var sql = "declare @EventEID_Id int;INSERT INTO EventEID (ImportDesc, DateScanned, ImportFile) VALUES ('"+data.desc+"','"+date+"', 'testfile');SET @EventEID_Id=@@IDENTITY;Select @EventEID_Id as EventEID_Id";
      console.log(sql);
      request.query(sql, function (err, recordsets) {        
        if(err){
          // console.log(err);
        }
        else{
              console.log(recordsets,'first result');
            var data1 = req.body.second;
          for(var i=0;i<data1.length;i++){
            var sql1="Insert INTO EventEID_Import(EventEID_Id,EID,DateSync) values("+recordsets.recordset[0].EventEID_Id+",'"+data1[i].tagId+"','"+data1[i].timestamp+"')"
            request.query(sql1, function (err, recordsets1) {        
              if(err){
                // console.log(err)
              }
              else{
                console.log(recordsets1.recordset,'second result')
              }
            });
        }
        var sql2="Insert into Events_EventEID (EventEID_ID,EventId) select "+recordsets.recordset[0].EventEID_Id+",value from SplitString('"+req.body.first.events+"',',');Update EventEID_Import set DownloadOrder=(select count(*) from EventEID_Import where EventEID_Id="+recordsets.recordset[0].EventEID_Id+")"
        request.query(sql2, function (err, recordsets2) {        
          if(err){
            console.log(err,'err')
            res.sendStatus(500);
          }
          else{
            console.log(recordsets2.recordset,'third')
            res.sendStatus(200);
          }
        });
        }
      });
  });
  });
// -------------------------------------------------------------Bulk Email----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/view', function(req, res) {
      var sql = "select  * from (select reference as membernumber, field, value as oldvalue,case when field='Email' then email when field = 'NewsLetterPromotion' then cast(newsletterpromotion as varchar(25)) end as  newvalue,datestamp from tempUpdatedFields u join members m on u.reference = m.membernumber) a where(isnull(oldvalue,'') <> newvalue) order by membernumber";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset.length)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//--------------------------------------------------------View Due Date Emails-------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/viewmemdue', function(req, res) {
      var sql = "SELECT * FROM Members m WHERE m.DueDate = CAST(GETDATE() AS DATE) AND m.Type NOT IN('Lifetime','Veterinarian')";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//--------------------------------------------------------Send Due Date Emails-------------------------------------
router.post('/sendmemdue', function(req, res) {
  var data = req.body;
  for(i=0;i<data.length;i++){
    var emails = data[i].Email;
    var names = data[i].FirstName;
    var paiddate = data[i].JoinDate;
    var duedate = data[i].DueDate;
    var type = data[i].Type;
    var transporter = nodemailer.createTransport({
      service: 'gmail',
      host: 'smtp.gmail.com',
      port: 465,
      secure: true, // use SSL
      auth: {
        user: 'abbi@integrity-tek.com',
        pass: 'Abbi@2021'
      }
    });           
    var mailOptions = {
      from: '', // sender address
      to: emails, // list of receivers
      subject: 'Membership Renewal Intimation',
      text: 'Your Membership has been expired'
    }
      // send mail with defined transport object
      transporter.sendMail(mailOptions, function(error, response){
        if(error){
          console.log("Email could not sent due to error: "+error);
        }else{
          // console.log("Email has been sent successfully");
        }
      });
    }
  });
// -------------------------------------------------------------Bulk Email Delete----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deletebulkemail', function(req, res) {
      var sql = "delete from tempUpdatedFields";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
    });
  });
// -------------------------------------------------------------Membership Prices----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/priceadmin', function(req, res) {
      var sql = "SELECT MembershipPriceID, Type, Price, MembershipYear FROM MembershipPrice ORDER BY MembershipYear DESC, Type ASC";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Table Membership Price----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/tablemembershipprice', function(req, res) {
      var sql = "SELECT MembershipYear, Type, Description, Price, NewMembership, MembershipPriceID  FROM MembershipPrice WHERE (MembershipPriceID = "+req.body.MembershipPriceID+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
    });
  });
// -------------------------------------------------------------Update Membership Price----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updatemembershipprice', function(req, res) {
      // console.log(req.body)
      var sql = "UPDATE MembershipPrice SET MembershipYear = "+req.body.MembershipYear+", Type = '"+req.body.Type+"', Description = '"+req.body.Description+"', Price = "+req.body.Price+", NewMembership = "+req.body.NewMembership+" WHERE (MembershipPriceID = "+req.body.MembershipPriceID+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
    });
  });
// -------------------------------------------------------------New Membership Price----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/newmembershipprice', function(req, res) {
      // console.log(req.body)
      var sql = "INSERT INTO MembershipPrice (MembershipYear, Type, Description, Price, NewMembership) VALUES ("+req.body.MembershipYear+", '"+req.body.Type+"', '"+req.body.Description+"', "+req.body.Price+", "+req.body.NewMembership+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          console.log(err,'error')
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
    });
  });
// -------------------------------------------------------------Registration Prices----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/viewregprice', function(req, res) {
      var sql = "SELECT RegistrationPriceID, BirthYear, CASE Gender WHEN 'F' THEN 'Cow' WHEN 'M' THEN 'Bull' ELSE 'both' END AS Gender, Reg_1yr, Reg_2yr, Reg_2yr_older, CatOnly, CatUpgrade, NewMember, NewMember_1yr_older, RushRegistration FROM AnimalRegistrationPrice ORDER BY BirthYear ASC, Gender DESC";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Add Reg Price----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addregprice', function(req, res) {
      // console.log(req.body)
      var sql = "INSERT INTO AnimalRegistrationPrice (BirthYear, Gender, Reg_1yr, Reg_2yr, Reg_2yr_older, CatOnly, CatUpgrade, NewMember, NewMember_1yr_older, RushRegistration) VALUES ("+req.body.BirthYear+",'"+req.body.Gender+"',"+req.body.Reg_1yr+","+req.body.Reg_2yr+","+req.body.Reg_2yr_older+","+req.body.CatOnly+","+req.body.CatUpgrade+","+req.body.NewMember+","+req.body.NewMember_1yr_older+","+req.body.RushRegistration+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
    });
  });
// -------------------------------------------------------------Edit Reg Price----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editregprice', function(req, res) {
      // console.log(req.body)
      var sql = "SELECT BirthYear, Gender, Reg_1yr, Reg_2yr, Reg_2yr_older, CatOnly, CatUpgrade, NewMember, NewMember_1yr_older, RushRegistration, RegistrationPriceID FROM AnimalRegistrationPrice WHERE (RegistrationPriceID = "+req.body.RegistrationPriceID+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
    });
  });
// -------------------------------------------------------------Update Reg Price----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updateregprice', function(req, res) {
      // console.log(req.body)
      var sql = "UPDATE AnimalRegistrationPrice SET BirthYear = "+req.body.BirthYear+", Gender = '"+req.body.Gender+"', Reg_1yr ="+req.body.Reg_1yr+" , Reg_2yr = "+req.body.Reg_2yr+", Reg_2yr_older ="+req.body.Reg_2yr_older+" , CatOnly = "+req.body.CatOnly+", CatUpgrade = "+req.body.CatUpgrade+", NewMember = "+req.body.NewMember+", NewMember_1yr_older ="+req.body.NewMember_1yr_older+" , RushRegistration = "+req.body.RushRegistration+" WHERE (RegistrationPriceID ="+req.body.RegistrationPriceID+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
    });
  });
// -------------------------------------------------------------WorkOrder Prices----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/viewwop', function(req, res) {
      // console.log(req.body)
      var sql = "select Wol.LineItemId,Wol.CategoryId,PricingYear,Description,Wol.Price,StoreItem,ItemPostage,ItemPostageType,ItemSortOrder,NewBreederOnly,ReportCategoryId,Woc.Category from WorkOrderLineItems Wol Join WorkOrderCategory Woc On Wol.CategoryId=Woc.CategoryId where (("+req.body.Year+" is null) or Wol.PricingYear="+req.body.Year+") And (("+req.body.Cid+" is null) or Wol.CategoryId="+req.body.Cid+") order by PricingYear desc,CategoryId";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Add WorkOrder Prices----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/newwop', function(req, res) {
    // console.log(req.body)
    var sql = "insert into WorkOrderLineItems (CategoryId,PricingYear,Description,Price,ItemPostage,ItemPostageType,NewBreederOnly)Values("+req.body.cat+","+req.body.year+",'"+req.body.desc+"',"+req.body.price+","+req.body.postage+",'"+req.body.type+"','"+req.body.breeder+"')";
    // console.log(sql)
    request.query(sql, function (err, recordsets) {
      if (err) {
        // console.log(err)
        res.sendStatus(500);
      }
      else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
  });
  });
// -------------------------------------------------------------Update WorkOrder Prices----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/Updatewoprices', function(req, res) {
    // console.log(req.body)
    var sql = "Update WorkOrderLineItems set PricingYear="+req.body.PricingYear+",Description='"+req.body.Description+"',Price="+req.body.Price+",ItemPostage="+req.body.ItemPostage+",ItemPostageType="+req.body.ItemPostageType+",NewBreederOnly='"+req.body.NewBreederOnly+"' Where LineItemId="+req.body.LineItemId+"";
    // console.log(sql)
    request.query(sql, function (err, recordsets) {
      if (err) {
        // console.log(err)
        res.sendStatus(500);
      }
      else {
          // console.log(recordsets.recordset)
          res.sendStatus(200)
        }
      });
  });
  });
// -------------------------------------------------------------Get Pricing Year and Category Dropdowns----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/getpycat', function(req, res) {
      var sql = "Select Distinct PricingYear from WorkOrderLineItems"
      var sql1 = "Select CategoryId,Category from WorkOrderCategory"
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        request.query(sql1, function (err, recordsets1) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            res.send({Priceyear : recordsets.recordset,Category : recordsets1.recordset});
          }
        });
      });
    });
  });
// -------------------------------------------------------------View Utilities----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/viewutilities', function(req, res) {
      var sql = "SELECT UserID, UserName, FirstName, LastName FROM Users";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Edit Utilities----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editutilities', function(req, res) {
      // console.log(req.body)
      var sql = "SELECT UserName, Password, FirstName, LastName, SecurityLevel, UserID FROM Users WHERE (UserID="+req.body.UserID+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
    });
  });
// -------------------------------------------------------------Update Utilities----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updateutilities', function(req, res) {
      // console.log(req.body)
      var sql = "UPDATE Users SET UserName = '"+req.body.UserName+"', Password = '"+req.body.Password+"', FirstName = '"+req.body.FirstName+"', LastName ='"+req.body.LastName+"', SecurityLevel ="+req.body.SecurityLevel+" WHERE (UserID ="+req.body.UserID+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------Delete Utilities----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deleteutilities', function(req, res) {
      // console.log(req.body)
      var sql = "delete from Users where UserID ="+req.body.UserID+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
    });
  });
// -------------------------------------------------------------Add Utilities----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addutilities', function(req, res) {
      // console.log(req.body)
      var sql = "INSERT INTO Users (UserName, Password, FirstName, LastName, SecurityLevel) VALUES ('"+req.body.UserName+"','"+req.body.Password+"', '"+req.body.FirstName+"','"+req.body.LastName+"', "+req.body.SecurityLevel+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------View Exports----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/viewexports', function(req, res) {
      var sql = "SELECT * FROM ExportTarget order by category asc, defaultExport desc";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Edit Exports----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editexports', function(req, res) {
      var sql = "SELECT * FROM ExportTarget where ExportTargetId = "+req.body.ExportTargetId+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
//-------------------------------------------Update Exports---------------------------------------------
router.post('/addExports', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('Category', sql.VarChar(25), req.body.Category);
    request.input('TransferType', sql.VarChar(25), req.body.TransferType);
    request.input('Target', sql.VarChar(500), req.body.Target);
    request.input('CopyTarget', sql.VarChar(500), req.body.CopyTarget);
    request.input('AssociationCode', sql.VarChar(50), req.body.AssociationCode);
    request.input('AdditionalInfo', sql.Bit, req.body.AdditionalInfo);
    request.input('BaseFileName', sql.VarChar(100), req.body.BaseFileName);
    request.input('DefaultExport', sql.Bit, req.body.DefaultExport);
    request.input('CompanyName', sql.VarChar(100), req.body.CompanyName);
    request.input('ContactNames', sql.VarChar(255), req.body.ContactNames);
    request.input('Address', sql.VarChar(255), req.body.Address);
    request.input('City', sql.VarChar(100), req.body.City);
    request.input('State', sql.VarChar(2), req.body.State);
    request.input('Zip', sql.VarChar(10), req.body.Zip);
    request.input('Phone', sql.VarChar(50), req.body.Phone);
    request.input('AltPhone', sql.VarChar(50), req.body.AltPhone);
    request.input('Fax', sql.VarChar(50), req.body.Fax);
    request.input('Notes', sql.VarChar(255), req.body.Notes); 
    request.execute('_ExportTarget_Insert', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err);
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------------Delete Exports----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deleteexports', function(req, res) {
      var sql = "Delete from ExportTarget where ExportTargetID="+req.body.ExportTargetId+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------Database Backup----------------------------------------------------
router.get('/databasebackup', function(req, res) {
  // console.log(req.body)
  var date=moment().format('YYYY-MM-DD')
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var path='C:\\Siva\\'
    request.input('database', sql.VarChar(100), 'ABBI');
    request.input('backupDir', sql.VarChar(500), path);
    request.execute('_BackupDatabase', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200);
      }
    });
  });
});
//----------------------------------------------------------Upload Animal Earnings------------------------------------------------
sql.connect(config, function (err) { 
if (err) console.log(err);
// create Request object
var request = new sql.Request();
var storage = multer.diskStorage({ //multers disk storage settings
  destination: function (req, file, cb) {
    cb(null, 'public/uploads/EIDImport')
  },
  filename: function (req, file, cb) {
      //var datetimestamp = Date.now();
      cb(null, file.originalname)
  }
});
var upload = multer({ //multer settings
  storage: storage,
});
router.post('/animalearningupload',upload.single('file'), function(req, res) {
  console.log(req.file.path)
        xlsxj({
          input: req.file.path, 
          output: "output.json"
        }, function(err, result) {
          if(err) {
            console.log(err,'iiiiiiiiiiiii');
          }else {
            console.log(result,'res')
          var data1 = result;
          
        for(var i=0;i<data1.length;i++){
          var sql1="Insert into AnimalEarning(RegNo,EventName,EventDate,Score,Placing,MoneyEarned) values('"+data1[i].RegNo+"','"+data1[i].EventName+"','"+data1[i].EventDate+"','"+data1[i].Score+"','"+data1[i].Placing+"','"+data1[i].MoneyEarned+"');"
          console.log(sql1,'sql11')
          request.query(sql1, function (err, recordsets1) {        
            if(err){
              console.log(err)
              res.sendStatus(500).send({msg:'Upload Failed!'})
              
            }
            else{
              console.log(recordsets1.recordset)
              res.sendStatus(200).send({msg:'Uploaded Successfully!'})
            }
          });
      }}
      
        });
});
});
// -------------------------------------------------------------View Email Outbox----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/viewemailoutbox', function(req, res) {
      var sql = "SELECT DISTINCT FirstName + ' ' + LastName AS MemberName, Subject, AnimalID, Approved,EmailID FROM EmailOutbox INNER JOIN Members ON EmailOutbox.MemberID = Members.MemberNumber WHERE Sent = 0 and EmailOutbox.Type='DNA'";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Get Email Outbox----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/getoutboxemaildata', function(req, res) {
      var sql = "SELECT [GroupId], [GroupName], [Type], [LoggingFlag] FROM [EmailGroups] ORDER BY [GroupName], [Type]";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------DG List----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/dglist', function(req, res) {
      var sql = "Select eg.groupid, groupname from emailgroups eg where( type='Category' and  exists (select groupid from emailgroup_member where groupid=eg.groupid)) or type='Event List' order by groupname";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Event List----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/eventlist', function(req, res) {
      var sql = "Select Eventid, Event from events order by begindate desc";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Update Email Outbox----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/updateoutboxdata', function(req, res) {
      var sql = "Update [EmailGroups] SET [GroupName] = '"+req.body.GroupName+"',  [Type] = '"+req.body.Type+"', [LoggingFlag]  ='"+req.body.LoggingFlag+"' where groupid = "+req.body.GroupId+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------change dg----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/changedg', function(req, res) {
      // console.log(req.body)
      var sql = "Select m.email, cast(m.MemberNumber as varchar(50)) + ' - ' + isnull(m.MemberName, m.LastName + ', ' + m.FirstName) MemberName from EmailGroup_Member e join members m on e.memberno = m.membernumber where groupId = "+req.body.group+" and email is not null and email <> '' and email <> 'test@test.com'";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------add to queue----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/addqueue', function(req, res) {
      // console.log(req.body)
      var sql = "insert into emailOutbox (toAddress, Subject, Message, DateCreated, MemberId, Type, ReadReceiptEmail) values ('"+req.body.email+"', '"+req.body.subject+"', '"+req.body.body+"', getdate(), '"+req.body.membernumber+"',’Distribution’, '"+req.body.receipt+"')";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------Save Default----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/savedefault', function(req, res) {
      // console.log(req.body)
      var sql = "Update EmailGroups set DefaultSubject = '"+req.body.subject+"', DefaultBody='"+req.body.body+"' where GroupId = "+req.body.group+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
//----------------------------------------------------------change dg1-------------------------------------------------------
router.post('/changedg1', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('id', sql.Int, req.body.event);
    request.execute('_GetEventBulkMailDistributionList', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------Delete Email Outbox----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deleteoutboxdata', function(req, res) {
      var sql = "Delete from [EmailGroups] where [GroupId] = "+req.body.GroupId+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------Send Email Outbox----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/sendemailoutbox', function(req, res) {
      // console.log(req.body.Approved)
      if(req.body.Approved == 0){
        var sql = "UPDATE EmailOutbox SET Approved = 1 WHERE AnimalID ="+req.body.AnimalID+"";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets.recordset)
            // res.send(recordsets.recordset);
          }
        });
      }
      else{
        var sql = "UPDATE EmailOutbox SET Approved = 0 WHERE AnimalID ="+req.body.AnimalID+"";
        // console.log(sql)
        request.query(sql, function (err, recordsets) {
          if (err) {
            res.sendStatus(500);
          }
          else {
            // console.log(recordsets)
            // res.send(recordsets.recordset);
          }
        });
      }
    });
  });
//---------------------------------------------------------------Email Outbox delete------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/deleteemailoutbox', function(req, res) {
      // console.log(req.body)
      var sql = "delete from EmailOutbox where EmailID="+req.body.EmailID+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
    });
  });
// -------------------------------------------------------------Error Log----------------------------------------------------
router.get('/viewerrorlog', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.execute('_ErrorLog', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------------Breeder Certificate--------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/viewcertificate', function(req, res) {
      // console.log(req.body)
      var sql = "select BreedersCertId,CertificateNumber,FORMAT(CertificateDate,'MMM dd,yyyy') CertificateDate,SireRegno,BreederDisplay,(select Animal from Registration where RegNo=bc.SireRegno) Animal from BreedersCertificate bc where SireRegno="+req.body.SireRegno+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Certificates----------------------------------------------------
router.get('/viewcertificates', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.execute('_BreedersCertificate_List', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//-------------------------------------------Add Animal Incentives---------------------------------------------
router.post('/generatevoucher', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body;
  removeUndefinedProps(obj)
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('CertId', sql.Int, req.body.BreedersCertId);
    request.input('CertNo', sql.VarChar(10), req.body.CertificateNumber);
    request.input('CertDate', sql.DateTime, req.body.CertificateDate);
    request.input('SireRegNo', sql.Int, req.body.SireRegno);
    request.input('BreederDisplay', sql.VarChar(255), req.body.BreederDisplay);
    request.input('TrustType', sql.VarChar(10), req.body.TrustType);
    request.input('ProgramYear', sql.Int, req.body.ProgramYear);
    request.input('chkbt', sql.Bit, req.body.chkbt);
    request.input('type', sql.VarChar(10), 'Update');
    request.execute('_Genvouchers', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------Generate Voucher----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/generatevoucher1', function(req, res) {
      // console.log(req.body)
      var sql = "select top 10 SireRegNo,VoucherNo,(select CertificateNumber from BreedersCertificate where SireRegNo=o.SireRegNo) CertificateNo,(Select Animal from Registration where RegNo=o.SireRegNo) SireName,DtCreated from OffspringVouchers o where SireRegNo = "+req.body.SireRegno+" and VoucherNo <>'Admin Override' order by DtCreated desc";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Edit Certificates----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editcertificatesinc', function(req, res) {
      // console.log(req.body)
      var sql = "select bc.*, r.Animal, r.PrivateHerd,bt.TrustType,bt.ProgramYear from BreedersCertificate bc join Registration r on bc.sireregno = r.regno Left Join BreedersTrust bt on bc.SireRegno=bt.SireRegno where(breederscertid = "+req.body.BreedersCertId+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Offspring Voucher----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/offspringvoucher', function(req, res) {
      var sql = "select * from OffspringVouchers";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------Update Offspring Voucher----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/offspringupdatecert', function(req, res) {
      var sql = "Update OffspringVouchers set SireRegNo="+req.body.SireRegNo+",VoucherNo='"+req.body.VoucherNo+"',OffspringRegNo='"+req.body.OffspringRegNo+"',DtCreated="+req.body.DtCreated+",DtUsed="+req.body.DtUsed+",Notes='"+req.body.Notes+" where id="+req.body.id+"'";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets)
          res.sendStatus(200)
        }
      });
    });
  });
// -------------------------------------------------------------Delete Offspring Voucher----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/offspringdeletecert', function(req, res) {
      var sql = "Delete from OffspringVouchers  where id="+req.body.id+"";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets)
          res.sendStatus(200)
        }
      });
    });
  });
// -------------------------------------------------------------Add Offspring Voucher----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/offspringaddcert', function(req, res) {
      var sql = "Insert into OffspringVouchers(SireRegNo,VoucherNo,OffspringRegNo,DtCreated,DtUsed,Notes) values("+req.body.SireRegNo+","+req.body.VoucherNo+","+req.body.OffspringRegNo+",Getdate(),"+req.body.DtUsed+","+req.body.Notes+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets)
          res.sendStatus(200)
        }
      });
    });
  });
// -------------------------------------------------------------Get Animal Info Vouchers----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/getanimalinfo', function(req, res) {
      var sql = "select r.Animal, r.PrivateHerd, m.ranchname from  Registration r join members m on r.memberno = m.membernumber where(r.regno = "+req.body.regno+")";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          res.send(recordsets.recordset)
        }
      });
    });
  });
//-------------------------------------------Add Animal Incentives---------------------------------------------
router.post('/addbcanimalinv', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('CertId', sql.Int, 0);
    request.input('CertNo', sql.VarChar(10), req.body.animaldata.CertificateNumber);
    request.input('CertDate', sql.DateTime, req.body.animaldata.CertificateDate);
    request.input('SireRegNo', sql.Int, req.body.animal.regno);
    request.input('BreederDisplay', sql.VarChar(255), req.body.animaldata.ranchname);
    request.input('TrustType', sql.VarChar(10), req.body.animaldata.trusttype);
    request.input('ProgramYear', sql.Int, req.body.animaldata.year);
    request.input('chkbt', sql.Bit, req.body.animaldata.chkbt);
    request.input('type', sql.VarChar(10), 'Add');
    request.execute('_addbreederscertanimal', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
//-------------------------------------------Add Animal Incentives---------------------------------------------
router.post('/updatebcanimalinv', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    console.log(req.body,'req bodyyy')
    request.input('CertId', sql.Int, req.body.BreedersCertId);
    request.input('CertNo', sql.VarChar(10), req.body.CertificateNumber);
    request.input('CertDate', sql.DateTime, req.body.CertificateDate);
    request.input('SireRegNo', sql.Int, req.body.SireRegno);
    request.input('BreederDisplay', sql.VarChar(255), req.body.BreederDisplay);
    request.input('TrustType', sql.VarChar(10), req.body.TrustType);
    request.input('ProgramYear', sql.Int, req.body.ProgramYear);
    request.input('chkbt', sql.Bit, req.body.chkbt);
    request.input('type', sql.VarChar(10), 'Update');
    request.execute('_addbreederscertanimal', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------Super Stakes----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/stakesyearlist', function(req, res) {
      var sql = "Select distinct ProgramYear from SuperStakes order by ProgramYear";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
  });
// -------------------------------------------------------------PayOut And Overview Tab----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/superstakesdata', function(req, res) {
      var sql = "select a.*,(a.Bullpot*0.2) as paybull_2yr,(a.Bullpot*0.3) paybull_3yr,(a.Bullpot*0.5) paybull_4yr,(a.Parentpot*0.2) paypar_2yr,(a.Parentpot*0.3) paypar_3yr,(a.Parentpot*0.5) paypar_4yr,(a.Bullpot*0.6*0.2) pp1paybull_2yr,(a.Bullpot*0.6*0.3) pp1paybull_3yr,(a.Bullpot*0.6*0.5) pp1paybull_4yr,(a.Parentpot*0.6*0.2) pp1paypar_2yr,(a.Parentpot*0.6*0.3) pp1paypar_3yr,(a.Parentpot*0.6*0.5) pp1paypar_4yr,(a.Bullpot*0.4*0.2) pp2paybull_2yr,(a.Bullpot*0.4*0.3) pp2paybull_3yr,(a.Bullpot*0.4*0.5) pp2paybull_4yr,(a.Parentpot*0.4*0.2) pp2paypar_2yr,(a.Parentpot*0.4*0.3) pp2paypar_3yr,(a.Parentpot*0.4*0.5) pp2paypar_4yr from (select count(*) as ParticipantCount, sum(paymentAmount) as pottotal,(SUM(PaymentAmount)/5*3) as Bullpot,(SUM(PaymentAmount)/5) as Parentpot, count(distinct r.memberno) as MembersInProgram from superstakes ss join registration r on ss.regno = r.regno where ss.programyear = "+req.body.year+")a";
      // console.log(sql)
      request.query(sql, function (err, recordsets) {
        if (err) {
          // console.log(err)
          res.sendStatus(500);
        }
        else {
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
    });
  });
// -----------------------------------------------------------Participants---------------------------------------
router.post('/participantsss', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('ProgramYear', sql.Int, req.body.year);
    request.execute('_SuperStakes_GetParticipants', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Buckers Program Year Dropdown--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/bprogramyeardropdown', function(req, res) {
    var sql = "select ProgramYear from dbo.BackSeatBuckers union select year(getdate()) order by ProgramYear";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -----------------------------------------------------------Buckers Table Data---------------------------------------
router.post('/buckersyeardata', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('ProgramYear', sql.Int, req.body.year);
    request.execute('_BackSeatBuckers_List', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Delete Buckers Data--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletebuckerdata', function(req, res) {
    // console.log(req.body)
    var sql = "DELETE FROM BackSeatBuckers WHERE (BackSeatBuckersId = "+req.body.BackSeatBuckersId+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Get Buckers Data--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/getbuckersdata', function(req, res) {
    // console.log(req.body)
    var sql = "select reg.ID, reg.Animal, reg.PrivateHerd,YEAR(GETDATE()) as PrgYear,Format(GETDATE(),'MM/dd/yyyy') as Dateadded ,m.ranchname from Registration reg join members m on reg.memberno = m.membernumber where (reg.regno = "+req.body.regno+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Edit Buckers Data--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editbuckersdata', function(req, res) {
    // console.log(req.body)
    var sql = "select bsb.*, reg.Animal from BackSeatBuckers bsb join Registration reg on bsb.regno = reg.regno where (bsb.backseatbuckersid = "+req.body.BackSeatBuckersId+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Add Buckers Data--------------------------------------------------------
router.post('/addbuckersdata', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('BSBId', sql.Int, req.body.details.BackSeatBuckersId);
    request.input('RegNo', sql.Int, req.body.id.regno);
    request.input('BSBNo', sql.Int, req.body.details.BSB);
    request.input('ProgramYear', sql.Int, req.body.details.PrgYear);
    request.input('CreateDate', sql.VarChar(20), req.body.details.Dateadded);
    request.input('Type', sql.VarChar(10), 'Add');
    request.execute('_addupdate_backseatbuckers', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Update Buckers Data--------------------------------------------------------
router.post('/updatebuckersdata', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('BSBId', sql.Int, req.body.BackSeatBuckersId);
    request.input('RegNo', sql.Int, req.body.Regno);
    request.input('BSBNo', sql.Int, req.body.BackSeatBuckersNumber);
    request.input('ProgramYear', sql.Int, req.body.ProgramYear);
    request.input('CreateDate', sql.VarChar(20), req.body.CreateDate);
    request.input('Type', sql.VarChar(10), 'Update');
    request.execute('_addupdate_backseatbuckers', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Products Dropdown--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/onlineproducts', function(req, res) {
    var sql = "SELECT DISTINCT ProductCategory FROM Inventory_Store WHERE display = 1";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------View Store Data--------------------------------------------------------
router.post('/viewproducts', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('Category', sql.VarChar(250), req.body.ProductCategory);
    request.input('Admin', sql.Int, 1);
    request.input('Member', sql.Int, 0);
    request.input('Vet', sql.Int, 0);
    request.execute('_onlineStore_Products', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});

// -------------------------------------------------------Reports Dropdown--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/reportcategory', function(req, res) {
    var sql = "Select ReportCategoryId, Heading from ReportCategories where reportName = 'Banking Report' order by sortorder";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Message Dropdown--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/selectmessage', function(req, res) {
    var sql = "SELECT DISTINCT OutOfStockMsg FROM Inventory_Store WHERE (OutOfStockMsg is not null) and (OutOfStockMsg <> '') ORDER BY OutOfStockMsg";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Message Dropdown--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/selectmessage', function(req, res) {
    var sql = "SELECT DISTINCT OutOfStockMsg FROM Inventory_Store WHERE (OutOfStockMsg is not null) and (OutOfStockMsg <> '') ORDER BY OutOfStockMsg";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Display Temp Data--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/displaytempdata', function(req, res) {
    var sql = "select * from tempproductoptions";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Add Products In Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/tempproducts', function(req, res) {
    var sql = "insert into tempproductoptions(Decsription,OptionCode,Quantity,ExtraCharge,ExtraWeight) values ('"+req.body.Decsription+"','"+req.body.OptionCode+"',"+req.body.Quantity+","+req.body.ExtraCharge+","+req.body.ExtraWeight+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
    });
  });
});
// -------------------------------------------------------Edit Products In Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editnewproducts', function(req, res) {
    var sql = "select * from tempproductoptions where ID = "+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Update Products In Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/updatenewproducts', function(req, res) {
    var sql = "Update tempproductoptions Set Decsription='"+req.body.Decsription+"',OptionCode='"+req.body.OptionCode+"',Quantity="+req.body.Quantity+",ExtraCharge="+req.body.ExtraCharge+",ExtraWeight="+req.body.ExtraWeight+" where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Delete Products In Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletenewproducts', function(req, res) {
    var sql = "Delete from tempproductoptions where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.sendStatus(200);
      }
    });
  });
});
//-------------------------------------------Save Add New Products---------------------------------------------
router.post('/saveaddnewproducts', function(req, res) {
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('CommandType', sql.VarChar(200), req.body.CommandType);
    request.input('ProductID', sql.Int, req.body.ProductID);
    request.input('ProductCategory', sql.VarChar(200), req.body.ProductCategory);
    request.input('ProductNumber', sql.VarChar(200), req.body.ProductNumber);
    request.input('ProductName', sql.VarChar(200), req.body.ProductName);
    request.input('Price', sql.Int, req.body.Price);
    request.input('Cost', sql.Int, req.body.Cost);
    request.input('QtyOnHand', sql.Int, req.body.QtyOnHand);
    request.input('OutOfStockMsg', sql.VarChar(200), req.body.OutOfStockMsg);
    request.input('Weight', sql.Int, req.body.Weight);
    request.input('Picture', sql.VarChar(200), req.body.Picture);
    request.input('ProductDescription', sql.VarChar(400), req.body.ProductDescription);
    request.input('MembersOnly', sql.Int, req.body.MembersOnly);
    request.input('Taxable', sql.Int, req.body.Taxable);
    request.input('VetsOnly', sql.Int, req.body.VetsOnly);
    request.input('Display', sql.Bit, req.body.Display);
    request.input('USBBA', sql.Bit, req.body.USBBA);
    request.input('ReportCategoryId', sql.Int, req.body.ReportCategoryId); 
    request.execute('_addnewproduct', function(err, recordsets, returnValue, affected) {
      if(err){
        console.log(err);
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------View Data In Edit Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editdata1', function(req, res) {
    // console.log(req.body)
    var sql = "Select * from Inventory_Store where ProductId="+req.body.ProductID+"";
    var sql1 = "Select * from Inventory_Options where ProductId="+req.body.ProductID+"";
    // console.log(sql1);
    request.query(sql, function (err, recordsets) {   
      request.query(sql1, function (err, recordsets1) {           
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets1.recordset)
        res.send({details : recordsets.recordset, options : recordsets1.recordset})
      }
    });
    });
  });
});
// -------------------------------------------------------Add Products In Edit Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/tempproducts1', function(req, res) {
    var sql = "insert into tempproductoptions(Decsription,OptionCode,Quantity,ExtraCharge,ExtraWeight) values ('"+req.body.Decsription+"','"+req.body.OptionCode+"',"+req.body.Quantity+","+req.body.ExtraCharge+","+req.body.ExtraWeight+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
    });
  });
});
// -------------------------------------------------------Edit Products In Edit Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editnewproducts1', function(req, res) {
    var sql = "select * from tempproductoptions where ID = "+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Update Products In Edit Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/updatenewproducts1', function(req, res) {
    var sql = "Update tempproductoptions Set Decsription='"+req.body.Decsription+"',OptionCode='"+req.body.OptionCode+"',Quantity="+req.body.Quantity+",ExtraCharge="+req.body.ExtraCharge+",ExtraWeight="+req.body.ExtraWeight+" where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Delete Products In Edit Table--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletenewproducts1', function(req, res) {
    var sql = "Delete from tempproductoptions where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.sendStatus(200);
      }
    });
  });
});
//-------------------------------------------Save Edit New Products---------------------------------------------
var storage = multer.diskStorage({
  destination: '/images/store/',
  filename: function (req, file, cb) {
    cb(null, file.originalname.replace(path.extname(file.originalname)+path.extname(file.originalname)))
  }
})
var upload = multer({ storage: storage })
router.post('/saveaddnewproducts1', upload.single('Picture'), function(req, res) {
  // console.log(req.body);
  // console.log(req.file.originalname);
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
      // console.log(req.body)
      sql.connect(config, function (err) { 
        if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('CommandType', sql.VarChar(200), 'UPDATE');
    request.input('ProductID', sql.Int, req.body.ProductID);
    request.input('ProductCategory', sql.VarChar(200), req.body.ProductCategory);
    request.input('ProductNumber', sql.VarChar(200), req.body.ProductNumber);
    request.input('ProductName', sql.VarChar(200), req.body.ProductName);
    request.input('Price', sql.Int, req.body.Price);
    request.input('Cost', sql.Int, req.body.Cost);
    request.input('QtyOnHand', sql.Int, req.body.QtyOnHand);
    request.input('OutOfStockMsg', sql.VarChar(200), req.body.OutOfStockMsg);
    request.input('Weight', sql.Int, req.body.Weight);
    request.input('Picture', sql.VarChar(200), req.file.originalname);
    request.input('ProductDescription', sql.VarChar(400), req.body.ProductDescription);
    request.input('MembersOnly', sql.Bit, req.body.MembersOnly);
    request.input('Taxable', sql.Int, req.body.Taxable);
    request.input('VetsOnly', sql.Bit, req.body.VetsOnly);
    request.input('Display', sql.Bit, req.body.Display);
    request.input('USBBA', sql.Bit, req.body.USBBA);
    request.input('ReportCategoryId', sql.Int, req.body.ReportCategoryId); 
    request.execute('_onlineStore_Select_Insert_Update_Delete', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err);
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets.recordset)
      res.send(recordsets.recordset);
    }
  });
  });
    });
// -------------------------------------------------------Delete Added Product--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deleteaddedproduct', function(req, res) {
    // console.log(req.body)
    var sql = "Delete from Inventory_Store where ProductID="+req.body.ProductID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {           
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Get Discount Manager Data--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/getdiscountdata', function(req, res) {
    var sql = "Select discountid, isnull(discountcode, 'View Discount') as discountcode, discounttype, discountAmount, MinOrderAmount, Limit, Description, startdate, enddate from OnlineStore_Discounts order by startdate desc";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Add New Discount--------------------------------------------------------
router.post('/addnewdiscount', function(req, res) {

  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    // console.log(req.body)
    request.input('discountCode', sql.VarChar(25), req.body.discountcode);
    request.input('DiscountType', sql.VarChar(25), req.body.discounttype);
    request.input('DiscountAmount', sql.Decimal(8,2), req.body.discountAmount);
    request.input('MinOrderAmount', sql.Int, req.body.MinOrderAmount);
    request.input('Limit', sql.Int, req.body.Limit);
    request.input('Description', sql.VarChar(100), req.body.Description);
    request.input('StartDate', sql.DateTime, req.body.startdate);
    request.input('endDate', sql.DateTime, req.body.enddate);
    request.execute('_OnlineStore_AddDiscount', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Edit Discount--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editDiscount', function(req, res) {
    var sql = "select * from OnlineStore_Discounts where discountId = "+req.body.discountid+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Update Discount--------------------------------------------------------
router.post('/updatediscount', function(req, res) {

  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    // console.log(req.body)
    request.input('discountId', sql.VarChar(25), req.body.discountId);
    request.input('discountCode', sql.VarChar(25), req.body.discountcode);
    request.input('DiscountType', sql.VarChar(25), req.body.DiscountType);
    request.input('DiscountAmount', sql.Decimal(8,2), req.body.DiscountAmount);
    request.input('MinOrderAmount', sql.Int, req.body.MinOrderAmount);
    request.input('Limit', sql.Int, req.body.Limit);
    request.input('Description', sql.VarChar(100), req.body.Description);
    request.input('StartDate', sql.DateTime, req.body.StartDate);
    request.input('endDate', sql.DateTime, req.body.endDate);
    request.execute('_OnlineStore_EditDiscount', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Delete Discount--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletediscount', function(req, res) {
    var sql = "Delete from OnlineStore_Discounts where discountId = "+req.body.discountid+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Existing List--------------------------------------------------------
router.get('/addexistingprod', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('Category', sql.VarChar(250), null);
    request.input('Admin', sql.Bit, 1);
    request.input('Member', sql.Bit, 0);
    request.input('Vet', sql.Bit, 0);
    request.execute('_onlineStore_Products', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Add Existing To List--------------------------------------------------------
router.post('/addproducttolist', function(req, res) {
  // console.log(req.body.Discount.discountId)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('discountId', sql.Int, req.body.Discount.discountId);
    request.input('ProductId', sql.Int, req.body.Product.ProductID);
    request.execute('_addexistingproductsNew', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
      // console.log(recordsets)
      res.send(recordsets.recordset);
    }
  });
  });
});
// -------------------------------------------------------Delete Existing Products--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deleteexistingproducts', function(req, res) {
    var sql = "Delete from Discount_products where ProductId="+req.body.ProductId+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Show Existing Products--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showexistinglist', function(req, res) {
    // console.log(req.body)
    var sql = "Select p.ProductId, ProductNumber, ProductName, Price, qtyOnHand from Discount_Products d join Inventory_Store p on d.productId = p.productId where d.discountId ="+req.body.discountid+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------User Data----------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/userdata', function(req, res) {
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
    console.log(req.session.user[0].Type)
    var name = req.session.user[0].LastName+' '+req.session.user[0].FirstName;
    var number = req.session.user[0].MemberNumber;
    var type = req.session.user[0].Type;
    var country = req.session.user[0].Country;
    var image = req.session.user[0].Picture;
    var picstatus = req.session.user[0].picstatus;
    var sql="select picstatus from members where MemberNumber="+number+" and Picture is not null and picstatus=0"
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        console.log(recordsets.recordset);
        res.send({memname : name, memnumber : number, memtype : type, memcoun : country, image : image, picstatus : recordsets.recordset})
      }
    });
  }
});
});
//-------------------------------------------------------------Due Date in renew----------------------------------------------------
router.get('/getrenewdate', function(req, res) {
  if(req.session && req.session.user){
    res.locals.user = req.session.user;
    var date = moment(req.session.user[0].DueDate).format('MM-DD-yyyy');
    res.send(date)
  }
});
//-------------------------------------------------------------Certificate in reports------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/certicount', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT COUNT(ID) AS ID FROM Registration WHERE (PendingPrinting = 1)";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------Certificate print Batch------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/certificateanimalprint', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT r.RegNo,r.Animal,r.PrivateHerd,r.Description,r.Birthdate,m.RanchName,(m.LastName+','+m.FirstName) AS Membername,m.MemberNumber FROM Registration r JOIN Members M ON r.MemberNo=m.MemberNumber WHERE PendingPrinting = 1";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------Certificate Search animal view------------------------------
router.get('/viewcertsearchanimal', function(req, res) {
  // console.log(req.body.Discount.discountId)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body.animaldata;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.execute('_PrintCertificate', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets)
        res.send(recordsets.recordset);
      }
    });
  });
});
//-------------------------------------------------------------Delete Cert Search Animal------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletecertsearchanimal', function(req, res) {
    // console.log(req.body)
    var sql = "UPDATE Registration SET PendingPrinting = 0 WHERE RegNo = "+req.body.RegNo+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------Cert Search Animal------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/certsearchanimal', function(req, res) {
    // console.log(req.body)
    var sql = "IF EXISTS(SELECT COUNT(RegNo) AS RegNo FROM Registration WHERE ((RegNo ="+req.body.regno+") AND (((LEN(Sire) > 0) OR (LEN(Dam) > 0)) OR ((Verified = 'REF') OR (Status = 'Complete-No Match'))))) UPDATE Registration SET PendingPrinting = 1 WHERE ((RegNo = "+req.body.regno+" ) AND ((Status = 'Complete-DNA Dam') OR (Status = 'Complete-DNA Sire') OR (Status = 'Complete') OR (Verified = 'REF')))";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------Add Regno Range Certi------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/addregnorangecerti', function(req, res) {
    // console.log(req.body)
    var sql = "UPDATE Registration SET PendingPrinting = 1 WHERE (RegNo BETWEEN "+req.body.from+" AND "+req.body.to+" ) AND ((Status = 'Complete-DNA Dam') OR (Status = 'Complete-DNA Sire') OR (Status = 'Complete') OR ((Verified = 'REF') AND (Status = 'Complete-No Match'))))";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {        
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
//-------------------------------------------------------------Update Pending Print Certi------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/updatependingprint', function(req, res) {
    if (req.body.ref == 'Ref') {
      var sql = "update r set pendingprinting = 1 from registration r join members m on r.memberno = m.membernumber where regno between "+req.body.from+" and "+req.body.to+" and status = 'Complete' and lastprinted is null and pendingprinting = 0 and m.country <> 'BR'; select @@RowCount;select count (*) as UpdateCount from registration r join members m on r.memberno = m.membernumber where regno between "+req.body.from+" and "+req.body.to+" and status = 'Complete' and lastprinted is null and pendingprinting = 0 and m.country <> 'BR'";
      // console.log(sql);
      request.query(sql, function (err, recordsets) {        
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          res.send(recordsets.recordset)
        }
      });
    }
    else{
      var sql = "update r set pendingprinting = 1 from registration r join members m on r.memberno = m.membernumber where regno between "+req.body.from+" and "+req.body.to+" and status = 'Complete' and lastprinted is null and pendingprinting = 0 and m.country ='BR'; select @@RowCount;select count (*) as UpdateCount from registration r join members m on r.memberno = m.membernumber where regno between "+req.body.from+" and "+req.body.to+" and status = 'Complete' and lastprinted is null and pendingprinting = 0 and m.country = 'BR'";
      // console.log(sql);
      request.query(sql, function (err, recordsets) {        
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          res.send(recordsets.recordset)
        }
      });
    }
  });
});
// -------------------------------------------------------Print Expired--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/printallexpired', function(req, res) {
      var sql = "SELECT * FROM Members WHERE ((DueDate < Getdate()) AND (Type <> 'Lifetime'))";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset)
  }
});
    });
  });
// -------------------------------------------------------Member Expiry Date--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/membershipexpiry', function(req, res) {
      var sql = "SELECT MemberNumber, MemberName, DueDate FROM Members WHERE ((DueDate BETWEEN '"+req.body.from+"' and '"+req.body.to+"') AND (Type <> 'Lifetime'))";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset)
  }
});
    });
  });
// -------------------------------------------------------Search Member Expiry--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/memberrenewsearch', function(req, res) {
      var sql = "SELECT MemberNumber, MemberName, DueDate FROM Members WHERE (MemberName LIKE '%"+req.body.name+"%')";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset)
  }
});
    });
  });
// -------------------------------------------------------Print Member Renewal--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/printmemrenewal', function(req, res) {
      var sql = "Select (lastname+"+"','"+"+firstname) as membername,Address,City,State,Zip,Country,Duedate from members where membernumber="+req.body.MemberNumber+"";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset)
  }
});
    });
  });
// -------------------------------------------------------Search Member Expiry Report--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/searchreportofrenewal', function(req, res) {
      function removeUndefinedProps(obj) {
        for (var prop in obj) {
          if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
            delete obj[prop];
          }
        }
        return obj;
      }
      var obj = req.body;
      removeUndefinedProps(obj)
      var sql = "SELECT * FROM Members WHERE ((PaidDate BETWEEN '"+req.body.sdate+"'  AND '"+req.body.edate+"') AND Type like (case when('"+obj.type+"'is null) or('"+obj.type+"'='') or('"+obj.type+"'='undefined') then '%' else '"+obj.type+"' end) AND (Type <> 'Lifetime') AND (Type <> 'Inactive') AND (Type <> 'Non Member'))";
      // console.log(sql)
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset)
  }
});
    });
  });
// -------------------------------------------------------Type Dropdown--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/typedropdown', function(req, res) {
      var sql = "SELECT DISTINCT Type FROM Members WHERE ((Type <> 'Lifetime') AND (Type <> 'Inactive') AND (Type <> 'Non Member'))";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset)
  }
});
    });
  });
//---------------------------------------------------------view mem pay-------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/viewmempay', function(req, res) {
      var sql = "SELECT  Payments.PaymentID, Payments.PaymentDate,Members.MemberNumber,Members.LastName + ', ' + Members.FirstName AS MemberName,Payments.Category,Payments.SubCategory,Events.Event EventName,Payments.Status,Payments.FromTheWeb,Payments.ParentPaymentId FROM dbo.Payments INNER JOIN dbo.Members ON dbo.Payments.MemberID = dbo.Members.MemberNumber LEFT OUTER JOIN Events ON Payments.EventID = Events.EventID Group by PaymentID,PaymentDate,MemberNumber,LastName+', '+FirstName,Payments.Category,SubCategory,Event,status,FromTheWeb,ParentPaymentId Order by PaymentDate desc offset "+ (req.body.page * req.body.recPerPage) +"rows fetch next " + req.body.recPerPage + "rows only";
      var sql1 = "select count(*)  as count from Payments"
      request.query(sql, function (err, recordset) {
        request.query(sql1, function (err, recordset1) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send({data : recordset.recordset, count : recordset1.recordset})
  }
})
});
    });
  });
//---------------------------------------------------------Member Payments-----------------------------------------------------------------
router.post('/viewmemberpayments', function(req, res) {
  // console.log(req.body)
  // console.log(req.body,'reqbodyyyy')
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body;
  // console.log(req.body)
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
   
    request.input('Status', sql.VarChar(200), req.body.memberpay.status);
    request.input('Category', sql.VarChar(200), req.body.memberpay.category);
    request.input('Search', sql.VarChar(200), req.body.memberpay.search);
    request.input('MemberNo', sql.VarChar(200), req.body.memberpay.member);
    request.input('Page',sql.Int, req.body.page)
    request.input('RecsPerPage',sql.Int,req.body.recPerPage)
    request.execute('_MemberPayments', function(err, recordsets, returnValue, affected) {
    // request.stream = true;
    // console.log(recordsets.recordset)
    if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.send(recordsets.recordset);
      }
    });
  });
});
// router.post('/viewmemberpayments', async (req, res) => {
//   var request = new sql.Request();
//   request.input('Status', sql.VarChar(200), req.body.status);
//   request.input('Category', sql.VarChar(200), req.body.category);
//   var result = await request.execute('_MemberPayments');
//   res.send(result.recordset)
// });
// -------------------------------------------------------Close Payment--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/checkclosedpayment', function(req, res) {
      var sql = "UPDATE Payments SET Status = 'Closed' WHERE PaymentID = "+req.body.PaymentID+"";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.sendStatus(200);
  }
});
    });
  });
// -------------------------------------------------------GET CHILD PAYMENT INFO--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/getchildInfo', function(req, res) {
      var sql = "SELECT PaymentID,PaymentAmount,ParentPaymentId,PaymentType FROM Payments WHERE ParentPaymentId="+req.body.ParentPaymentId+"";
      request.query(sql, function (err, recordset) {
        if(err){
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset);
  }
});
    });
  });
//-------------------------------------------member wo payments--------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editmemberpayment1', function(req, res) {
      // console.log(req.body)
      var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(isnull(SubtotalAmt,PaymentAmount),2) as SubtotalAmt, Round(isnull(HandlingFeeAmt,0.00),2) HandlingFeeAmt, Round(isnull(DiscountAmt,0.00),2) DiscountAmt, Round(PaymentAmount,2), FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentId+"";
      var sql1 = "Select w.*, m.type as CurrentType,(select Firstname+' '+Lastname from Users where UserId=w.AssignedTo) as AssignTo from WorkOrderMain w join members m on w.membernumber = m.membernumber where paymentId = "+req.body.PaymentId+"";
      var sql2 = "declare @PaymentID int = "+req.body.PaymentId+";if exists(select 1 from WorkOrderMain where PaymentID=@PaymentID and MembershipRenewalPrice is not null) Select 0 as categoryid,'Membership' as Category,null as note,null as LineItemId,'Renew Membership' as Description,null as LineId,(select MembershipRenewalPrice from WorkOrderMain where PaymentID=@PaymentID) as Price,null as StoreItem,null ItemPostage,null ItemPostageType, 0 as NewBreederOnly,null as Quantity,null postage,(select MembershipRenewalPrice from WorkOrderMain where PaymentID=@PaymentID) as Subtotal,null as LineitemComplete,null as Weight,Null as type if exists(select 1 from WorkOrderMain where PaymentID=@PaymentID and MembershipUpgradeType is not null)Select 99 as categoryid,'Membership' as Category,null as note,null as LineItemId,'Upgrade Membership' as Description,null as LineId,(select MembershipUpgradePrice from WorkOrderMain where PaymentID=@PaymentID) as Price,null as StoreItem,null ItemPostage,null ItemPostageType,0 as NewBreederOnly,null as Quantity,null postage,(select MembershipUpgradePrice from WorkOrderMain where PaymentID=@PaymentID) as Subtotal,null as LineitemComplete,null as Weight,(select MembershipUpgradeType from WorkOrderMain where PaymentID=@PaymentID) as type";
        // console.log(sql)
        var sql3 = "Select (case when li.Description like'DNA%' then 8 else li.Categoryid end) as Categoryid,(case when li.Description like'DNA%' then 'DNA kits' else Replace(c.Category+'('+isnull(c.Note,'')+')','()','') end) as Header,  li.LineItemId, li.Description, LineId, isnull(l.Price, li.price) as Price,li.StoreItem,isnull(l.Postage, li.ItemPostage) as ItemPostage,  li.ItemPostageType, NewBreederOnly,l.LineId, l.Quantity, l.postage,(l.Price * l.Quantity) + isnull(l.Postage,0) as SubTotal, l.LineItemComplete, null as weight from WorkOrderLineItems li join WorkOrderCategory c on li.categoryid = c.categoryid JOIN WorkOrderLines l on li.lineitemid = l.lineitemid Where l.workordernumber = (SELECT WorkOrderNumber FROM WorkOrderMain wom WHERE wom.PaymentId= "+req.body.PaymentId+") order by c.SortOrder, li.ItemSortOrder"
        request.query(sql, function (err, recordset) {
          request.query(sql1, function (err, recordset1) {
            request.query(sql2, function (err, recordset2) {
              request.query(sql3, function (err, recordset3) {
                if(err){
                  console.log(err)
                  res.sendStatus(500);
                }
                else{
                  // console.log(recordset.recordset);
            // console.log(recordset1.recordset);
            // console.log(recordset3.recordset);
            res.send({emps : recordset.recordset, wods : recordset1.recordset, wom : recordset2.recordset, wotable1 : recordset3.recordset});
          }
        });
            });
          });
        });
      });
  });
// -------------------------------------------------------Edit Payments--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/editmemberpayment', function(req, res) {
      if(req.body.Category == "Online Store"){
        // console.log(req.body)
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt, Round(PaymentAmount,2) PaymentAmount, FromTheWeb, CCType as paymentType, CCNumber as cc, CCExpDate as expire, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        var sql1 = "SELECT OnlineStore_Merchandise.OnlineStoreMerchandise, OnlineStore_Merchandise.ProductName, OnlineStore_Merchandise.Quantity, OnlineStore_Merchandise.TotalPrice, OnlineStore_Merchandise.Discount FROM OnlineStore_Merchandise INNER JOIN OnlineStore_Main ON OnlineStore_Merchandise.OnlineStoreMainID = OnlineStore_Main.OnlineStoreMainID INNER JOIN Payments ON OnlineStore_Main.PaymentID = Payments.PaymentID WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        var sql2 = "SELECT OnlineStore_Main.Tax, OnlineStore_Main.ShippingType, OnlineStore_Main.ShippingCost, OnlineStore_Main.Discount,ShippingFirstName + ' ' + ShippingLastName as ShippingName, ShippingAddress, ShippingCity, ShippingState, ShippingZipCode, ShippingCountry FROM OnlineStore_Main INNER JOIN Payments ON OnlineStore_Main.PaymentID = Payments.PaymentID WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        request.query(sql, function (err, recordset) {
          request.query(sql1, function (err, recordset1) {
            request.query(sql2, function (err, recordset2) {
              if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset.recordset);
            // console.log(recordset1.recordset);
            // console.log(recordset2.recordset);
            res.send({emps : recordset.recordset, merchand : recordset1.recordset, shipping : recordset2.recordset});
          }
        });
          });
        });
      }
      else if(req.body.Category == "Membership Renewal"){
        // console.log("Membership Renewal")
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt , Round(PaymentAmount,2) PaymentAmount , FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset.recordset);
            res.send({emps : recordset.recordset});
          }
        });
      }
      else if(req.body.Category == "New Membership"){
        // console.log("New Membership")
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt , Round(PaymentAmount,2) PaymentAmount , FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset.recordset);
            res.send({emps : recordset.recordset});
          }
        });
      }
      else if(req.body.Category == "Membership Upgrade"){
        // console.log("Membership Upgrade")
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt, Round(PaymentAmount,2) PaymentAmount, FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset.recordset);
            res.send({emps : recordset.recordset});
          }
        });
      }
      else if(req.body.Category == "USBBA Member"){
        // console.log("USBBA Member")
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt, Round(PaymentAmount,2) PaymentAmount, FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset.recordset);
            res.send({emps : recordset.recordset});
          }
        });
      }
      else if(req.body.Category == "USBBA General"){
        // console.log("USBBA General")
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt, Round(PaymentAmount,2) PaymentAmount, FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset.recordset);
            res.send({emps : recordset.recordset});
          }
        });
      }
      else if(req.body.Category == "American Heritage"){
        // console.log("American Heritage")
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt, Round(PaymentAmount,2) PaymentAmount, FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset.recordset);
            res.send({emps : recordset.recordset});
          }
        });
      }
      else if(req.body.Category == "Work Order"){
        console.log("Work Order",req.body)
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(isnull(SubtotalAmt,PaymentAmount),2) as SubtotalAmt, Round(isnull(HandlingFeeAmt,0.00),2) HandlingFeeAmt, Round(isnull(DiscountAmt,0.00),2) DiscountAmt, Round(PaymentAmount,2) PaymentAmount, FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        var sql1 = "Select w.*, m.type as CurrentType,(select Firstname+' '+Lastname from Users where UserId=w.AssignedTo) as AssignTo from WorkOrderMain w join members m on w.membernumber = m.membernumber where paymentId = "+req.body.PaymentID+"";
        var sql2 = "declare @PaymentID int = "+req.body.PaymentID+";if exists(select 1 from WorkOrderMain where PaymentID=@PaymentID and MembershipRenewalPrice is not null) Select 0 as categoryid,'Membership' as Category,null as note,null as LineItemId,'Renew Membership' as Description,null as LineId,(select MembershipRenewalPrice from WorkOrderMain where PaymentID=@PaymentID) as Price,null as StoreItem,null ItemPostage,null ItemPostageType, 0 as NewBreederOnly,null as Quantity,null postage,(select MembershipRenewalPrice from WorkOrderMain where PaymentID=@PaymentID) as Subtotal,null as LineitemComplete,null as Weight,Null as type if exists(select 1 from WorkOrderMain where PaymentID=@PaymentID and MembershipUpgradeType is not null)Select 99 as categoryid,'Membership' as Category,null as note,null as LineItemId,'Upgrade Membership' as Description,null as LineId,(select MembershipUpgradePrice from WorkOrderMain where PaymentID=@PaymentID) as Price,null as StoreItem,null ItemPostage,null ItemPostageType,0 as NewBreederOnly,null as Quantity,null postage,(select MembershipUpgradePrice from WorkOrderMain where PaymentID=@PaymentID) as Subtotal,null as LineitemComplete,null as Weight,(select MembershipUpgradeType from WorkOrderMain where PaymentID=@PaymentID) as type";
        // console.log(sql)
        var sql3 = "Select (case when li.Description like'DNA%' then 8 else li.Categoryid end) as Categoryid,(case when li.Description like'DNA%' then 'DNA kits' else Replace(c.Category+'('+isnull(c.Note,'')+')','()','') end) as Header,  li.LineItemId, li.Description, LineId, isnull(l.Price, li.price) as Price,li.StoreItem,isnull(l.Postage, li.ItemPostage) as ItemPostage,  li.ItemPostageType, NewBreederOnly,l.LineId, l.Quantity, l.postage,(l.Price * l.Quantity) + isnull(l.Postage,0) as SubTotal, l.LineItemComplete, null as weight from WorkOrderLineItems li join WorkOrderCategory c on li.categoryid = c.categoryid JOIN WorkOrderLines l on li.lineitemid = l.lineitemid Where l.workordernumber = (SELECT WorkOrderNumber FROM WorkOrderMain wom WHERE wom.PaymentId= "+req.body.PaymentID+") order by c.SortOrder, li.ItemSortOrder"
        request.query(sql, function (err, recordset) {
          request.query(sql1, function (err, recordset1) {
            request.query(sql2, function (err, recordset2) {
              request.query(sql3, function (err, recordset3) {
                if(err){
                  // console.log(err)
                  res.sendStatus(500);
                }
                else{
            // console.log(recordset.recordset);
            // console.log(recordset1.recordset);
            // console.log(recordset3.recordset);
            res.send({emps : recordset.recordset, wods : recordset1.recordset, wom : recordset2.recordset, wotable1 : recordset3.recordset});
          }
        });
            });
          });
        });
      }
      else if(req.body.Category == "Animal Registration"){
        // console.log("Animal Registration")
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt, Round(PaymentAmount,2) PaymentAmount, FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        var sql1 = "SELECT r.RegNo, r.Animal, r.PrivateHerd, r.Birthdate,r.dateregestered, r.typeservice, r.Horns, eid.status as EIDOrder, SuperStakesNumber FROM Registration r left join RegistrationEID eid on r.regno = eid.regno and eid.paymentid = "+req.body.PaymentID+" left join SuperStakes ss on r.regno = ss.regno WHERE r.PaymentID  = "+req.body.PaymentID+""
        // console.log(sql)
        request.query(sql, function (err, recordset) {
          request.query(sql1, function (err, recordset1) {
            if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordset.recordset);
            // console.log(recordset1.recordset);
            res.send({emps : recordset.recordset,animaltab : recordset1.recordset});
          }
        });
        });
      }
      else if(req.body.Category == "Event Registration"){
        // console.log("Animal Registration")
        var sql = "SELECT PaymentId, PaymentDate, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, Round(SubtotalAmt,2) SubtotalAmt, Round(HandlingFeeAmt,2) HandlingFeeAmt, Round(DiscountAmt,2) DiscountAmt, Round(PaymentAmount,2) PaymentAmount, FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentID+"";
        var sql1 = "SELECT DISTINCT Event,ev.EventID, BeginDate, EndDate, Location, ScheduledPayments FROM Events ev inner JOIN Events_Member m ON ev.EventID = m.EventID LEFT JOIN events_entry e ON m.eventsmemberid = e.eventsmemberid LEFT JOIN events_entrypayment p ON e.entryid = p.entryid WHERE m.PaymentID = "+req.body.PaymentID+" OR p.PaymentID = "+req.body.PaymentID+""
        var sql2 = "IF EXISTS(SELECT 1 FROM Events e JOIN Events_Member em ON e.EventID=em.EventID WHERE em.PaymentID="+req.body.PaymentID+" AND e.ScheduledPayments=1) select eve.entryid, pmt.paymentamount, pmt.PenaltyAmount, ani.regno, ani.privateherd, ani.animal,ps.paymentClosedate as scheduledDate, ps.finaleventpayment from events_entry eve join events_entryPayment pmt on eve.entryid = pmt.entryid join events_paymentschedule ps on pmt.paymentscheduleid = ps.scheduleid left join events_animal ani on eve.eventsanimalid = ani.eventregid where pmt.paymentid = "+req.body.PaymentID+" ELSE SELECT EventRegID, RegNo, PrivateHerd, Animal, Description, Fee, Penalty, ManuallyInserted,PaymentID FROM dbo.Events_Animal INNER JOIN Events_Member ON Events_Animal.EventsMember = Events_Member.EventsMemberID WHERE ((PaymentID IS NULL) OR (PaymentID = "+req.body.PaymentID+"))"
        // console.log(sql2)
        request.query(sql, function (err, recordset) {
          request.query(sql1, function (err, recordset1) {
            request.query(sql2, function (err, recordset2) {
              if(err){
                res.sendStatus(500);
              }
              else{
            // console.log(recordset1.recordset)
            res.send({emps : recordset.recordset,eventdata : recordset1.recordset, eventtable : recordset2.recordset});
          }
        });
          });
        });
      }
    });
});
//---------------------------------------------------Update Member Payments---------------------------------------------------------------------
router.post('/updatememberpayments', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNo', sql.Int, req.body.MemberID);
    request.input('membername', sql.VarChar(100), req.body.MemberName);
    request.input('address', sql.VarChar(250), req.body.Address);
    request.input('city', sql.VarChar(50), req.body.City);
    request.input('state', sql.VarChar(50), req.body.state);
    request.input('zip', sql.VarChar(50), req.body.Zip);
    request.input('country', sql.VarChar(50), req.body.Country);
    request.input('email', sql.VarChar(100), null);
    request.input('phone', sql.VarChar(50), req.body.Phone);
    request.input('paymentType', sql.VarChar(50), req.body.PaymentType);
    request.input('status', sql.VarChar(20), req.body.Status);
    request.input('Category', sql.VarChar(100), req.body.Category);
    request.input('PaymentId', sql.Int, req.body.PaymentId);
    request.input('EventID', sql.Int, req.body.EventID);
    request.input('notes', sql.VarChar(4000), req.body.Notes);
    request.input('Description', sql.VarChar(500), req.body.Description);
    request.input('Subtotal', sql.Money, amount);
    request.input('CCType', sql.VarChar(10), null);
    request.input('CCNumber', sql.VarChar(20), null);
    request.input('CCExpDate', sql.VarChar(10), null);
    request.input('CCSecCode', sql.VarChar(10), null);
    request.input('eChkABACode', sql.VarChar(10), null);
    request.input('eChkAcctNo', sql.VarChar(4), null);
    request.input('eChkAcctType', sql.VarChar(20), null);
    request.input('eChkBankName', sql.VarChar(50), null);
    request.input('eChkAcctName', sql.VarChar(50), null);
    request.input('SessionID', sql.VarChar(50), null);
    request.input('type', sql.VarChar(20), 'Update');
    request.execute('_addnewpayment', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.sendStatus(200)
      }
    });
  });
});
//---------------------------------------------------Update Member Payments---------------------------------------------------------------------
router.post('/saveworkorderpay', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.woords.Tot;
    // var amount = 1;
    // console.log(req.body,amount,'saveeeeeeeeeeeeeeeeeeeee')
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);
            
            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            // console.log(invoice)
            orderDetails.setDescription('Work Order Pay');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.woords.FirstName);
            billTo.setLastName('');
            billTo.setAddress(req.body.woords.BillingAddress);
            billTo.setCity(req.body.woords.BillingCity);
            billTo.setState(req.body.woords.BillingState);
            billTo.setZip(req.body.woords.BillingZip);
            billTo.setCountry(req.body.woords.BillingCountry);
            billTo.setPhoneNumber(req.body.woords.Phone);
            billTo.setEmail(req.body.woords.Email);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.woords.FirstName);
            shipTo.setLastName('');
            shipTo.setAddress(req.body.woords.BillingAddress);
            shipTo.setCity(req.body.woords.BillingCity);
            shipTo.setState(req.body.woords.BillingState);
            shipTo.setZip(req.body.woords.BillingZip);
            shipTo.setCountry(req.body.woords.BillingCountry);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.woords.Email);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(req.body.woords.Tot);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);
            transactionRequestType.setCustomer(customer);
      // console.log(abbi@integrity-tek.com)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(() => {
        var apiResponse = ctrl.getResponse();
        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

        if(response !== null) {
          if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
            if(response.getTransactionResponse().getMessages() !== null) {
              request.input('MemberNo', sql.Int, req.body.woords.MemberNumber);
              request.input('membername', sql.VarChar(100), req.body.woords.FirstName+" "+req.body.LastName );
              request.input('address', sql.VarChar(250), req.body.woords.BillingAddress);
              request.input('city', sql.VarChar(50), req.body.woords.BillingCity);
              request.input('state', sql.VarChar(50), req.body.woords.BillingState);
              request.input('zip', sql.VarChar(50), req.body.woords.BillingZip);
              request.input('country', sql.VarChar(50), req.body.woords.BillingCountry);
              request.input('email', sql.VarChar(100), req.body.woords.Email);
              request.input('phone', sql.VarChar(50), req.body.woords.Phone);
              request.input('paymentType', sql.VarChar(50), req.body.pay.Payment);
              request.input('status', sql.VarChar(20), req.body.woords.Status);
              request.input('Category', sql.VarChar(100), 'Work Order');
              request.input('PaymentId', sql.Int, req.body.woords.PaymentId);
              request.input('EventID', sql.Int, null);
              request.input('notes', sql.VarChar(4000), req.body.woords.Notes);
              request.input('Description', sql.VarChar(500), req.body.woords.description);
              request.input('Subtotal', sql.Money, amount);
              request.input('CCType', sql.VarChar(10), req.body.pay.Payment);
              request.input('CCNumber', sql.VarChar(20), req.body.pay.cc);
              request.input('CCExpDate', sql.VarChar(10), req.body.pay.expire);
              request.input('CCSecCode', sql.VarChar(10), req.body.pay.cvv);
              request.input('eChkABACode', sql.VarChar(10), null);
              request.input('eChkAcctNo', sql.VarChar(4), null);
              request.input('eChkAcctType', sql.VarChar(20), null);
              request.input('eChkBankName', sql.VarChar(50), null);
              request.input('eChkAcctName', sql.VarChar(50), null);
              request.input('SessionID', sql.VarChar(50), null);
              request.input('type', sql.VarChar(20), 'Add');
              request.execute('_addnewpayment', function(err, recordsets, returnValue, affected) {
                if(err){
                  // console.log(err)
                }
                else{
                  // console.log(recordsets.recordset)
                }
              });
              // console.log({msg : 'Transaction was successful.' })
              res.send({ msg: 'Transaction was successful.' });
            } else {
              if(response.getTransactionResponse().getErrors() !== null) {
                let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                res.send({ msg: `${code}: ${text}`
              });
              } else {
                res.send({ msg: 'Transaction failed.' });
              }
            }    
          } else {
            if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
              let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
              let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
              res.send({ msg: `${code}: ${text}`
            });
            } else {
              let code = response.getMessages().getMessage()[0].getCode();
              let text = response.getMessages().getMessage()[0].getText();
              res.send({ msg: `${code}: ${text}`
            });
            }   
          }    

        } else {
          res.send({ msg: 'No response.' });
        }
      });
}
else if(req.body.pay.Payment=='eCheck'){
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  //added code
  var bankAccountNum = req.body.pay.acno;
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);

  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('Work Order Pay');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.woords.FirstName);
  billTo.setLastName('');
  billTo.setAddress(req.body.woords.BillingAddress);
  billTo.setCity(req.body.woords.BillingCity);
  billTo.setState(req.body.woords.BillingState);
  billTo.setZip(req.body.woords.BillingZip);
  billTo.setCountry(req.body.woords.BillingCountry);
  billTo.setPhoneNumber(req.body.woords.Phone);
  billTo.setEmail(req.body.woords.Email);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.body.woords.FirstName);
  shipTo.setLastName('');
  shipTo.setAddress(req.body.woords.BillingAddress);
  shipTo.setCity(req.body.woords.BillingCity);
  shipTo.setState(req.body.woords.BillingState);
  shipTo.setZip(req.body.woords.BillingZip);
  shipTo.setCountry(req.body.woords.BillingCountry);

  var customer = new ApiContracts.CustomerDataType();
  customer.setEmail(req.body.woords.Email);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(req.body.woords.Tot);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);
  transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(function(){

        var apiResponse = ctrl.getResponse();

        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    //pretty print response
    // console.log(JSON.stringify(response, null, 2));

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          request.input('MemberNo', sql.Int, req.body.woords.MemberNumber);
          request.input('membername', sql.VarChar(100), req.body.woords.FirstName );
          request.input('address', sql.VarChar(250), req.body.woords.BillingAddress);
          request.input('city', sql.VarChar(50), req.body.woords.BillingCity);
          request.input('state', sql.VarChar(50), req.body.woords.BillingState);
          request.input('zip', sql.VarChar(50), req.body.woords.BillingZip);
          request.input('country', sql.VarChar(50), req.body.woords.BillingCountry);
          request.input('email', sql.VarChar(100), req.body.woords.Email);
          request.input('phone', sql.VarChar(50), req.body.woords.Phone);
          request.input('paymentType', sql.VarChar(50), req.body.pay.Payment);
          request.input('status', sql.VarChar(20), req.body.woords.Status);
          request.input('Category', sql.VarChar(100), 'Work Order');
          request.input('PaymentId', sql.Int, req.body.woords.PaymentId);
          request.input('EventID', sql.Int, null);
          request.input('notes', sql.VarChar(4000), req.body.woords.Notes);
          request.input('Description', sql.VarChar(500), req.body.woords.description);
          request.input('Subtotal', sql.Money, amount);
          request.input('CCType', sql.VarChar(10), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(20), null);
          request.input('CCExpDate', sql.VarChar(10), null);
          request.input('CCSecCode', sql.VarChar(10), null);
          request.input('eChkABACode', sql.VarChar(10), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('SessionID', sql.VarChar(50), null);
          request.input('type', sql.VarChar(20), 'Add');
          request.execute('_addnewpayment', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              // console.log(recordsets.recordset)
            }
          });
          // console.log({msg : 'Transaction was successful.' })
          res.send({ msg: 'Transaction was successful.' });
        }  
        else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
    }
    else{
      request.input('MemberNo', sql.Int, req.body.woords.MemberNumber);
      request.input('membername', sql.VarChar(100), req.body.woords.FirstName );
      request.input('address', sql.VarChar(250), req.body.woords.BillingAddress);
      request.input('city', sql.VarChar(50), req.body.woords.BillingCity);
      request.input('state', sql.VarChar(50), req.body.woords.BillingState);
      request.input('zip', sql.VarChar(50), req.body.woords.BillingZip);
      request.input('country', sql.VarChar(50), req.body.woords.BillingCountry);
      request.input('email', sql.VarChar(100), req.body.woords.Email);
      request.input('phone', sql.VarChar(50), req.body.woords.Phone);
      request.input('paymentType', sql.VarChar(50), req.body.pay.Payment);
      request.input('status', sql.VarChar(20), req.body.woords.Status);
      request.input('Category', sql.VarChar(100), 'Work Order');
      request.input('PaymentId', sql.Int, req.body.woords.PaymentId);
      request.input('EventID', sql.Int, null);
      request.input('notes', sql.VarChar(4000), req.body.woords.Notes);
      request.input('Description', sql.VarChar(500), req.body.woords.description);
      request.input('Subtotal', sql.Money, amount);
      request.input('CCType', sql.VarChar(10), req.body.pay.Payment);
      request.input('CCNumber', sql.VarChar(20), null);
      request.input('CCExpDate', sql.VarChar(10), null);
      request.input('CCSecCode', sql.VarChar(10), null);
      request.input('eChkABACode', sql.VarChar(10), null);
      request.input('eChkAcctNo', sql.VarChar(4), null);
      request.input('eChkAcctType', sql.VarChar(20), null);
      request.input('eChkBankName', sql.VarChar(50), null);
      request.input('eChkAcctName', sql.VarChar(50), null);
      request.input('SessionID', sql.VarChar(50), null);
      request.input('type', sql.VarChar(20), 'Add');
      request.execute('_addnewpayment', function(err, recordsets, returnValue, affected) {
        if(err){
          res.send({msg:'Error'});
        }
        else{
          res.send({msg:'successful'})
        }
      });
    }
  }
});
}
});
});
//---------------------------------------------------Save Additional Member Payments---------------------------------------------------------------------
router.post('/additionalmemberpayments', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.additional.PaymentAmount
    // var amount = 1; 
    console.log(req.body,'reqbodyyyyyy')
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            // console.log(invoice)
            orderDetails.setDescription('');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.additional.MemberName);
            billTo.setAddress(req.body.additional.Address);
            billTo.setCity(req.body.additional.City);
            billTo.setState(req.body.additional.state);
            billTo.setZip(req.body.additional.Zip);
            billTo.setCountry(req.body.additional.Country);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.additional.MemberName);
            shipTo.setAddress(req.body.additional.Address);
            shipTo.setCity(req.body.additional.City);
            shipTo.setState(req.body.additional.state);
            shipTo.setZip(req.body.additional.Zip);
            shipTo.setCountry(req.body.additional.Country);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);      
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    request.input('MemberNo', sql.Int, req.body.emps.MemberID);
                    request.input('membername', sql.VarChar(100), req.body.additional.MemberName);
                    request.input('address', sql.VarChar(250), req.body.additional.Address);
                    request.input('city', sql.VarChar(50), req.body.additional.City);
                    request.input('state', sql.VarChar(50), req.body.additional.state);
                    request.input('zip', sql.VarChar(50), req.body.additional.Zip);
                    request.input('country', sql.VarChar(50), req.body.additional.Country);
                    request.input('email', sql.VarChar(100), null);
                    request.input('phone', sql.VarChar(50), req.body.additional.Phone);
                    request.input('paymentType', sql.VarChar(50), req.body.pay.PaymentType);
                    request.input('status', sql.VarChar(20), req.body.additional.Status);
                    request.input('Category', sql.VarChar(100), req.body.emps.Category);
                    request.input('PaymentId', sql.Int, req.body.emps.PaymentId);
                    request.input('EventID', sql.Int, req.body.additional.EventID);
                    request.input('notes', sql.VarChar(4000), req.body.additional.Notes);
                    request.input('Description', sql.VarChar(500), req.body.additional.description);
                    request.input('Subtotal', sql.Money, req.body.SubtotalAmt);
  request.input('handling', sql.Int, req.body.additional.HandlingFeeAmt);
  request.input('discount', sql.Int, req.body.additional.DiscountAmt);
                    request.input('CCType', sql.VarChar(10), req.body.pay.Payment);
                    request.input('CCNumber', sql.VarChar(20), card);
                    request.input('CCExpDate', sql.VarChar(10), expire);
                    request.input('CCSecCode', sql.VarChar(10), cvv);
                    request.input('eChkABACode', sql.VarChar(10), null);
                    request.input('eChkAcctNo', sql.VarChar(4), null);
                    request.input('eChkAcctType', sql.VarChar(20), null);
                    request.input('eChkBankName', sql.VarChar(50), null);
                    request.input('eChkAcctName', sql.VarChar(50), null);
                    request.input('SessionID', sql.VarChar(50), null);
                    request.input('type', sql.VarChar(20), 'Add');
                    request.execute('_addnewpayment', function(err, recordsets, returnValue, affected) {
                      if(err){
                        // console.log(err)
                      }
                      else{
                        // console.log(recordsets.recordset)
                      }
                    });
                    // console.log({msg : 'Transaction was successful.' })
                    // console.log('Successfully created transaction with Transaction ID: ' + response.getTransactionResponse().getTransId());
                    // console.log('Response Code: ' + response.getTransactionResponse().getResponseCode());
                    res.send({ msg: 'Transaction was successful.' });
                  } else {
                    if(response.getTransactionResponse().getErrors() !== null) {
                      let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                      let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                      res.send({ msg: `${code}: ${text}`
                    });
                    } else {
                      res.send({ msg: 'Transaction failed.' });
                    }
                  }    
                } else {
                  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
                    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                    res.send({ msg: `${code}: ${text}`
                  });
                  } else {
                    let code = response.getMessages().getMessage()[0].getCode();
                    let text = response.getMessages().getMessage()[0].getText();
                    res.send({ msg: `${code}: ${text}`
                  });
                  }   
                }    

              } else {
                res.send({ msg: 'No response.' });
              }
            });
}
else if(req.body.pay.Payment=='eCheck'){
  // console.log(req.body.pay.Payment)
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);

  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('');

  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.additional.MemberName);
  billTo.setAddress(req.body.additional.Address);
  billTo.setCity(req.body.additional.City);
  billTo.setState(req.body.additional.state);
  billTo.setZip(req.body.additional.Zip);
  billTo.setCountry(req.body.additional.Country);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.body.additional.MemberName);
  shipTo.setAddress(req.body.additional.Address);
  shipTo.setCity(req.body.additional.City);
  shipTo.setState(req.body.additional.state);
  shipTo.setZip(req.body.additional.Zip);
  shipTo.setCountry(req.body.additional.Country);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);      
  var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    //pretty print response
    // console.log(JSON.stringify(response, null, 2));

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          request.input('MemberNo', sql.Int, req.body.emps.MemberID);
          request.input('membername', sql.VarChar(100), req.body.additional.MemberName);
          request.input('address', sql.VarChar(250), req.body.additional.Address);
          request.input('city', sql.VarChar(50), req.body.additional.City);
          request.input('state', sql.VarChar(50), req.body.additional.state);
          request.input('zip', sql.VarChar(50), req.body.additional.Zip);
          request.input('country', sql.VarChar(50), req.body.additional.Country);
          request.input('email', sql.VarChar(100), null);
          request.input('phone', sql.VarChar(50), req.body.additional.Phone);
          request.input('paymentType', sql.VarChar(50), req.body.pay.PaymentType);
          request.input('status', sql.VarChar(20), req.body.additional.Status);
          request.input('Category', sql.VarChar(100), req.body.emps.Category);
          request.input('PaymentId', sql.Int, req.body.emps.PaymentId);
          request.input('EventID', sql.Int, req.body.additional.EventID);
          request.input('notes', sql.VarChar(4000), req.body.additional.Notes);
          request.input('Description', sql.VarChar(500), req.body.additional.description);
          request.input('Subtotal', sql.Int, req.body.additional.SubtotalAmt);
  request.input('handling', sql.Int, req.body.additional.HandlingFeeAmt);
  request.input('discount', sql.Int, req.body.additional.DiscountAmt);
          request.input('CCType', sql.VarChar(10), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(20), null);
          request.input('CCExpDate', sql.VarChar(10), null);
          request.input('CCSecCode', sql.VarChar(10), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('SessionID', sql.VarChar(50), null);
          request.input('type', sql.VarChar(20), 'Add');
          request.execute('_addnewpayment', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              // console.log(recordsets.recordset)
            }
          });
          // console.log({msg : 'Transaction was successful.' })
          res.send({ msg: 'Transaction was successful.' });
        }  
        else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('MemberNo', sql.Int, req.body.emps.MemberID);
  request.input('membername', sql.VarChar(100), req.body.additional.MemberName);
  request.input('address', sql.VarChar(250), req.body.additional.Address);
  request.input('city', sql.VarChar(50), req.body.additional.City);
  request.input('state', sql.VarChar(50), req.body.additional.state);
  request.input('zip', sql.VarChar(50), req.body.additional.Zip);
  request.input('country', sql.VarChar(50), req.body.additional.Country);
  request.input('email', sql.VarChar(100), null);
  request.input('phone', sql.VarChar(50), req.body.additional.Phone);
  request.input('paymentType', sql.VarChar(50), req.body.pay.PaymentType);
  request.input('status', sql.VarChar(20), req.body.additional.Status);
  request.input('Category', sql.VarChar(100), req.body.emps.Category);
  request.input('PaymentId', sql.Int, req.body.emps.PaymentId);
  request.input('EventID', sql.Int, req.body.additional.EventID);
  request.input('notes', sql.VarChar(4000), req.body.additional.Notes);
  request.input('Description', sql.VarChar(500), req.body.additional.description);
  request.input('Subtotal', sql.Int, req.body.additional.SubtotalAmt);
  request.input('handling', sql.Int, req.body.additional.HandlingFeeAmt);
  request.input('discount', sql.Int, req.body.additional.DiscountAmt);
  request.input('CCType', sql.VarChar(10), req.body.pay.Payment);
  request.input('CCNumber', sql.VarChar(20), null);
  request.input('CCExpDate', sql.VarChar(10), null);
  request.input('CCSecCode', sql.VarChar(10), null);
  request.input('eChkABACode', sql.VarChar(9), null);
  request.input('eChkAcctNo', sql.VarChar(4), null);
  request.input('eChkAcctType', sql.VarChar(20), null);
  request.input('eChkAcctName', sql.VarChar(50), null);
  request.input('eChkBankName', sql.VarChar(50), null);
  request.input('SessionID', sql.VarChar(50), null);
  request.input('type', sql.VarChar(20), 'Add');
  request.execute('_addnewpayment', function(err, recordsets, returnValue, affected) {
    if(err){
      res.send({msg:'Error'});
    }
    else{
      res.send({msg:'successful'})
    }
  });
}
}
});
}
});
});
//---------------------------------------------------Event Check Member Payments---------------------------------------------------------------------
router.post('/eventcheck', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('EventID', sql.Int, req.body.eventdetails.EventID);
    request.input('MemberNo', sql.Int, req.body.check.memno);
    request.input('RegNo', sql.Int, req.body.check.regno);
    request.execute('_checkRegnomempay', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------Get Additional Payment--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.post('/getadditionalinfo', function(req, res) {
      var sql = "SELECT PaymentId,MemberNumber, PaymentDate, Email, MemberID, LastName + ', ' + FirstName AS MemberName,Address, City, state, Zip, Country, Phone, Status, PaymentType, Category, SubCategory, Payments.Notes, Payments.Description, EventID, SubtotalAmt, HandlingFeeAmt, DiscountAmt, PaymentAmount, FromTheWeb, CCType, CCNumber, CCExpDate, CCApproved, CCMessage, AuthorizeNum, eChkABACode, eChkAcctType, eChkAcctNo, eChkAcctName, eChkBankName, ParentPaymentId FROM Payments INNER JOIN Members ON Payments.MemberID = Members.MemberNumber WHERE Payments.PaymentID = "+req.body.PaymentId+"";
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset);
  }
});
    });
  });
//-----------------------------------------------------Membership type dropdown----------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/memtypedropdown', function(req, res) {
      var sql = "SELECT MembershipPriceID, Type, Price FROM MembershipPrice WHERE MembershipYear = Year(Getdate())  AND NewMembership = 1";
      request.query(sql, function (err, recordset) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
    // console.log(recordset.recordset);
    res.send(recordset.recordset);
  }
});
    });
  });
//---------------------------------------------------Add New Membership---------------------------------------------------------------------
router.post('/addnewmembership', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.amount;
    // var amount = 1;
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);
            
            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            // console.log(invoice)
            orderDetails.setDescription('New membership');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.newpay.fname);
            billTo.setLastName(req.body.newpay.lname);
            billTo.setAddress(req.body.newpay.baddress);
            billTo.setCity(req.body.newpay.bcity);
            billTo.setState(req.body.newpay.bstate);
            billTo.setZip(req.body.newpay.bzip);
            billTo.setCountry(req.body.newpay.bcountry);
            billTo.setPhoneNumber(req.body.newpay.cphone);
            billTo.setFaxNumber(req.body.newpay.cfax);
            billTo.setEmail(req.body.newpay.email);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.newpay.fname);
            shipTo.setLastName(req.body.newpay.lname);
            shipTo.setAddress(req.body.newpay.baddress);
            shipTo.setCity(req.body.newpay.bcity);
            shipTo.setState(req.body.newpay.bstate);
            shipTo.setZip(req.body.newpay.bzip);
            shipTo.setCountry(req.body.newpay.bcountry);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.newpay.email);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);
            transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(() => {
        var apiResponse = ctrl.getResponse();
        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

        if(response !== null) {
          if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
            if(response.getTransactionResponse().getMessages() !== null) {
              request.input('MemberNo', sql.Int, null);
      request.input('FirstName', sql.VarChar(250), req.body.newpay.fname);
      request.input('LastName', sql.VarChar(250), req.body.newpay.lname);
      request.input('Birthdate', sql.DateTime, req.body.newpay.bdate);
      request.input('Ranch', sql.VarChar(250), req.body.newpay.ranch);
      request.input('CAddress', sql.VarChar(250), req.body.newpay.caddress);
      request.input('CCity', sql.VarChar(250), req.body.newpay.ccity);
      request.input('CState', sql.VarChar(50), req.body.newpay.cstate);
      request.input('CZipCode', sql.VarChar(50), req.body.newpay.czip);
      request.input('CCountry', sql.VarChar(50), req.body.newpay.ccountry);
      request.input('BAddress', sql.VarChar(250), req.body.newpay.baddress);
      request.input('BCity', sql.VarChar(250), req.body.newpay.bcity);
      request.input('BState', sql.VarChar(50), req.body.newpay.bstate);
      request.input('BZipCode', sql.VarChar(50), req.body.newpay.bzip);
      request.input('BCountry', sql.VarChar(50), req.body.newpay.bcountry);
      request.input('Email', sql.VarChar(250), req.body.newpay.email);
      request.input('Phone', sql.VarChar(50), req.body.newpay.cphone);
      request.input('Phone_off', sql.VarChar(50), req.body.newpay.cmobile);
      request.input('fax', sql.VarChar(50), req.body.newpay.cfax);
      request.input('Usda', sql.VarChar(12), null);
      request.input('Notes', sql.VarChar(255), req.body.newpay.notes);
      request.input('Description', sql.VarChar(500), req.body.newpay.description);
      request.input('membershipID', sql.Int, req.body.newpay.type);
      request.input('PymtType', sql.VarChar(20), req.body.pay.paymentType);
      request.input('CCType', sql.VarChar(50), req.body.pay.PaymentType);
      request.input('CCNumber', sql.VarChar(50), req.body.pay.cc);
      request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
      request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
      request.input('eChkABACode', sql.VarChar(9), null);
      request.input('eChkAcctNo', sql.VarChar(4), null);
      request.input('eChkAcctType', sql.VarChar(20), null);
      request.input('eChkAcctName', sql.VarChar(50), null);
      request.input('eChkBankName', sql.VarChar(50), null);
      request.input('SessionId', sql.VarChar(100), null);
      request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
      request.input('Status', sql.VarChar(20), req.body.newpay.status);
      request.input('Category', sql.VarChar(50), 'New Membership');
      request.execute('addnewmemberpayments', function(err, recordsets, returnValue, affected) {
                if(err){
                  // console.log(err)
                }
                else{
                  // console.log(recordsets.recordset)
                }
              });
              // console.log({msg : 'Transaction was successful.' })
              res.send({ msg: 'Transaction was successful.' });
            } else {
              if(response.getTransactionResponse().getErrors() !== null) {
                let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                res.send({ msg: `${code}: ${text}`
              });
              } else {
                res.send({ msg: 'Transaction failed.' });
              }
            }    
          } else {
            if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
              let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
              let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
              res.send({ msg: `${code}: ${text}`
            });
            } else {
              let code = response.getMessages().getMessage()[0].getCode();
              let text = response.getMessages().getMessage()[0].getText();
              res.send({ msg: `${code}: ${text}`
            });
            }   
          }    

        } else {
          res.send({ msg: 'No response.' });
        }
      });
}
else if(req.body.pay.Payment=='eCheck'){
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  //added code
  var bankAccountNum = req.body.pay.acno;
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);

  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('New membership');

  var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.newpay.fname);
            billTo.setLastName(req.body.newpay.lname);
            billTo.setAddress(req.body.newpay.baddress);
            billTo.setCity(req.body.newpay.bcity);
            billTo.setState(req.body.newpay.bstate);
            billTo.setZip(req.body.newpay.bzip);
            billTo.setCountry(req.body.newpay.bcountry);
            billTo.setPhoneNumber(req.body.newpay.cphone);
            billTo.setFaxNumber(req.body.newpay.cfax);
            billTo.setEmail(req.body.newpay.email);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.newpay.fname);
            shipTo.setLastName(req.body.newpay.lname);
            shipTo.setAddress(req.body.newpay.caddress);
            shipTo.setCity(req.body.newpay.ccity);
            shipTo.setState(req.body.newpay.cstate);
            shipTo.setZip(req.body.newpay.czip);
            shipTo.setCountry(req.body.newpay.ccountry);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.newpay.email);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);
  transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(function(){

        var apiResponse = ctrl.getResponse();

        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    //pretty print response
    // console.log(JSON.stringify(response, null, 2));

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          request.input('MemberNo', sql.Int, null);
      request.input('FirstName', sql.VarChar(250), req.body.newpay.fname);
      request.input('LastName', sql.VarChar(250), req.body.newpay.lname);
      request.input('Birthdate', sql.DateTime, req.body.newpay.bdate);
      request.input('Ranch', sql.VarChar(250), req.body.newpay.ranch);
      request.input('CAddress', sql.VarChar(250), req.body.newpay.caddress);
      request.input('CCity', sql.VarChar(250), req.body.newpay.ccity);
      request.input('CState', sql.VarChar(50), req.body.newpay.cstate);
      request.input('CZipCode', sql.VarChar(50), req.body.newpay.czip);
      request.input('CCountry', sql.VarChar(50), req.body.newpay.ccountry);
      request.input('BAddress', sql.VarChar(250), req.body.newpay.baddress);
      request.input('BCity', sql.VarChar(250), req.body.newpay.bcity);
      request.input('BState', sql.VarChar(50), req.body.newpay.bstate);
      request.input('BZipCode', sql.VarChar(50), req.body.newpay.bzip);
      request.input('BCountry', sql.VarChar(50), req.body.newpay.bcountry);
      request.input('Email', sql.VarChar(250), req.body.newpay.email);
      request.input('Phone', sql.VarChar(50), req.body.newpay.cphone);
      request.input('Phone_off', sql.VarChar(50), req.body.newpay.cmobile);
      request.input('fax', sql.VarChar(50), req.body.newpay.cfax);
      request.input('Usda', sql.VarChar(12), null);
      request.input('Notes', sql.VarChar(255), req.body.newpay.notes);
      request.input('Description', sql.VarChar(500), req.body.newpay.description);
      request.input('membershipID', sql.Int, req.body.newpay.type);
      request.input('PymtType', sql.VarChar(20), req.body.pay.paymentType);
      request.input('CCType', sql.VarChar(50), req.body.pay.PaymentType);
      request.input('CCNumber', sql.VarChar(50), null);
      request.input('CCExpDate', sql.VarChar(50), null);
      request.input('CCSecCode', sql.VarChar(50), null);
      request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
      request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
      request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
      request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
      request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
      request.input('SessionId', sql.VarChar(100), null);
      request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
      request.input('Status', sql.VarChar(20), req.body.newpay.status);
      request.input('Category', sql.VarChar(50), 'New Membership');
      request.execute('addnewmemberpayments', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              // console.log(recordsets.recordset)
            }
          });
          // console.log({msg : 'Transaction was successful.' })
          res.send({ msg: 'Transaction was successful.' });
        }  
        else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('MemberNo', sql.Int, null);
      request.input('FirstName', sql.VarChar(250), req.body.newpay.fname);
      request.input('LastName', sql.VarChar(250), req.body.newpay.lname);
      request.input('Birthdate', sql.DateTime, req.body.newpay.bdate);
      request.input('Ranch', sql.VarChar(250), req.body.newpay.ranch);
      request.input('CAddress', sql.VarChar(250), req.body.newpay.caddress);
      request.input('CCity', sql.VarChar(250), req.body.newpay.ccity);
      request.input('CState', sql.VarChar(50), req.body.newpay.cstate);
      request.input('CZipCode', sql.VarChar(50), req.body.newpay.czip);
      request.input('CCountry', sql.VarChar(50), req.body.newpay.ccountry);
      request.input('BAddress', sql.VarChar(250), req.body.newpay.baddress);
      request.input('BCity', sql.VarChar(250), req.body.newpay.bcity);
      request.input('BState', sql.VarChar(50), req.body.newpay.bstate);
      request.input('BZipCode', sql.VarChar(50), req.body.newpay.bzip);
      request.input('BCountry', sql.VarChar(50), req.body.newpay.bcountry);
      request.input('Email', sql.VarChar(250), req.body.newpay.email);
      request.input('Phone', sql.VarChar(50), req.body.newpay.cphone);
      request.input('Phone_off', sql.VarChar(50), req.body.newpay.cmobile);
      request.input('fax', sql.VarChar(50), req.body.newpay.cfax);
      request.input('Usda', sql.VarChar(12), null);
      request.input('Notes', sql.VarChar(255), req.body.newpay.notes);
      request.input('Description', sql.VarChar(500), req.body.newpay.description);
      request.input('membershipID', sql.Int, req.body.newpay.type);
      request.input('PymtType', sql.VarChar(20), req.body.pay.paymentType);
      request.input('CCType', sql.VarChar(50), req.body.pay.PaymentType);
      request.input('CCNumber', sql.VarChar(50), req.body.pay.cc);
      request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
      request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
      request.input('eChkABACode', sql.VarChar(9), null);
      request.input('eChkAcctNo', sql.VarChar(4), null);
      request.input('eChkAcctType', sql.VarChar(20), null);
      request.input('eChkAcctName', sql.VarChar(50), null);
      request.input('eChkBankName', sql.VarChar(50), null);
      request.input('SessionId', sql.VarChar(100), null);
      request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
      request.input('Status', sql.VarChar(20), req.body.newpay.status);
      request.input('Category', sql.VarChar(50), 'New Membership');
      request.execute('addnewmemberpayments', function(err, recordsets, returnValue, affected) {
    if(err){
      res.send({msg:'Error'});
    }
    else{
      res.send({msg:'successful'})
    }
  });
}
}
});
}
});
});
// -------------------------------------------------------Get Mem List--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/getmemlist', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT MemberNumber, CAST(MemberNumber AS nvarchar) + ' - ' + LastName + ', ' + FirstName AS MemberName FROM Members ORDER BY LastName, FirstName";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Get Billing Info--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/getbillinfo', function(req, res) {
    var sql = "select a.*,Round((a.Subtotal)*0.02,2) as handling,0.00 as discount from (select membernumber, firstname,lastname,type,duedate,email,phone,Address,City,State,Zip, Country,(select price from MembershipPrice where type=m.type and MembershipYear = year(getdate())) as Subtotal from members m)a where a.membernumber="+req.body.id+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------Get Custom payment details based on member id from admin----------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/getCustomPaymentDetails', function(req, res) {
    console.log(req.body)
    var sql = "select Description from CustomPayments where MemberNumber="+req.body.id +"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});

//---------------------------------------------------Add Membership Renewal---------------------------------------------------------------------
router.post('/saveaniregmemrenmemupg', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.billinfo.Tot;
    // var amount =1;
    console.log(req.body,amount,'renewallllllllllll')
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);
            
            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            // console.log(invoice)
            orderDetails.setDescription('Membership');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.billinfo.Firstname);
            billTo.setLastName(req.body.billinfo.Lastname);
            billTo.setAddress(req.body.billinfo.Address);
            billTo.setCity(req.body.billinfo.City);
            billTo.setState(req.body.billinfo.State);
            billTo.setZip(req.body.billinfo.Zip);
            billTo.setCountry(req.body.billinfo.Country);
            billTo.setPhoneNumber(req.body.billinfo.phone);
            billTo.setEmail(req.body.billinfo.email);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.billinfo.Firstname);
            shipTo.setLastName(req.body.billinfo.Lastname);
            shipTo.setAddress(req.body.billinfo.Address);
            shipTo.setCity(req.body.billinfo.City);
            shipTo.setState(req.body.billinfo.State);
            shipTo.setZip(req.body.billinfo.Zip);
            shipTo.setCountry(req.body.billinfo.Country);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.billinfo.email);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);
            transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(() => {
        var apiResponse = ctrl.getResponse();
        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

        if(response !== null) {
          if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
            if(response.getTransactionResponse().getMessages() !== null) {
              request.input('MemberNo', sql.Int, req.body.billinfo.membernumber);
    request.input('FirstName', sql.VarChar(250), req.body.billinfo.firstname);
    request.input('LastName', sql.VarChar(250), req.body.billinfo.lastname);
    request.input('Birthdate', sql.DateTime, null);
    request.input('Ranch', sql.VarChar(250), null);
    request.input('CAddress', sql.VarChar(250), req.body.billinfo.Address);
    request.input('CCity', sql.VarChar(250), req.body.billinfo.City);
    request.input('CState', sql.VarChar(50), req.body.billinfo.State);
    request.input('CZipCode', sql.VarChar(50), req.body.billinfo.Zip);
    request.input('CCountry', sql.VarChar(50), req.body.billinfo.Country);
    request.input('BAddress', sql.VarChar(250), req.body.billinfo.Address);
    request.input('BCity', sql.VarChar(250), req.body.billinfo.City);
    request.input('BState', sql.VarChar(50), req.body.billinfo.State);
    request.input('BZipCode', sql.VarChar(50), req.body.billinfo.Zip);
    request.input('BCountry', sql.VarChar(50), req.body.billinfo.Country);
    request.input('Email', sql.VarChar(250), req.body.billinfo.email);
    request.input('Phone', sql.VarChar(50), req.body.billinfo.phone);
    request.input('Phone_off', sql.VarChar(50), null);
    request.input('fax', sql.VarChar(50), null);
    request.input('Usda', sql.VarChar(12), null);
    request.input('Notes', sql.VarChar(255), req.body.memrenupg.notes);
    request.input('Description', sql.VarChar(500), req.body.memrenupg.description);
    request.input('membershipID', sql.Int, null);
    request.input('type', sql.VarChar(15), req.body.billinfo.type);
    request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
    request.input('CCNumber', sql.VarChar(50), card);
    request.input('CCExpDate', sql.VarChar(50), expire);
    request.input('CCSecCode', sql.VarChar(50), cvv);
    request.input('eChkABACode', sql.VarChar(9), null);
    request.input('eChkAcctNo', sql.VarChar(4), null);
    request.input('eChkAcctType', sql.VarChar(20), null);
    request.input('eChkAcctName', sql.VarChar(50), null);
    request.input('eChkBankName', sql.VarChar(50), null);
    request.input('SessionId', sql.VarChar(100), null);
    request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('Status', sql.VarChar(20), req.body.memrenupg.status);
    request.input('Category', sql.VarChar(50), req.body.memrenupg.category);
    request.execute('addnewmemberpayments', function(err, recordsets, returnValue, affected) {
                if(err){
                  // console.log(err)
                }
                else{
                  // console.log(recordsets.recordset)
                }
              });
              // console.log({msg : 'Transaction was successful.' })
              res.send({ msg: 'Transaction was successful.' });
            } else {
              if(response.getTransactionResponse().getErrors() !== null) {
                let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                res.send({ msg: `${code}: ${text}`
              });
              } else {
                res.send({ msg: 'Transaction failed.' });
              }
            }    
          } else {
            if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
              let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
              let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
              res.send({ msg: `${code}: ${text}`
            });
            } else {
              let code = response.getMessages().getMessage()[0].getCode();
              let text = response.getMessages().getMessage()[0].getText();
              res.send({ msg: `${code}: ${text}`
            });
            }   
          }    

        } else {
          res.send({ msg: 'No response.' });
        }
      });
}
else if(req.body.pay.Payment=='eCheck'){
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  //added code
  var bankAccountNum = req.body.pay.acno;
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);

  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('Membership');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.body.billinfo.FirstName);
  billTo.setLastName('');
  billTo.setAddress(req.body.billinfo.BillingAddress);
  billTo.setCity(req.body.billinfo.BillingCity);
  billTo.setState(req.body.billinfo.BillingState);
  billTo.setZip(req.body.billinfo.BillingZip);
  billTo.setCountry(req.body.billinfo.BillingCountry);
  billTo.setFaxNumber.setPhoneNumber(req.body.billinfo.phone);
  billTo.setEmail(req.body.billinfo.email);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.body.billinfo.FirstName);
  shipTo.setLastName('');
  shipTo.setAddress(req.body.billinfo.BillingAddress);
  shipTo.setCity(req.body.billinfo.BillingCity);
  shipTo.setState(req.body.billinfo.BillingState);
  shipTo.setZip(req.body.billinfo.BillingZip);
  shipTo.setCountry(req.body.billinfo.BillingCountry);

  var customer = new ApiContracts.CustomerDataType();
  customer.setEmail(req.body.billinfo.email);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);
  transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(function(){

        var apiResponse = ctrl.getResponse();

        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    //pretty print response
    // console.log(JSON.stringify(response, null, 2));

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          request.input('MemberNo', sql.Int, req.body.billinfo.membernumber);
    request.input('FirstName', sql.VarChar(250), req.body.billinfo.firstname);
    request.input('LastName', sql.VarChar(250), req.body.billinfo.lastname);
    request.input('Birthdate', sql.DateTime, null);
    request.input('Ranch', sql.VarChar(250), null);
    request.input('CAddress', sql.VarChar(250), req.body.billinfo.Address);
    request.input('CCity', sql.VarChar(250), req.body.billinfo.City);
    request.input('CState', sql.VarChar(50), req.body.billinfo.State);
    request.input('CZipCode', sql.VarChar(50), req.body.billinfo.Zip);
    request.input('CCountry', sql.VarChar(50), req.body.billinfo.Country);
    request.input('BAddress', sql.VarChar(250), req.body.billinfo.Address);
    request.input('BCity', sql.VarChar(250), req.body.billinfo.City);
    request.input('BState', sql.VarChar(50), req.body.billinfo.State);
    request.input('BZipCode', sql.VarChar(50), req.body.billinfo.Zip);
    request.input('BCountry', sql.VarChar(50), req.body.billinfo.Country);
    request.input('Email', sql.VarChar(250), req.body.email);
    request.input('Phone', sql.VarChar(50), req.body.phone);
    request.input('Phone_off', sql.VarChar(50), null);
    request.input('fax', sql.VarChar(50), null);
    request.input('Usda', sql.VarChar(12), null);
    request.input('Notes', sql.VarChar(255), req.body.memrenupg.notes);
    request.input('Description', sql.VarChar(500), req.body.memrenupg.description);
    request.input('membershipID', sql.Int, null);
    request.input('type', sql.VarChar(15), req.body.billinfo.type);
    request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
    request.input('CCNumber', sql.VarChar(50), null);
    request.input('CCExpDate', sql.VarChar(50), null);
    request.input('CCSecCode', sql.VarChar(50), null);
    request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
    request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
    request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
    request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
    request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
    request.input('SessionId', sql.VarChar(100), null);
    request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('Status', sql.VarChar(20), req.body.memrenupg.status);
    request.input('Category', sql.VarChar(50), req.body.memrenupg.category);
    request.execute('addnewmemberpayments', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              // console.log(recordsets.recordset)
            }
          });
          // console.log({msg : 'Transaction was successful.' })
          res.send({ msg: 'Transaction was successful.' });
        }  
        else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('MemberNo', sql.Int, req.body.billinfo.membernumber);
    request.input('FirstName', sql.VarChar(250), req.body.billinfo.firstname);
    request.input('LastName', sql.VarChar(250), req.body.billinfo.lastname);
    request.input('Birthdate', sql.DateTime, null);
    request.input('Ranch', sql.VarChar(250), null);
    request.input('CAddress', sql.VarChar(250), req.body.billinfo.Address);
    request.input('CCity', sql.VarChar(250), req.body.billinfo.City);
    request.input('CState', sql.VarChar(50), req.body.billinfo.State);
    request.input('CZipCode', sql.VarChar(50), req.body.billinfo.Zip);
    request.input('CCountry', sql.VarChar(50), req.body.billinfo.Country);
    request.input('BAddress', sql.VarChar(250), req.body.billinfo.Address);
    request.input('BCity', sql.VarChar(250), req.body.billinfo.City);
    request.input('BState', sql.VarChar(50), req.body.billinfo.State);
    request.input('BZipCode', sql.VarChar(50), req.body.billinfo.Zip);
    request.input('BCountry', sql.VarChar(50), req.body.billinfo.Country);
    request.input('Email', sql.VarChar(250), req.body.email);
    request.input('Phone', sql.VarChar(50), req.body.phone);
    request.input('Phone_off', sql.VarChar(50), null);
    request.input('fax', sql.VarChar(50), null);
    request.input('Usda', sql.VarChar(12), null);
    request.input('Notes', sql.VarChar(255), req.body.memrenupg.notes);
    request.input('Description', sql.VarChar(500), req.body.memrenupg.description);
    request.input('membershipID', sql.Int, null);
    request.input('type', sql.VarChar(15), req.body.billinfo.type);
    request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
    request.input('CCNumber', sql.VarChar(50), null);
    request.input('CCExpDate', sql.VarChar(50), null);
    request.input('CCSecCode', sql.VarChar(50), null);
    request.input('eChkABACode', sql.VarChar(9), null);
    request.input('eChkAcctNo', sql.VarChar(4), null);
    request.input('eChkAcctType', sql.VarChar(20), null);
    request.input('eChkAcctName', sql.VarChar(50), null);
    request.input('eChkBankName', sql.VarChar(50), null);
    request.input('SessionId', sql.VarChar(100), null);
    request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('Status', sql.VarChar(20), req.body.memrenupg.status);
    request.input('Category', sql.VarChar(50), req.body.memrenupg.category);
    request.execute('addnewmemberpayments', function(err, recordsets, returnValue, affected) {
    if(err){
      res.send({msg:'Error'});
    }
    else{
      res.send({msg:'successful'})
    }
  });
}
}
});
}
});
});
//---------------------------------------------------Type Dropdown---------------------------------------------------------------------
router.post('/typedropdown', function(req, res) {
  // console.log(req.body)
  function removeUndefinedProps(obj) {
    for (var prop in obj) {
      if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
        delete obj[prop];
      }
    }
    return obj;
  }
  var obj = req.body;
  removeUndefinedProps(obj)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MembershipType', sql.VarChar(100), req.body.type);
    request.execute('_WorkOrder_MembershipPrice', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset)
      }
    });
  });
});
//---------------------------------------------------Add USSBA---------------------------------------------------------------------
router.post('/addussba', function(req, res) {
  // console.log(req.body)
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('FirstName', sql.VarChar(250), req.body.fname);
    request.input('LastName', sql.VarChar(250), req.body.lname);
    request.input('CAddress', sql.VarChar(250), req.body.address);
    request.input('CCity', sql.VarChar(250), req.body.city);
    request.input('CState', sql.VarChar(50), req.body.state);
    request.input('CZipCode', sql.VarChar(50), req.body.zip);
    request.input('CCountry', sql.VarChar(50), req.body.country);
    request.input('BAddress', sql.VarChar(250), req.body.caddress);
    request.input('BCity', sql.VarChar(250), req.body.ccity);
    request.input('BState', sql.VarChar(50), req.body.cstate);
    request.input('BZipCode', sql.VarChar(50), req.body.czip);
    request.input('BCountry', sql.VarChar(50), req.body.ccountry);
    request.input('Email', sql.VarChar(250), req.body.email);
    request.input('Phone', sql.VarChar(50), req.body.phone);
    request.input('Notes', sql.VarChar(255), req.body.notes);
    request.input('Description', sql.VarChar(4000), req.body.description);
    request.input('PymtType', sql.VarChar(20), req.body.payment);
    request.input('CCType', sql.VarChar(50), null);
    request.input('CCNumber', sql.VarChar(50), null);
    request.input('CCExpDate', sql.VarChar(50), null);
    request.input('CCSecCode', sql.VarChar(50), null);
    request.input('eChkABACode', sql.VarChar(9), null);
    request.input('eChkAcctNo', sql.VarChar(4), null);
    request.input('eChkAcctType', sql.VarChar(20), null);
    request.input('eChkAcctName', sql.VarChar(50), null);
    request.input('eChkBankName', sql.VarChar(50), null);
    request.input('SessionId', sql.VarChar(100), null);
    request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('Status', sql.VarChar(20), req.body.status);
    request.input('Category', sql.VarChar(50), 'USBBA Member');
    request.execute('addUSBBAmemberpayments', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets)
        res.sendStatus(200)
      }
    });
  });
  }
});
//---------------------------------------------------Add USSBA---------------------------------------------------------------------
router.post('/getworkorder', function(req, res) {
  // console.log(req.body)
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('WorkOrderNo', sql.Int, req.body.number);
    request.execute('_getworkorderinpym1', function(err, recordsets, returnValue, affected) {
      request.execute('_getworkorderinpym2', function(err, recordsets1, returnValue, affected) {
        request.execute('_getworkorderinpym3', function(err, recordsets2, returnValue, affected) {
          request.execute('_getworkorderinpym4', function(err, recordsets3, returnValue, affected) {
            request.execute('_getworkorderinpym5', function(err, recordsets4, returnValue, affected) {
              if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        // console.log(recordsets1.recordset)
        // console.log(recordsets2.recordset)
        // console.log(recordsets3.recordset)
        // console.log(recordsets4.recordset)
        res.send({details : recordsets.recordset, header : recordsets1.recordset, payment : recordsets2.recordset, animal : recordsets3.recordset, wotable : recordsets4.recordset})
      }
    });
          });
        });
      });
    });
  });
  }
});
//---------------------------------------------------Animal Table Data---------------------------------------------------------------------
router.post('/getanimaltabledata', function(req, res) {
  // console.log(req.body)
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.input('MemberNo', sql.Int, req.body.MemberNumber);
    request.execute('_EID_SS_BackOrderList', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset)
      }
    });
  });
  }
});
// -------------------------------------------------------Check Existing Animal--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/checkexistinganimal', function(req, res) {
    // console.log(req.body)
    var sql = "Insert into RegistrationEID (Regno, PrivateHerd, birthdate, description, dateapplied, MemberNumber,Owner, Notes, PaymentId, status) SELECT regno, PrivateHerd, Birthdate, Description,getdate(), MemberNo, m.firstname + ' ' + m.lastname , 'Back Order EID', "+req.body.woords.PaymentId+", 'Ordered' FROM Registration r join Members m on r.memberno = m.membernumber WHERE regno in ("+req.body.gatd.Regno+")";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Member list online store--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/memonlinestore', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT MemberNumber, cast(MemberNumber as nvarchar) + ' - ' + LastName + ', ' + FirstName AS MemberName FROM Members ORDER BY LastName, FirstName";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Billing Info online store--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/osbillinginfo', function(req, res) {
    // console.log(req.body)
    var sql = "select MemberNumber,Firstname,Lastname,Type,Duedate,Email,Phone,Address,City,State,Zip,Country from members where membernumber=Substring('"+req.body.member+"',1,charindex('-','"+req.body.member+"')-1)";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Add existing products online store--------------------------------------------------------
router.get('/addexistingproducts', function(req, res) {
  // console.log(req.body)
  if(req.session && req.session.admin){
    res.locals.admin = req.session.admin;
    function removeUndefinedProps(obj) {
      for (var prop in obj) {
        if (obj.hasOwnProperty(prop) && obj[prop] === undefined) {
          delete obj[prop];
        }
      }
      return obj;
    }
    var obj = req.body;
    removeUndefinedProps(obj)
    sql.connect(config, function (err) { 
      if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    request.execute('_getonlineproducts', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset)
      }
    });
  });
  }
});

// -------------------------------------------------------Add existing products--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/addtoorder', function(req, res) {
    // console.log(req.body)
    var product1 = req.body.ProductName
    var product = product1.replace(/'/g,"");
    var sql = "Insert into tmpstoreproducts(Category,PCode,Product,Price,QtyonHand,Orderqty,Totprice,Weight,OptionID,ProductID,Cost,totalweight)Values('"+req.body.ProductCategory+"','"+req.body.code+"','"+product+"',"+req.body.Price+","+req.body.QtyOnHand+","+req.body.Order+","+req.body.total+","+req.body.weight+","+req.body.opt+","+req.body.ProductID+","+req.body.Cost+","+req.body.totalweight+");Select * from tmpstoreproducts";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Add Custom products--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/customproducts', function(req, res) {
    // console.log(req.body)
    var sql = "Insert into tmpstoreproducts(Category,PCode,Product,Price,QtyonHand,Orderqty,Totprice,Weight,totalweight)Values('Custom','"+req.body.code+"','"+req.body.name+"',"+req.body.price+",0,"+req.body.order+","+req.body.order*req.body.price+","+req.body.weight+","+req.body.order*req.body.weight+");select * from tmpstoreproducts";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Show Ordered products--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/showorders', function(req, res) {
    // console.log(req.body)
    var sql = "select * from tmpstoreproducts";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Init Delete products--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deleteproduct', function(req, res) {
    // console.log(req.body)
    var sql = "Delete from tmpstoreproducts";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Delete Ordered products--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deleteorders', function(req, res) {
    // console.log(req.body)
    var sql = "Delete from tmpstoreproducts where ID="+req.body.ID+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//---------------------------------------------------Add Online Store---------------------------------------------------------------------
router.post('/saveonlinestoredata', function(req, res) {
  // console.log(req.body)
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    var amount = req.body.cal.Tot;
    if(req.session && req.session.admin){
      res.locals.admin = req.session.admin;
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          // console.log(err);
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);
            
            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription(req.body.olss.description);

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.olss.Firstname);
            billTo.setLastName(req.body.olss.Lastname);
            billTo.setAddress(req.body.olss.Address);
            billTo.setCity(req.body.olss.City);
            billTo.setState(req.body.olss.State);
            billTo.setZip(req.body.olss.Zip);
            billTo.setCountry(req.body.olss.Country);
            billTo.setEmail(req.body.olss.Email);
            billTo.setPhoneNumber(req.body.olss.Phone)

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.olss.Firstname1);
            shipTo.setLastName(req.body.olss.Lastname1);
            shipTo.setAddress(req.body.olss.Address1);
            shipTo.setCity(req.body.olss.City1);
            shipTo.setState(req.body.olss.State1);
            shipTo.setZip(req.body.olss.Zip1);
            shipTo.setCountry(req.body.olss.Country1);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.olss.Email);

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);
            transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(() => {
        var apiResponse = ctrl.getResponse();
        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

        if(response !== null) {
          if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
            if(response.getTransactionResponse().getMessages() !== null) {
              request.input('MemberNo', sql.VarChar(100), req.body.olss.MemberNumber);
    request.input('FirstName', sql.VarChar(250), req.body.olss.Firstname);
    request.input('LastName', sql.VarChar(250), req.body.olss.Lastname);
    request.input('Birthdate', sql.DateTime, null);
    request.input('Ranch', sql.VarChar(250), null);
    request.input('BAddress', sql.VarChar(250), req.body.olss.Address);
    request.input('BCity', sql.VarChar(250), req.body.olss.City);
    request.input('BState', sql.VarChar(50), req.body.olss.State);
    request.input('BZipCode', sql.VarChar(50), req.body.olss.Zip);
    request.input('BCountry', sql.VarChar(50), req.body.olss.Country);
    request.input('SFirstName', sql.VarChar(250), req.body.olss.Firstname1);
    request.input('SLastName', sql.VarChar(250), req.body.olss.Lastname1);
    request.input('SAddress', sql.VarChar(250), req.body.olss.Address1);
    request.input('SCity', sql.VarChar(250), req.body.olss.City1);
    request.input('SState', sql.VarChar(50), req.body.olss.State1);
    request.input('SZipCode', sql.VarChar(50), req.body.olss.Zip1);
    request.input('SCountry', sql.VarChar(50), req.body.olss.Country1);
    request.input('Email', sql.VarChar(250), req.body.olss.Email);
    request.input('Phone', sql.VarChar(50), req.body.olss.Phone);
    request.input('Phone_off', sql.VarChar(50), null);
    request.input('fax', sql.VarChar(50), null);
    request.input('Usda', sql.VarChar(12), null);
    request.input('Notes', sql.VarChar(4000), req.body.olss.notes);
    request.input('Description', sql.VarChar(255), req.body.olss.description);
    request.input('membershipID', sql.Int, null);
    request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
    request.input('CCNumber', sql.VarChar(50), req.body.pay.cc);
    request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
    request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
    request.input('eChkABACode', sql.VarChar(9), null);
    request.input('eChkAcctNo', sql.VarChar(4), null);
    request.input('eChkAcctType', sql.VarChar(20), null);
    request.input('eChkAcctName', sql.VarChar(50), null);
    request.input('eChkBankName', sql.VarChar(50), null);
    request.input('SessionId', sql.VarChar(100), null);
    request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('Status', sql.VarChar(20), req.body.olsss.status);
    request.input('Category', sql.VarChar(50), 'Online Store');
    request.input('Amt', sql.Decimal(5, 2), null);
    request.input('Subtot', sql.Decimal(5, 2), req.body.cal.sum);
    request.input('Handling', sql.Decimal(5, 2), req.body.cal.handling);
    request.input('Discount', sql.Decimal(5, 2), req.body.cal.discount);
    request.input('ShippingCost', sql.Decimal(5, 2), req.body.cal.shipping);
    request.input('ShippingType', sql.VarChar(100), req.body.cal.shippingType);
    request.execute('_SaveOnlinestorepayment', function(err, recordsets, returnValue, affected) {
                if(err){
                  // console.log(err)
                }
                else{
                  // console.log(recordsets.recordset)
                }
                // console.log({msg : 'Transaction was successful.' })
                res.send({ msg: 'Transaction was successful.' });
              });
            } else {
              if(response.getTransactionResponse().getErrors() !== null) {
                let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                // console.log(`${code}: ${text}`)
                res.send({ msg: `${code}: ${text}`
              });
              } else {
                res.send({ msg: 'Transaction failed.' });
              }
            }    
          } else {
            if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
              let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
              let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
              // console.log(`${code}: ${text}`)
              res.send({ msg: `${code}: ${text}`
            });
            } else {
              let code = response.getMessages().getMessage()[0].getCode();
              let text = response.getMessages().getMessage()[0].getText();
              // console.log(`${code}: ${text}`)
              res.send({ msg: `${code}: ${text}`
            });
            }   
          }    

        } else {
          res.send({ msg: 'No response.' });
        }
      });
}
else if(req.body.pay.Payment=='eCheck'){
  var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
  merchantAuthenticationType.setName(process.env.loginId);
  merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

  var bankAccountType = new ApiContracts.BankAccountType();
  bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
  bankAccountType.setRoutingNumber(req.body.pay.aba);
  //added code
  var bankAccountNum = req.body.pay.acno;
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);

  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  // console.log(invoice)
  orderDetails.setDescription('');

  var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.body.olss.Firstname);
            billTo.setLastName(req.body.olss.Lastname);
            billTo.setAddress(req.body.olss.Address);
            billTo.setCity(req.body.olss.City);
            billTo.setState(req.body.olss.State);
            billTo.setZip(req.body.olss.Zip);
            billTo.setCountry(req.body.olss.Country);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.body.olss.Firstname1);
            shipTo.setLastName(req.body.olss.Lastname1);
            shipTo.setAddress(req.body.olss.Address1);
            shipTo.setCity(req.body.olss.City1);
            shipTo.setState(req.body.olss.State1);
            shipTo.setZip(req.body.olss.Zip1);
            shipTo.setCountry(req.body.olss.Country1);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.body.olss.Email);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);
  transactionRequestType.setCustomer(customer);
      // console.log(transactionRequestType)
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(function(){

        var apiResponse = ctrl.getResponse();

        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    //pretty print response
    // console.log(JSON.stringify(response, null, 2));

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          request.input('MemberNo', sql.VarChar(100), req.body.olss.MemberNumber);
    request.input('FirstName', sql.VarChar(250), req.body.olss.Firstname);
    request.input('LastName', sql.VarChar(250), req.body.olss.Lastname);
    request.input('Birthdate', sql.DateTime, null);
    request.input('Ranch', sql.VarChar(250), null);
    request.input('BAddress', sql.VarChar(250), req.body.olss.Address);
    request.input('BCity', sql.VarChar(250), req.body.olss.City);
    request.input('BState', sql.VarChar(50), req.body.olss.State);
    request.input('BZipCode', sql.VarChar(50), req.body.olss.Zip);
    request.input('BCountry', sql.VarChar(50), req.body.olss.Country);
    request.input('SFirstName', sql.VarChar(250), req.body.olss.Firstname1);
    request.input('SLastName', sql.VarChar(250), req.body.olss.Lastname1);
    request.input('SAddress', sql.VarChar(250), req.body.olss.Address1);
    request.input('SCity', sql.VarChar(250), req.body.olss.City1);
    request.input('SState', sql.VarChar(50), req.body.olss.State1);
    request.input('SZipCode', sql.VarChar(50), req.body.olss.Zip1);
    request.input('SCountry', sql.VarChar(50), req.body.olss.Country1);
    request.input('Email', sql.VarChar(250), req.body.olss.Email);
    request.input('Phone', sql.VarChar(50), req.body.olss.Phone);
    request.input('Phone_off', sql.VarChar(50), null);
    request.input('fax', sql.VarChar(50), null);
    request.input('Usda', sql.VarChar(12), null);
    request.input('Notes', sql.VarChar(4000), req.body.olss.notes);
    request.input('Description', sql.VarChar(255), req.body.olss.description);
    request.input('membershipID', sql.Int, null);
    request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
    request.input('CCNumber', sql.VarChar(50), null);
    request.input('CCExpDate', sql.VarChar(50), null);
    request.input('CCSecCode', sql.VarChar(50), null);
    request.input('eChkABACode', sql.VarChar(9), req.body.pay.abaa);
    request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
    request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
    request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
    request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
    request.input('SessionId', sql.VarChar(100), null);
    request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('Status', sql.VarChar(20), req.body.olsss.status);
    request.input('Category', sql.VarChar(50), 'Online Store');
    request.input('Amt', sql.Decimal(5, 2), null);
    request.input('Subtot', sql.Decimal(5, 2), req.body.cal.sum);
    request.input('Handling', sql.Decimal(5, 2), req.body.cal.handling);
    request.input('Discount', sql.Decimal(5, 2), req.body.cal.discount);
    request.input('ShippingCost', sql.Decimal(5, 2), req.body.cal.shipping);
    request.input('ShippingType', sql.VarChar(100), req.body.cal.shippingType);
    request.execute('_SaveOnlinestorepayment', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              // console.log(recordsets.recordset)
            }
          });
          // console.log({msg : 'Transaction was successful.' })
          res.send({ msg: 'Transaction was successful.' });
        }  
        else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
else{
  request.input('MemberNo', sql.VarChar(100), req.body.olss.MemberNumber);
    request.input('MemberNo', sql.Int, null);
    request.input('FirstName', sql.VarChar(250), req.body.olss.Firstname);
    request.input('LastName', sql.VarChar(250), req.body.olss.Lastname);
    request.input('Birthdate', sql.DateTime, null);
    request.input('Ranch', sql.VarChar(250), null);
    request.input('BAddress', sql.VarChar(250), req.body.olss.Address);
    request.input('BCity', sql.VarChar(250), req.body.olss.City);
    request.input('BState', sql.VarChar(50), req.body.olss.State);
    request.input('BZipCode', sql.VarChar(50), req.body.olss.Zip);
    request.input('BCountry', sql.VarChar(50), req.body.olss.Country);
    request.input('SFirstName', sql.VarChar(250), req.body.olss.Firstname1);
    request.input('SLastName', sql.VarChar(250), req.body.olss.Lastname1);
    request.input('SAddress', sql.VarChar(250), req.body.olss.Address1);
    request.input('SCity', sql.VarChar(250), req.body.olss.City1);
    request.input('SState', sql.VarChar(50), req.body.olss.State1);
    request.input('SZipCode', sql.VarChar(50), req.body.olss.Zip1);
    request.input('SCountry', sql.VarChar(50), req.body.olss.Country1);
    request.input('Email', sql.VarChar(250), req.body.olss.Email);
    request.input('Phone', sql.VarChar(50), req.body.olss.Phone);
    request.input('Phone_off', sql.VarChar(50), null);
    request.input('fax', sql.VarChar(50), null);
    request.input('Usda', sql.VarChar(12), null);
    request.input('Notes', sql.VarChar(4000), req.body.olss.notes);
    request.input('Description', sql.VarChar(255), req.body.olss.description);
    request.input('membershipID', sql.Int, null);
    request.input('PymtType', sql.VarChar(20), null);
    request.input('CCType', sql.VarChar(50), null);
    request.input('CCNumber', sql.VarChar(50), null);
    request.input('CCExpDate', sql.VarChar(50), null);
    request.input('CCSecCode', sql.VarChar(50), null);
    request.input('eChkABACode', sql.VarChar(9), null);
    request.input('eChkAcctNo', sql.VarChar(4), null);
    request.input('eChkAcctType', sql.VarChar(20), null);
    request.input('eChkAcctName', sql.VarChar(50), null);
    request.input('eChkBankName', sql.VarChar(50), null);
    request.input('SessionId', sql.VarChar(100), null);
    request.input('Username', sql.VarChar(50), req.session.admin[0].UserName);
    request.input('Status', sql.VarChar(20), req.body.olsss.status);
    request.input('Category', sql.VarChar(50), 'Online Store');
    request.input('Amt', sql.Decimal(5, 2), null);
    request.input('Subtot', sql.Decimal(5, 2), req.body.cal.Tot);
    request.input('Handling', sql.Decimal(5, 2), req.body.cal.handling);
    request.input('Discount', sql.Decimal(5, 2), req.body.cal.discount);
    request.input('ShippingCost', sql.Decimal(5, 2), null);
    request.input('ShippingType', sql.VarChar(100), null);
    request.execute('_SaveOnlinestorepayment', function(err, recordsets, returnValue, affected) {
    if(err){
      res.send({msg:'Error'});
    }
    else{
      res.send({msg:'successful'})
    }
  });
}
}
});
}
});
});

sql.connect(config, function (err) { 
  if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    router.get('/emptyCart', function(req, res) {
      if(req.session && req.session.user){
        res.locals.user = req.session.user;
        var sql = "delete from tempcart where MEMBERNO="+req.session.user[0].MemberNumber+"";
      // console.log(sql);
      request.query(sql, function (err, recordset) {
        if (err){
          res.sendStatus(500);
        }
        else {
          // console.log(recordset.recordset)
          res.send(recordset.recordset);
        }
      });
    }
    else{
      req.session.reset();
      res.redirect('/');
    }
  });
  });
//----------------------------------------------------------------------------Reg Panel--------------------------------------------------------------------------------------
// ----------------------------------------------------------------------------Past Events-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/pastevents', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT ROW_NUMBER() over(order by startday desc) Id,  pevid, city, state, title,sanction, startday,status FROM bc_event_parent WHERE startday <=getdate() ORDER BY startday DESC";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Past Events Info-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/getTableData', function(req, res) {
    console.log(req.body)
    var sql = "SELECT * FROM Members WHERE MemberNumber="+req.body.memberno+";";
    var sql1 = "select (case when ParentPaymentId is null then 'Parent Payment' else 'Additional Payment' end) as paymentclass, PaymentID,PaymentDate,Status,PaymentType,CCNumber,eChkAcctNo,PaymentAmount from Payments where PaymentID="+req.body.paymentId +" OR ParentPaymentId="+req.body.paymentId+""
    request.query(sql, function (err, recordsets) {
      request.query(sql1, function (err, recordsets1) {    
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
              res.send({data : recordsets.recordset, table : recordsets1.recordset});
          }
      });
    });
  });
});
//----------------------------------------------------------------------------GET Payments based on parent id-------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/pasteventsinfo', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT * FROM bc_event_parent WHERE pevid = "+req.body.pevid+";";
    var sql1 = "SELECT evid,pevid,(sanction+' '+evclass+' '+evtype) as Class,startdate,cast((SELECT COUNT(*) FROM bc_entry_x WHERE evid =bec.evid)as nvarchar(5))+'/'+cast((SELECT COUNT(*) FROM bc_res_place WHERE evid =bec.evid)as nvarchar(5)) as entries_results FROM bc_event_child bec WHERE pevid ="+req.body.pevid+" ORDER BY startdate ASC, evtype DESC, evclass ASC"
    var sql2 = "SELECT pevid,jid,jname FROM bc_judge_x WHERE pevid = "+req.body.pevid+" ORDER BY jid"
    request.query(sql, function (err, recordsets) {
      request.query(sql1, function (err, recordsets1) {
        request.query(sql2, function (err, recordsets2) {     
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            var pdate = recordsets.recordset[0].ec;
            // console.log(moment().isAfter(pdate))
            if(moment().isAfter(pdate) == true){
              res.send({data : recordsets.recordset, table : recordsets1.recordset, judges : recordsets2.recordset, msg : 'Entries Closed'});
            }
            else{
              res.send({data : recordsets.recordset, table : recordsets1.recordset, judges : recordsets2.recordset, msg : 'Entries Open'});
            }
          }
        });
      });
    });
  });
});
// ----------------------------------------------------------------------------All Entries-----------------------------------------------------------------------------------------
router.post('/showallentries',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body.pevid)
    request.input('pevid', sql.Int, req.body.pevid);
    request.execute('_getallentries ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Hip tag list-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/hiptaglist', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT hip,CONCAT_WS(' ',bno, bname) AS animal,owner, handler, del FROM bc_entries WHERE pevid ="+req.body.pevid+" AND hip > '0'ORDER BY hip";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Hip tag list Handler-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/hiptaghandler', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT hip,CONCAT_WS(' ',bno, bname) AS animal,owner, handler, del FROM bc_entries WHERE pevid ="+req.body.pevid+" AND hip > '0'ORDER BY handler";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Hip Ted-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/pdfhipted', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT hip,CONCAT_WS(' ',bno, bname) AS animal,(SELECT eartag FROM Registration WHERE regno = b.regno) EID,owner, handler, del FROM bc_entries b WHERE pevid = "+req.body.pevid+" AND hip > '0'ORDER BY hip";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Hip Ted Handler-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/pdftedhandler', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT hip,CONCAT_WS(' ',bno, bname) AS animal,(SELECT eartag FROM Registration WHERE regno = b.regno) EID,owner, handler, del FROM bc_entries b WHERE pevid = "+req.body.pevid+" AND hip > '0'ORDER BY handler";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Hip Judge-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/pdfjudgehip', function(req, res) {
    // console.log(req.body)
    var sql = "";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Bc Hip Tag-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/bchiptag', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT top 1 hip, del, bno, bname, owner, handler FROM bc_entries WHERE hip=0 and pevid = "+req.body.pevid+" Union SELECT  hip, del, bno, bname, owner, handler FROM bc_entries WHERE hip>0 and pevid = "+req.body.pevid+" ORDER BY hip";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Bc Hip Handler-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/bchiphandler', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT top 1 hip, del, bno, bname, owner, handler FROM bc_entries WHERE hip=0 and pevid = "+req.body.pevid+" Union SELECT  hip, del, bno, bname, owner, handler FROM bc_entries WHERE hip>0 and pevid = "+req.body.pevid+" ORDER BY handler";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Parentage Day Sheet-----------------------------------------------------------------------------------------
router.post('/parentagedaysheet',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body.pevid)
    request.input('pevid', sql.Int, req.body.pevid);
    request.execute('_getexportmasterdaysheet ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Bc Hip Handler-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/wipehiptag', function(req, res) {
    // console.log(req.body)
    var sql = "UPDATE bc_entries SET hip = 0 WHERE pevid = "+req.body.pevid+";SELECT hip,CONCAT_WS(' ',bno, bname) AS animal,owner, handler, del FROM bc_entries WHERE pevid ="+req.body.pevid+" AND hip > '0'ORDER BY hip";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset.length);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Handler-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showhandler', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.handler, COUNT(DISTINCT a.bbcid) as Animal_Count, b.phone FROM bc_entries a LEFT JOIN bc_handlers b ON a.handler = b.handler WHERE a.pevid = "+req.body.pevid+" GROUP BY a.handler,b.phone ORDER BY a.handler";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// --------------------------------------------------------------Generate Hip-----------------------------------------------------------------------------------------------
router.post('/generatehip',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.pevid);
    request.execute('GenerateHipTags ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Hip-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showhip', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT hip,CONCAT_WS(' ',bno, bname) AS animal,owner, handler, del FROM bc_entries WHERE pevid ="+req.body.pevid+" AND hip > '0'ORDER BY hip";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset.length);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ---------------------------------------------------------------------------Draw----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showdraw', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT b.*,cast((SELECT COUNT(*) FROM bc_entry_x WHERE evid =b.evid)as nvarchar(5))+' ent.'as entries_results FROM bc_event_child b WHERE pevid = "+req.body.pevid+" ORDER BY startdate ASC, evtype DESC, evclass ASC";
    var sql1 = "SELECT DISTINCT draw_grp FROM bc_event_child WHERE pevid = "+req.body.pevid+" AND draw_grp > '0'  Union select max(draw_grp)+1 draw_grp FROM bc_event_child WHERE pevid = "+req.body.pevid+" AND draw_grp > '0' ORDER BY draw_grp ASC"
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      request.query(sql1, function (err, recordsets1) {     
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset);
          // console.log(recordsets1.recordset);
          res.send({data : recordsets.recordset,data1 : recordsets1.recordset});
        }
      });
    });
  });
});
//--------------------------------------------------Show Group-------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showgroup', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT b.*,cast((SELECT COUNT(*) FROM bc_entry_x WHERE evid =b.evid)as nvarchar(5))+' ent.'as entries_results FROM bc_event_child b WHERE pevid = "+req.body.pevid+" and draw_grp="+req.body.draw_grp+" ORDER BY startdate ASC, evtype DESC, evclass ASC";
    var sql1 = "select a.rowid,a.bbcid,a.entid,a.evid,a.pevid,a.draw,b.regno,(b.bno+' '+b.bname) animal,(b.owner+' ('+b.handler+')') Owner,b.paid from bc_entry_x a,bc_entries b where a.bbcid=b.bbcid and a.entid=b.entid and a.pevid=b.pevid and a.draw_grp="+req.body.draw_grp+" and a.pevid="+req.body.pevid+" order by a.draw"
    // console.log(sql);
    request.query(sql, function (err, recordsets) { 
      request.query(sql1, function (err, recordsets1) {      
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets1.recordset);
          res.send({data :recordsets.recordset,data1 :recordsets1.recordset});
        }
      });
    });
  });
});
//--------------------------------------------------Wipe Draw-------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/wipedraw', function(req, res) {
    // console.log(req.body)
    var sql = "UPDATE bc_entry_x SET draw = 0 WHERE draw_grp ="+req.body[0].draw_grp+"  AND pevid = "+req.body[0].pevid+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {       
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200)
      }
    });
  });
});
// --------------------------------------------------------------Show Daysheet-----------------------------------------------------------------------------------------------
router.post('/showdaysheet',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.pevid);
    request.input('draw_grp', sql.Int, req.body.draw_grp);
    request.execute('_getdrawgrpdaysheet', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// --------------------------------------------------------------Draw This-----------------------------------------------------------------------------------------------
router.post('/drawthis',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.sg.pevid);
    request.input('draw_grp', sql.Int, req.body.sg.draw_grp);
    request.input('setsize', sql.Int, req.body.max.size);
    request.execute('dg_Newdraw', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// --------------------------------------------------------------Evaluate Draw-----------------------------------------------------------------------------------------------
router.post('/evaluatedraw',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.sg.pevid);
    request.input('draw_grp', sql.Int, req.body.sg.draw_grp);
    request.input('setsize', sql.Int, req.body.maxside.size);
    request.execute('Evaluatedraw', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Check In-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showcheckin', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.entid, COUNT(a.entid) AS classes, a.hip, a.regno, a.birthyear, a.bbcid, CONCAT_WS(' ',a.bno, a.bname) AS animal,a.del,a.owner, a.handler,(select top 1 email from bc_entry_meta where entid=a.entid) email,(select top 1 jacket_size from bc_entry_meta where entid=a.entid) jacket_size FROM bc_entries a WHERE  a.pevid = "+req.body.pevid+" GROUP BY a.entid,a.hip,a.bno,a.bname,a.regno,a.birthyear,a.del,a.owner,a.handler,a.bbcid ORDER BY a.handler, a.bno";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Payment Report-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showpayreport', function(req, res) {
    // console.log(req.body)
    var sql = "select entid,(bno+' '+bname) animal,owner,(SELECT SUM(fees) FROM bc_entry_x WHERE entid = b.entid) Total_Fees,(SELECT SUM(ttl_price) FROM test_paylines WHERE entid = b.entid) TotalPaid from bc_entries b where pevid="+req.body.pevid+" order by handler,entid";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Participant letter-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showletter', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT *FROM bc_event_child WHERE pevid ="+req.body.pevid+" ORDER BY startdate ASC, evtype DESC, evclass ASC";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ----------------------------------------------------------------------------Delete Perf-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deleteperf', function(req, res) {
    // console.log(req.body)
    var id = req.body.LinkID;
    var rowid = id.slice(7);
    // console.log(rowid)
    var sql = "Delete from bc_evlink where rowid="+rowid+";Update bc_event_child set evlink=0 where evid in("+req.body.evid1+","+req.body.evid2+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------------------------Perf Swap-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/perfswap', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.pevid,a.entid, a.regno, a.bbcid, a.bdraw, a.pbid,a.bno, a.bname, a.owner, a.handler,a.del, a.feesum, a.paid, b.fees, b.draw, b.perfpref, b.perf FROM bc_entries a, bc_entry_x b WHERE a.entid = b.entid AND b.evid="+req.body.evid1+" ORDER BY a.handler,a.bno";
    var sql1 = "SELECT a.pevid,a.entid, a.regno, a.bbcid, a.bdraw, a.pbid,a.bno, a.bname, a.owner, a.handler,a.del, a.feesum, a.paid, b.fees, b.draw, b.perfpref, b.perf FROM bc_entries a, bc_entry_x b WHERE a.entid = b.entid AND b.evid="+req.body.evid2+" ORDER BY a.handler,a.bno"
    // console.log(sql1);
    request.query(sql, function (err, recordsets) {
      request.query(sql1, function (err, recordsets1) {     
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        // console.log(recordsets1.recordset);
        res.send({data : recordsets.recordset, data1 : recordsets1.recordset});
      }
    });
    });
  });
});
// --------------------------------------------------------------Swap perf-----------------------------------------------------------------------------------------------
router.post('/swapperf',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.pevid);
    request.input('entid', sql.Int, req.body.entid);
    request.execute('swapprefevent ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// --------------------------------------------------------------Update Event-----------------------------------------------------------------------------------------------
router.post('/updateevent',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.pevid);
    request.input('city', sql.VarChar(50), req.body.city);
    request.input('state', sql.VarChar(50), req.body.state);
    request.input('startday', sql.Date, req.body.startday);
    request.input('season', sql.Int, req.body.season);
    request.input('title', sql.VarChar(100), req.body.title);
    request.input('eoo', sql.DateTime, req.body.eoo);
    request.input('ec', sql.VarChar(50), req.body.ec);
    request.input('sanction', sql.VarChar(30), req.body.sanction);
    request.input('status', sql.VarChar(30), req.body.status);
    request.input('type', sql.VarChar(20), 'edit');
    request.execute('addeventreg ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// -------------------------------------------------------------------------Edit Event-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editeventreg', function(req, res) {
    // console.log(req.body.pevid)
    var sql = "Select * from bc_event_parent where pevid="+req.body.pevid+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------------------Judge Data-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/judgedata', function(req, res) {
    // console.log(req.body)
    var sql = "select * from bc_judge_x where pevid="+req.body.pevid+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------------------Update Judge Data-----------------------------------------------------------------------------------------
router.post('/updatejudge',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.eis.pevid);
    request.input('json', sql.VarChar(8000), JSON.stringify(req.body.judge));
    request.execute('add_edit_judges ', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------------------Add Entry-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/addentry', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.entid, a.regno, a.bbcid, a.bdraw, a.pbid,a.bno, a.bname, a.owner, a.handler, a.del, a.feesum, a.paid, b.fees, b.draw, b.perfpref, b.perf FROM bc_entries a, bc_entry_x b WHERE a.entid = b.entid AND b.evid = "+req.body.evid+" ORDER BY b.perf, b.draw, a.bbcid";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------------------Add Entry-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/viewentry', function(req, res) {
    // console.log(req.body.ae.entid)
    // console.log(req.body.sca.evid)
    // console.log(req.body.eis.pevid)
    var sql = "select * from bc_event_parent where pevid="+req.body.eis.pevid+"";
    var sql1 = "select a.rowid,a.bbcid,a.entid,a.evid,a.pevid,a.draw,b.regno,(b.bno+' '+b.bname) animal,b.owner,b.handler,b.paid,b.del,b.feesum from bc_entry_x a,bc_entries b where a.bbcid=b.bbcid and a.entid=b.entid and a.pevid=b.pevid and a.evid="+req.body.sca.evid+" and a.pevid="+req.body.eis.pevid+" and a.entid="+req.body.ae.entid+" order by a.draw";
    var sql2 = "SELECT b.* FROM bc_event_child b WHERE pevid = "+req.body.eis.pevid+" and evid in (select evid from bc_entry_x where entid="+req.body.ae.entid+")";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {
      request.query(sql1, function (err, recordsets1) {
        request.query(sql2, function (err, recordsets2) {     
          if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        // console.log(recordsets1.recordset);
        // console.log(recordsets2.recordset);
        res.send({data : recordsets.recordset, data1 : recordsets1.recordset, data2 : recordsets2.recordset});
      }
    });
      });
    });
  });
});
// ----------------------------------------------------------------------------Remove Class-----------------------------------------------------------------------------------------
router.post('/removeclass',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.evid);
    request.input('entid', sql.Int, req.body.entid);
    request.input('bbcid', sql.Int, null);
    request.input('newbbcid', sql.Int, null);
    request.input('type', sql.VarChar(20), 'scratch_entry');
    request.execute('editeventclass ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Switch Delivery-----------------------------------------------------------------------------------------
router.post('/switchdelivery',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, null);
    request.input('entid', sql.Int, req.body.entid);
    request.input('bbcid', sql.Int, req.body.bbcid);
    request.input('newbbcid', sql.Int, null);
    request.input('type', sql.VarChar(20), 'switchdel');
    request.execute('editeventclass ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Switch Delivery-----------------------------------------------------------------------------------------
router.post('/markpaid',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, null);
    request.input('entid', sql.Int, req.body.entid);
    request.input('bbcid', sql.Int, null);
    request.input('newbbcid', sql.Int, null);
    request.input('type', sql.VarChar(20), 'markpaid');
    request.execute('editeventclass ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Switch Animal-----------------------------------------------------------------------------------------
router.post('/switchanimal1',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, null);
    request.input('entid', sql.Int, req.body.ves1.entid);
    request.input('bbcid', sql.Int, null);
    request.input('newbbcid', sql.Int, req.body.switch1.newbbcid);
    request.input('type', sql.VarChar(20), 'switch_animal_req');
    request.execute('editeventclass ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Switch Animal-----------------------------------------------------------------------------------------
router.post('/deleteentry',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, null);
    request.input('entid', sql.Int, req.body.ves1.entid);
    request.input('bbcid', sql.Int, null);
    request.input('newbbcid', sql.Int, null);
    request.input('type', sql.VarChar(20), 'kill_entry');
    request.execute('editeventclass ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// -------------------------------------------------------Animal Details--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/animaldetails', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT * FROM bc_bulls WHERE bbcid = "+req.body.bbcid+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Edit Animal--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editanimal', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT * FROM bc_bulls WHERE bbcid = "+req.body.bbcid+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Update Animal--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/updateanimal', function(req, res) {
    // console.log(req.body)
    var sql = "Update bc_bulls set Regno="+req.body.regno+",eartag="+req.body.eartag+",pbid="+req.body.pbid+",bno="+req.body.bno+",bname='"+req.body.bname+"',owner='"+req.body.owner+"',handler='"+req.body.handler+"',del='"+req.body.del+"',birthyear="+req.body.birthyear+",tier=0,loadtime=getdate() where bbcid= "+req.body.bbcid+"";
    // console.log(sql)
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
// -------------------------------------------------------Outs & Standings--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/outstand', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT b.regno, b.bno, b.bname, b.owner,a.bbcid,a.outid, a.score, a.place, a.evid, a.city, a.state, a.sanction, a.evclass,a.evtype, a.divcode, a.money, a.amoney, a.opoints FROM bc_standings_bucket a,bc_bulls b WHERE a.bbcid = b.bbcid and a.bbcid="+req.body.bbcid+" ORDER BY a.divcode, a.score DESC, a.outid, b.bname";
    var sql1 = "SELECT b.season, a.* FROM bc_res_outs a LEFT JOIN bc_event_parent b ON a.pevid = b.pevid WHERE a.bbcid = "+req.body.bbcid+" ORDER BY b.season DESC, a.score DESC, a.outid";
    var sql2 = "SELECT * FROM bc_standings WHERE bbcid = "+req.body.bbcid+";";
    request.query(sql, function (err, recordsets) {     
      request.query(sql1, function (err, recordsets1) {     
        request.query(sql2, function (err, recordsets2) {     
          if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        // console.log(recordsets1.recordset);
        // console.log(recordsets2.recordset);
        res.send({data : recordsets.recordset, data1 : recordsets1.recordset, data2 : recordsets2.recordset});
      }
    });
      });
    });
  });
});
// -------------------------------------------------------Table of Entries--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/toe', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.entid, a.birthyear,a.regno, a.bbcid,CONCAT_WS(' ',a.bno, a.bname) AS animal,a.owner, a.handler,a.del, b.fees FROM bc_entries a, bc_entry_x b WHERE a.entid = b.entid AND b.evid = "+req.body.evid+" ORDER BY a.regno";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Rebecca Custom--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/rce', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.entid, a.birthyear,a.regno, a.bbcid,CONCAT_WS(' ',a.bno, a.bname) AS animal,a.owner, a.handler,a.del, b.fees,(SELECT p.ttl_price FROM test_paylines p LEFT JOIN test_payments q ON p.paymentid = q.paymentid WHERE p.entid = a.entid) payment,(SELECT eartag FROM Registration WHERE regno = a.regno) EID FROM bc_entries a, bc_entry_x b WHERE a.entid = b.entid AND b.evid = "+req.body.evid+" ORDER BY a.regno";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Accepted Entries List--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/ael', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.regno,a.bno AS brand,a.bname AS name,a.owner,a.del FROM bc_entries a,bc_entry_x b WHERE a.entid = b.entid AND b.evid = "+req.body.evid+" ORDER BY a.regno";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Accepted Entries/Payment--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/aep', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.entid,a.ttl_price, a.paymentid,b.bbcid, b.evid, b.fees AS 'class fees',c.bno, c.bname, c.owner, c.entrytime FROM test_paylines a,bc_entry_x b,bc_entries c WHERE a.entid = b.entid AND a.entid = c.entid AND b.evid ="+req.body.evid+" ORDER BY a.entid";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Linda Entries List--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/lel', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.entid,a.regno,a.bno AS brand,a.bname AS name,a.owner,a.feesum,a.paid,a.method FROM bc_entries a, bc_entry_x b WHERE a.entid = b.entid AND b.evid = "+req.body.evid+" ORDER BY a.regno";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Table of Entries/Standings--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/tos', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.entid, a.regno, a.bbcid,CONCAT_WS(' ',a.bno, a.bname) AS animal,a.owner, a.handler, a.del,(SELECT money FROM bc_standings WHERE bbcid =a.bbcid AND division =(dbo._getdivcode(b.evid)) AND season = YEAR(GETDATE())) Standings FROM bc_entries a, bc_entry_x b WHERE a.entid = b.entid AND b.evid = "+req.body.evid+" ORDER BY a.entid";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset)
      }
    });
  });
});
// -------------------------------------------------------PDFD--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/pdfd', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.draw, b.hip, b.regno, b.entid,CONCAT_WS(' ',b.bno, b.bname) AS animal,b.owner, b.handler, b.del FROM bc_entry_x a, bc_entries b WHERE a.entid = b.entid AND a.evid = "+req.body.evid+"  ORDER BY a.perf, a.draw, b.hip";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------PDFP--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/pdfp', function(req, res) {
    console.log(req.body)
    var sql = "SELECT a.draw, b.hip, b.regno, b.entid,CONCAT_WS(' ',b.bno, b.bname) AS animal,(SELECT privateherd+' '+animal FROM registration WHERE regno = (select sire from registration where regno=b.regno)) Sire,(SELECT privateherd+' '+animal FROM registration WHERE regno = (select Dam from registration where regno=b.regno)) Dam,b.owner, b.handler, b.del FROM bc_entry_x a, bc_entries b WHERE a.entid = b.entid AND a.evid = "+req.body.evid+" ORDER BY a.perf, a.draw, b.hip";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------CR--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/cr', function(req, res) {
    // console.log(req.body)
    var sql1 = "select b.evclass,b.evtype,a.city,a.state,a.startday,a.title,b.evid,b.sanction from bc_event_parent a ,bc_event_child b where a.pevid=b.pevid and b.evid="+req.body.evid+"";
    var sql2 = "SELECT * FROM bc_res_outs a INNER JOIN bc_res_place b ON a.outid = b.outid WHERE b.evid = "+req.body.evid+" ORDER BY b.sc DESC"
    request.query(sql1, function (err, recordsets1) {     
      request.query(sql2, function (err, recordsets2) {     
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets1.recordset);
        // console.log(recordsets2.recordset);
        res.send({data : recordsets1.recordset, data1 : recordsets2.recordset});
      }
    });
    });
  });
});
// ----------------------------------------------------------------------------Class Results-----------------------------------------------------------------------------------------
router.post('/crt',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.evid);
    request.input('type', sql.VarChar(20), 'class_results');
    request.execute('_getresultstable ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Linda Results-----------------------------------------------------------------------------------------
router.post('/lrt',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.evid);
    request.input('type', sql.VarChar(20), 'linda_results');
    request.execute('_getresultstable ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Judges Score-----------------------------------------------------------------------------------------
router.post('/jst',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.evid);
    request.input('type', sql.VarChar(20), 'jscores');
    request.execute('_getresultstable ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Judge Eval Results-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/jer', function(req, res) {
    // console.log(req.body)
    var sql = "select b.evclass,b.evtype,a.city,a.state,a.startday from bc_event_parent a ,bc_event_child b where a.pevid=b.pevid and b.evid="+req.body.evid+"";
    var sql1 = "SELECT pevid,jid,jname FROM bc_judge_x WHERE pevid = "+req.body.pevid+" ORDER BY jid"
    var sql2 = "SELECT a.*,b.evid,b.evlinkid,b.perf,b.[go],b.sc,b.place,b.tier,b.tier_place,b.money,b.points FROM bc_res_outs a INNER JOIN bc_res_place b ON a.outid = b.outid WHERE b.evid = "+req.body.evid+" ORDER BY b.sc DESC"
    request.query(sql, function (err, recordsets) {
      request.query(sql1, function (err, recordsets1) {     
        request.query(sql2, function (err, recordsets2) {
          if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        // console.log(recordsets1.recordset);
        // console.log(recordsets2.recordset);
        res.send({data : recordsets.recordset, data1 : recordsets1.recordset, data2 : recordsets2.recordset});
      }
    });
      });
    });
  });
});
// ----------------------------------------------------------------------------Billy Jaynes Results-----------------------------------------------------------------------------------------
router.post('/bjr',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.evid);
    request.input('type', sql.VarChar(20), 'billyj_results');
    request.execute('_getresultstable ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Judge Details-----------------------------------------------------------------------------------------
router.post('/bjr',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.evid);
    request.input('type', sql.VarChar(20), 'judge');
    request.execute('_getresultstable ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Judge Details-----------------------------------------------------------------------------------------
router.post('/addnewentry',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('search', sql.VarChar(100), req.body.name);
    request.execute('searchanimalreg  ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Load Animal-----------------------------------------------------------------------------------------
router.post('/loadanimal',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.b.pevid);
    request.input('evid', sql.Int, req.body.b.evid);
    request.input('bbcid', sql.Int, req.body.a.bbcid);
    request.execute('loadanimaltoevent  ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
//-------------------------------------------------------Enter Animal-------------------------
router.post('/enteranireg',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('del', sql.VarChar(10), req.body.delivery);
    request.input('bno', sql.VarChar(20), req.body.brand);
    request.input('bname', sql.VarChar(50), req.body.animal);
    request.input('owner', sql.VarChar(50), req.body.owner);
    request.input('handler', sql.VarChar(50), req.body.handler);
    request.input('regno', sql.Int, req.body.regno);
    request.input('eartag', sql.VarChar(20), req.body.EID);
    request.input('pbid', sql.Int, req.body.pbid);
    request.input('bbcid', sql.Int, req.body.bbcid);
    request.input('evid', sql.Int, req.body.evid);
    request.input('pevid', sql.Int, req.body.pevid);
    request.input('birthyear', sql.Int, req.body.birthyear);
    request.input('email', sql.VarChar(50), req.body.email);
    request.input('jacket_size', sql.VarChar(10), req.body.jacket_size);
    request.input('tier', sql.Int, req.body.tier);
    request.input('entrydupe', sql.Int, req.body.entrydupe);
    request.input('user', sql.VarChar(50), null);
    request.execute('EnterAnimal  ', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Edit Class--------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/editclass', function(req, res) {
    // console.log(req.body)
    var sql = "Select * from bc_event_child where pevid="+req.body.pevid+" and evid="+req.body.evid+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------Add Class--------------------------------------------------------
router.post('/addclass',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, null);
    request.input('pevid', sql.Int, req.body.eis.pevid);
    request.input('draw_grp', sql.Int, 0);
    request.input('startdate', sql.DateTime, req.body.acs.startdate);
    request.input('perfcount', sql.Int, 0);
    request.input('roundcount', sql.Int, 0);
    request.input('evtype', sql.VarChar(50), req.body.acs.evtype);
    request.input('evclass', sql.VarChar(50), req.body.acs.evclass);
    request.input('evlabel', sql.VarChar(50), req.body.acs.evlabel);
    request.input('schedfees', sql.Int, req.body.acs.schedfees);
    request.input('fees', sql.Money, req.body.acs.fees);
    request.input('added', sql.Decimal(8, 2), req.body.acs.added);
    request.input('sanction', sql.VarChar(50), req.body.acs.sanction);
    request.input('status', sql.VarChar(50), req.body.acs.status);
    request.input('evlink', sql.Int, 0);
    request.input('type', sql.VarChar(10), 'add');
    request.execute('addclassreg ', function(err, recordsets, returnValue, affected) {
      if(err){
        console.log(err,'error in adding class')
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset)
      }
    });
  });
});
// ----------------------------------------------------------------------------Edit Class-----------------------------------------------------------------------------------------
router.post('/updateclass',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, null);
    request.input('pevid', sql.Int, req.body.pevid);
    request.input('draw_grp', sql.Int, null);
    request.input('startdate', sql.DateTime, req.body.startdate);
    request.input('perfcount', sql.Int, null);
    request.input('roundcount', sql.Int, null);
    request.input('evtype', sql.VarChar(50), req.body.evtype);
    request.input('evclass', sql.VarChar(50), req.body.evclass);
    request.input('evlabel', sql.VarChar(50), req.body.evlabel);
    request.input('schedfees', sql.Int, req.body.schedfees);
    request.input('fees', sql.Money, req.body.fees);
    request.input('added', sql.Decimal(8, 2), req.body.added);
    request.input('sanction', sql.VarChar(50), null);
    request.input('status', sql.VarChar(50), null);
    request.input('evlink', sql.Int, null);
    request.input('type', sql.VarChar(10), 'edit');
    request.execute('addclassreg ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
  });
});
// ----------------------------------------------------------------------------Judge Details-----------------------------------------------------------------------------------------
router.post('/judgedetails',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.sca.evid);
    request.input('type', sql.VarChar(20), 'judge');
    request.execute('_getresultstable ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// ----------------------------------------------------------------------------Judge marks-----------------------------------------------------------------------------------------
router.post('/singlejudge',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.sca.evid);
    request.input('jid', sql.VarChar(5), req.body.jers1.jid);
      // request.input('type', sql.VarChar(20), 'judge');
      request.execute('judge_mark_dist ', function(err, recordsets, returnValue, affected) {
        if(err){
          // console.log(err)
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
});
// ----------------------------------------------------------------------------Judges-----------------------------------------------------------------------------------------
router.post('/judgescore',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.sca.evid);
    request.input('jid', sql.VarChar(5), req.body.jers1.jid);
      // request.input('type', sql.VarChar(20), 'judge');
      request.execute('one_judge ', function(err, recordsets, returnValue, affected) {
        if(err){
          res.sendStatus(500);
        }
        else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
    });
});
// ----------------------------------------------------------------------------Add Events-----------------------------------------------------------------------------------------
router.post('/addevent',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, null);
    request.input('city', sql.VarChar(50), req.body.city);
    request.input('state', sql.VarChar(50), req.body.state);
    request.input('startday', sql.DateTime, req.body.startday);
    request.input('season', sql.Int, req.body.season);
    request.input('title', sql.VarChar(100), req.body.title);
    request.input('eoo', sql.DateTime, req.body.eoo);
    request.input('ec', sql.VarChar(50), req.body.ec);
    request.input('sanction', sql.VarChar(30), req.body.sanction);
    request.input('status', sql.VarChar(30), req.body.status);
    request.input('type', sql.VarChar(20), 'add');
    request.execute('addeventreg', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
  });
});
// ----------------------------------------------------------------------------Add Events-----------------------------------------------------------------------------------------
router.post('/addeventreg1',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('pevid', sql.Int, req.body.pevid);
    request.input('city', sql.VarChar(50), req.body.city);
    request.input('state', sql.VarChar(50), req.body.state);
    request.input('startday', sql.DateTime, req.body.startday);
    request.input('season', sql.Int, req.body.season);
    request.input('title', sql.VarChar(100), req.body.title);
    request.input('eoo', sql.DateTime, req.body.eoo);
    request.input('ec', sql.VarChar(50), req.body.ec);
    request.input('sanction', sql.VarChar(30), req.body.sanction);
    request.input('status', sql.VarChar(30), req.body.status);
    request.input('type', sql.VarChar(20), 'add');
    request.execute('addeventreg', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
//-------------------------------------------------Duplicate-----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/duplicate', function(req, res) {
    // console.log(req.body)
    var sql = "Select * from bc_event_parent where pevid="+req.body.pevid+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//-------------------------------------------------Com Admin-----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/showcomadmin', function(req, res) {
    // console.log(req.body)
    var sql = "select bc.*,bp.season,bp.city,bp.state,bp.title,(select COUNT(a.lineid) from test_paylines a,bc_entry_x b WHERE a.entid = b.entid AND b.evid = bc.evid) payline_count,(SELECT COUNT(*) FROM bc_entry_x WHERE evid = bc.evid) entries,(SELECT COUNT(*) FROM bc_entry_x WHERE evid = bc.evid AND draw > 0) draw,(SELECT COUNT(*) FROM bc_res_place WHERE evid = bc.evid) results from bc_event_parent bp join bc_event_child bc on bp.pevid=bc.pevid where bp.pevid="+req.body.pevid+" and bc.evid="+req.body.evid+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});

//-------------------------------------------------Class1 data-----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/Class1Data', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.city, a.state, a.startday,b.evid, b.evclass, b.evtype, b.evlabel,b.startdate,COUNT(a.pevid) AS dacount FROM bc_event_parent a,bc_event_child b WHERE a.pevid = b.pevid AND startday > DATEADD(DAY,-180,GETDATE()) AND b.evlink = 0 GROUP BY b.evid,a.city,a.state,a.startday,b.evclass,b.evtype,b.evlabel,b.startdate ORDER BY b.startdate DESC";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//-------------------------------------------------Rider Fee-----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/riderfee', function(req, res) {
    // console.log(req.body)
    var sql = "if not exists (select 1 from bc_riderfee_pevids where pevid="+req.body.pevid+") insert into bc_riderfee_pevids(pevid,expires) select pevid,dateadd(day,2,startday) from bc_event_parent where pevid="+req.body.pevid+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//-------------------------------------------------Destroy-----------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/destroy', function(req, res) {
    // console.log(req.body)
    var sql1 = "Delete from bc_event_parent where pevid="+req.body.pevid+""
    var sql2 = "Delete from bc_event_child where pevid="+req.body.pevid+""
    var sql3 = "Delete from bc_judge_x where pevid="+req.body.pevid+""
    var sql4 = "Delete from bc_riderfee_pevids where pevid="+req.body.pevid+""
    var sql5 = "DELETE FROM bc_entries WHERE pevid = "+req.body.pevid+""
    var sql6 = "DELETE FROM bc_entry_x WHERE pevid = "+req.body.pevid+""
    request.query(sql1, function (err, recordsets1) {
      request.query(sql2, function (err, recordsets2) {     
        request.query(sql3, function (err, recordsets3) {
          request.query(sql4, function (err, recordsets4) {
            request.query(sql5, function (err, recordsets5) {
              request.query(sql6, function (err, recordsets6) {
                if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200)
      }
    });
            });
          });
        });
      });
    });
  });
});
//----------------------------------------link Data----------------------------------------------
router.post('/linkdata',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid1', sql.Int, req.body.class1);
    request.input('evid2', sql.Int, req.body.class2);
    request.input('evlink', sql.VarChar(10), req.body.type);
    request.execute('link2classes', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
  });
});
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/Class2Data', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT a.city, a.state, a.startday,b.evid, b.evclass, b.evtype, b.evlabel,b.startdate,COUNT(a.pevid) AS dacount FROM bc_event_parent a,bc_event_child b WHERE a.pevid = b.pevid AND startday > DATEADD(DAY,-180,GETDATE()) AND b.evlink = 0 GROUP BY b.evid,a.city,a.state,a.startday,b.evclass,b.evtype,b.evlabel,b.startdate ORDER BY b.startdate DESC";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        //console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
router.get('/linklist',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.execute('link2classes ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
router.get('/linktable',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.execute('_getlistedlinksHead ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
router.get('/linktable1',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    request.execute('_getlistedlinksDetail ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
// -------------------------------------------------------------------------Handler Data-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/handlerdata', function(req, res) {
    // console.log(req.body)
    var sql = "select * from bc_handlers order by handler";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------------------Edit Handler Data-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/edithandler', function(req, res) {
    // console.log(req.body)
    var sql = "Select * from bc_handlers where rowid="+req.body.rowid+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//---------------------------------------------Add new Handler-----------------------------
router.post('/addnewhandler',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('handler', sql.VarChar(50), req.body.handler);
    request.input('memno', sql.Int, req.body.memno);
    request.input('phone', sql.VarChar(15), req.body.phone);
    request.input('type', sql.VarChar(10), 'Add');
    request.input('rowid', sql.Int, null);
    request.execute('add_edit_handlers ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset);
        }
      });
  });
});
//---------------------------------------------Update Handler-----------------------------
router.post('/updatehandler',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('handler', sql.VarChar(50), req.body.handler);
    request.input('memno', sql.Int, req.body.memno);
    request.input('phone', sql.VarChar(15), req.body.phone);
    request.input('type', sql.VarChar(10), 'Edit');
    request.input('rowid', sql.Int, req.body.rowid);
    request.execute('add_edit_handlers ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
  });
});
//---------------------------------------------Delete Handler-----------------------------
router.post('/deletehandler',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('handler', sql.VarChar(50), req.body.handler);
    request.input('memno', sql.Int, req.body.memno);
    request.input('phone', sql.VarChar(15), req.body.phone);
    request.input('type', sql.VarChar(10), 'Delete');
    request.input('rowid', sql.Int, req.body.rowid);
    request.execute('add_edit_handlers ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
  });
});
// -------------------------------------------------------------------------Edit Handler Data-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/anicount', function(req, res) {
    // console.log(req.body)
    var sql = "SELECT COUNT(*) as count FROM bc_bulls;";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//---------------------------------------------Add Animal-----------------------------
router.post('/addanimalreg',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('regno', sql.Int, req.body.abbi);
    request.input('eartag', sql.VarChar(20), req.body.eid);
    request.input('pbid', sql.Int, req.body.pbsid);
    request.input('bno', sql.VarChar(20), req.body.brand);
    request.input('bname', sql.VarChar(50), req.body.name);
    request.input('owner', sql.VarChar(50), req.body.owner);
    request.input('handler', sql.VarChar(50), req.body.handler);
    request.input('del', sql.VarChar(3), req.body.del);
    request.input('birthyear', sql.Int, req.body.birth);
    request.input('type', sql.VarChar(10), 'Add');
    request.input('bbcid', sql.Int, null);
    request.input('user', sql.VarChar(20), null);
    request.execute('add_edit_animals ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.sendStatus(200);
        }
      });
  });
});
//---------------------------------------------Search Animal-----------------------------
router.post('/searchani',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('search', sql.VarChar(100), req.body.animal);
    request.execute('searchanimalreg ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
//---------------------------------------------CRP-----------------------------
router.post('/payout',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.sca.evid);
    request.input('dragperc', sql.Float, req.body.cal.calculate);
    request.input('plccnt', sql.Int, null);
    request.execute('payout_report ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
//---------------------------------------------Onload Payout-----------------------------
router.post('/onloadpayout',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('evid', sql.Int, req.body.evid);
    request.input('dragperc', sql.Float, null);
    request.input('plccnt', sql.Int, null);
    request.execute('payout_report ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
// ------------------------------------------------------------------------TBL1--------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/tbl1', function(req, res) {
    var pastyear = moment().subtract(1, 'year').format('YYYY');
    // console.log(pastyear)
    var sql = "SELECT a.memberno, b.firstname, b.lastname, b.phone, b.email, a.regno,r.privateherd AS brand, r.animal, a.paid, a.paylog_id FROM bc_programs a, members b, Registration r WHERE a.memberno = b.membernumber AND a.regno = r.regno AND a.prog = 'legacy' AND a.paid = '1' AND a.season = "+pastyear+" ORDER BY a.paid, a.memberno";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------------------TBL2-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/tbl2', function(req, res) {
    var year = moment().format('YYYY');
    // console.log(year)
    var sql = "SELECT a.memberno, b.firstname, b.lastname, b.phone, b.email, a.regno,r.privateherd AS brand, r.animal, a.paid, a.paylog_id FROM bc_programs a, members b, Registration r WHERE a.memberno = b.membernumber AND a.regno = r.regno AND a.prog = 'legacy' AND a.paid = '1' AND a.season = "+year+" ORDER BY a.paid, a.memberno";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// -------------------------------------------------------------------------MYS-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/mys', function(req, res) {
    var year = moment().format('YYYY');
    // console.log(year)
    var sql = "SELECT a.rowid,a.memberno, a.enroller AS added_by, b.firstname, b.lastname, b.phone, b.email, a.regno,a.totalfee, a.paid, a.paylog_id FROM bc_programs a, members b WHERE a.memberno = b.membernumber AND a.prog = 'maiden_yearling' AND a.paid = '1' AND a.season = "+year+" ORDER BY a.memberno, a.paylog_id,a.rowid";
    var sql1 = "SELECT a.memberno, b.firstname, b.lastname, COUNT(a.rowid) AS slots FROM bc_programs a, members b WHERE a.memberno = b.membernumber AND a.prog = 'maiden_yearling' AND a.paid = '1' GROUP BY a.memberno,b.firstname,b.LastName ORDER BY a.memberno";
    // console.log(sql);
    request.query(sql, function (err, recordsets) { 
      request.query(sql1, function (err, recordsets1) {    
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets1.recordset);
        res.send({data : recordsets.recordset, data1 : recordsets1.recordset});
      }
    });
    });
  });
});
// ---------------------------------------------------------------------Delete MYS-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/deletemys', function(req, res) {
    var year = moment().format('YYYY');
    // console.log(year)
    var sql = "Delete from bc_programs where rowid="+req.body.rowid+"";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200)
      }
    });
  });
});
// ---------------------------------------------------------------------Event Manager-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/eventsreg', function(req, res) {
    // console.log(sql);
    var sql = "SELECT ROW_NUMBER() over(order by startday desc) Id, pevid, city, state, title,sanction, startday,status FROM bc_event_parent WHERE startday >Dateadd(week,-1,getdate()) ORDER BY startday";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ---------------------------------------------------------------------Event Payment-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/eventpay', function(req, res) {
    // console.log(sql);
    var sql = "select paymentid,cust_string,(subtotal+handling-discount) amount,status,paydate from test_payments order by paydate desc";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ---------------------------------------------------------------------Event Results-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/eventresults', function(req, res) {
    // console.log(sql);
    var sql = "SELECT pevid, city, state, title,sanction, startday,status,(SELECT COUNT(*) FROM bc_res_outs WHERE pevid =a.pevid) rslts_outs,(SELECT SUM(money) FROM bc_res_place WHERE pevid = a.pevid) Payout FROM bc_event_parent a WHERE startday <=DATEADD(Month,1,GETDATE()) ORDER BY startday DESC, pevid;";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
// ---------------------------------------------------------------------Wipe Event Results-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/wiperesults', function(req, res) {
    // console.log(sql);
    var sql = "DELETE FROM bc_res_outs WHERE pevid = "+req.body.pevid+"";
    var sql1 = "DELETE FROM bc_res_place WHERE pevid = "+req.body.pevid+"";
    request.query(sql, function (err, recordsets) {    
      request.query(sql1, function (err, recordsets1) {     
        if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        res.sendStatus(200);
      }
    });
    });
  });
});
// ---------------------------------------------------------------------Event Payment Next-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/paymentsubtotal', function(req, res) {
    // console.log(sql);
    var sql = "select a.*,b.Type from test_payments a,Members b where a.memberno=b.MemberNumber and a.paymentid="+req.body.paymentid+"";
    var sql1 = "select *from test_paylines where paymentid="+req.body.paymentid+"";
    var sql2 = "SELECT a.lineid, a.sku, a.qty, a.ttl_shipping, a.entid, a.ttl_price,b.sku_parent, a.sku_name,b.sku_descrip,c.regno,c.bno,c.bname,c.owner,d.pevid,d.city,d.state,d.title,e.evtype, e.evclass, e.evlabel,e.sanction FROM test_paylines a,itemsku b,bc_entries c,bc_event_parent d,bc_event_child e,bc_entry_x f WHERE a.sku = b.sku and a.entid=c.entid and c.pevid=d.pevid And e.pevid=d.pevid and e.evid=f.evid and f.entid=a.entid AND paymentid = "+req.body.paymentid+""
    request.query(sql, function (err, recordsets) {
      request.query(sql1, function (err, recordsets1) {  
        request.query(sql2, function (err, recordsets2) {     
          if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        // console.log(recordsets1.recordset);
        // console.log(recordsets2.recordset)
        res.send({data : recordsets.recordset, data1 : recordsets1.recordset, data2 : recordsets2.recordset});
      }
    });
      });
    });
  });
});
// ---------------------------------------------------------------------Save Note-----------------------------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/savenote', function(req, res) {
    // console.log(req.body);
    var sql = "update test_payments set notes='"+req.body.notes+"' where paymentid="+req.body.paymentid+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200)
      }
    });
  });
});
//---------------------------------------------Payout Calculator-----------------------------
router.post('/payoutcal',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('enum', sql.Int, req.body.enum);
    request.input('fees', sql.Money, req.body.fees);
    request.input('evt', sql.VarChar(50), req.body.evt);
    request.input('evc', sql.VarChar(50), req.body.evc);
    request.input('added', sql.Money, req.body.added);
    request.input('plcb', sql.Int, req.body.plcb);
    request.input('flatdrag', sql.Money, req.body.flatdrag);
    request.input('percdrag', sql.Float, req.body.percdrag);
    request.input('potdrag', sql.Money, req.body.potdrag);
    request.execute('payoutcalculator ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
//---------------------------------------------Payout Calculator-----------------------------
router.post('/payoutcal1',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('enum', sql.Int, req.body.enum);
    request.input('fees', sql.Money, req.body.fees);
    request.input('evt', sql.VarChar(50), req.body.evt);
    request.input('evc', sql.VarChar(50), req.body.evc);
    request.input('added', sql.Money, req.body.added);
    request.input('plcb', sql.Int, req.body.plcb);
    request.input('flatdrag', sql.Money, req.body.flatdrag);
    request.input('percdrag', sql.Float, req.body.percdrag);
    request.input('potdrag', sql.Money, req.body.potdrag);
    request.execute('payoutcal_paydrag_w', function(err, recordsets, returnValue, affected) {
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
//---------------------------------------------Payout Calculator-----------------------------
router.post('/payoutcal2',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('enum', sql.Int, req.body.enum);
    request.input('fees', sql.Money, req.body.fees);
    request.input('evt', sql.VarChar(50), req.body.evt);
    request.input('evc', sql.VarChar(50), req.body.evc);
    request.input('added', sql.Money, req.body.added);
    request.input('plcb', sql.Int, req.body.plcb);
    request.input('flatdrag', sql.Money, req.body.flatdrag);
    request.input('percdrag', sql.Float, req.body.percdrag);
    request.input('potdrag', sql.Money, req.body.potdrag);
    request.execute('payoutcal_paydrag_w25 ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
//---------------------------------------------Payout Calculator-----------------------------
router.post('/payoutcal3',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('enum', sql.Int, req.body.enum);
    request.input('fees', sql.Money, req.body.fees);
    request.input('evt', sql.VarChar(50), req.body.evt);
    request.input('evc', sql.VarChar(50), req.body.evc);
    request.input('added', sql.Money, req.body.added);
    request.input('plcb', sql.Int, req.body.plcb);
    request.input('flatdrag', sql.Money, req.body.flatdrag);
    request.input('percdrag', sql.Float, req.body.percdrag);
    request.input('potdrag', sql.Money, req.body.potdrag);
    request.execute('payoutcal_100payout ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
//---------------------------------------------Payout Calculator-----------------------------
router.post('/payoutcal4',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('enum', sql.Int, req.body.enum);
    request.input('fees', sql.Money, req.body.fees);
    request.input('evt', sql.VarChar(50), req.body.evt);
    request.input('evc', sql.VarChar(50), req.body.evc);
    request.input('added', sql.Money, req.body.added);
    request.input('plcb', sql.Int, req.body.plcb);
    request.input('flatdrag', sql.Money, req.body.flatdrag);
    request.input('percdrag', sql.Float, req.body.percdrag);
    request.input('potdrag', sql.Money, req.body.potdrag);
    request.execute('payoutcal_3Dformat ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset)
      }
    });
  });
});
//---------------------------------------------Payout Calculator-----------------------------
router.post('/payoutcal5',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body) 
    request.input('enum', sql.Int, req.body.enum);
    request.input('fees', sql.Money, req.body.fees);
    request.input('evt', sql.VarChar(50), req.body.evt);
    request.input('evc', sql.VarChar(50), req.body.evc);
    request.input('added', sql.Money, req.body.added);
    request.input('plcb', sql.Int, req.body.plcb);
    request.input('flatdrag', sql.Money, req.body.flatdrag);
    request.input('percdrag', sql.Float, req.body.percdrag);
    request.input('potdrag', sql.Money, req.body.potdrag);
    request.execute('payoutcal_4Dformat ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send(recordsets.recordset)
      }
    });
  });
});
//---------------------------------------------Payout Calculator-----------------------------
router.post('/payoutcal6',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('enum', sql.Int, req.body.enum);
    request.input('fees', sql.Money, req.body.fees);
    request.input('evt', sql.VarChar(50), req.body.evt);
    request.input('evc', sql.VarChar(50), req.body.evc);
    request.input('added', sql.Money, req.body.added);
    request.input('plcb', sql.Int, req.body.plcb);
    request.input('flatdrag', sql.Money, req.body.flatdrag);
    request.input('percdrag', sql.Float, req.body.percdrag);
    request.input('potdrag', sql.Money, req.body.potdrag);
    request.input('Type', sql.VarChar(5), '3D');
    request.execute('payoutcal_3D_4Dheader ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
//---------------------------------------------Payout Calculator-----------------------------
router.post('/payoutcal7',function(req,res){
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    var request = new sql.Request();
    // console.log(req.body)
    request.input('enum', sql.Int, req.body.enum);
    request.input('fees', sql.Money, req.body.fees);
    request.input('evt', sql.VarChar(50), req.body.evt);
    request.input('evc', sql.VarChar(50), req.body.evc);
    request.input('added', sql.Money, req.body.added);
    request.input('plcb', sql.Int, req.body.plcb);
    request.input('flatdrag', sql.Money, req.body.flatdrag);
    request.input('percdrag', sql.Float, req.body.percdrag);
    request.input('potdrag', sql.Money, req.body.potdrag);
    request.input('Type', sql.VarChar(5), '4D');
    request.execute('payoutcal_3D_4Dheader ', function(err, recordsets, returnValue, affected) {
      if(err){
        res.sendStatus(500);
      }
      else{
          // console.log(recordsets.recordset)
          res.send(recordsets.recordset)
        }
      });
  });
});
//-------------------------------------Bulk Contact----------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/bulkcontact', function(req, res) {
    // console.log(req.body);
    var sql = "select FirstName+' '+LastName membername,Email,Phone from Members";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//-------------------------------import jpad---------------------------
var storage = multer.diskStorage({
  destination: 'uploads/Jpad/',
  filename: function (req, file, cb) {
    cb(null, file.originalname.replace(path.extname(file.originalname), "") + '-' + Date.now() + path.extname(file.originalname))
  }
})
var upload = multer({ storage: storage })
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/jpadimport', upload.single('file'), function(req,res,next){
    var zip = new AdmZip(req.file.path);
  var zipEntries = zip.getEntries(); // an array of ZipEntry records
  zipEntries.forEach(function(zipEntry) {
    if (zipEntry.entryName == 'bc_res_outs.json') {
      var data = zipEntry.getData().toString('utf8');
      for(i=0;i<data.length;i++){
        // console.log(data)
        var sql = "insert into bc_rpq(rowid,outid,pevid,evid,bbcid,perf,go,sc,place,tier,tier_place,money,points) VALUES('"+data[i].rowid+"','"+data[i].outid+"','"+data[i].pevid+"','"+data[i].evid+"','"+data[i].bbcid+"','"+data[i].perf+"','"+data[i].go+"','"+data[i].sc+"','"+data[i].place+"','"+data[i].tier+"','"+data[i].tier_place+"','"+data[i].money+"','"+data[i].points+"')";
        request.query(sql, function (err, recordsets) {     
          if(err){
            // console.log(err)
            // res.sendStatus(500);
          }
          else{
            // console.log(recordsets.recordset.length);
            // res.sendStatus(200);
          }
        });
      }
    }
    else if(zipEntry.entryName == 'bc_res_place.json') {
      var data1 = zipEntry.getData().toString('utf8');
      // console.log(data1)
      for(i=0;i<data1.length;i++){
        var sql = "insert into bc_roq(outid,pevid,entid,regno,pbid,bbcid,bno,bname,owner,del,j1,j2,j3,j4,j5,j6,bot,raw_score,dropped_judge,dropped_score,spread,score,imp_score,handi_score) VALUES('"+data1[i].outid+"','"+data1[i].pevid+"','"+data1[i].entid+"','"+data1[i].regno+"','"+data1[i].pbid+"','"+data1[i].bbcid+"','"+data1[i].bno+"','"+data1[i].bname+"','"+data1[i].owner+"','"+data1[i].del+"','"+data1[i].j1+"','"+data1[i].j2+"','"+data1[i].j3+"','"+data1[i].j4+"','"+data1[i].j5+"','"+data1[i].j6+"','"+data1[i].bot+"','"+data1[i].raw_score+"','"+data1[i].dropped_judge+"','"+data1[i].dropped_score+"','"+data1[i].spread+"','"+data1[i].score+"','"+data1[i].imp_score+"','"+data1[i].handi_score+"');";
        request.query(sql, function (err, recordsets) {     
          if(err){
            // console.log(err)
            // res.sendStatus(500);
          }
          else{
            // console.log(recordsets.recordset.length);
            // res.sendStatus(200);
          }
        });
      }
    }
  });
});
});
//-------------------------------------Adhoc List----------------------------
// sql.connect(config, function (err) { 
//   if (err) console.log(err);
//   // create Request object
//   var request = new sql.Request();
//   router.post('/adhocmembers', function(req, res) {
    // console.log(req.body);
//     // var sql = "";
//     // request.query(sql, function (err, recordsets) {     
//     //   if(err){
//     //     // console.log(err)
//     //     res.sendStatus(500);
//     //   }
//     //   else{
//     //     // console.log(recordsets.recordset);
//     //     res.send(recordsets.recordset);
//     //   }
//     // });
//   });
// });
// sql.connect(config, function (err) { 
//   if (err) console.log(err);
//   // create Request object
//   var request = new sql.Request();
//   router.post('/adhocregistration', function(req, res) {
//     console.log(req.body);
//     var sql = "";
//     request.query(sql, function (err, recordsets) {     
//       if(err){
//         // console.log(err)
//         res.sendStatus(500);
//       }
//       else{
//         // console.log(recordsets.recordset);
//         res.send(recordsets.recordset);
//       }
//     });
//   });
// });
// sql.connect(config, function (err) { 
//   if (err) console.log(err);
//   // create Request object
//   var request = new sql.Request();
//   router.post('/adhocpayments', function(req, res) {
//     console.log(req.body);
//     var sql = "";
//     request.query(sql, function (err, recordsets) {     
//       if(err){
//         // console.log(err)
//         res.sendStatus(500);
//       }
//       else{
//         // console.log(recordsets.recordset);
//         res.send(recordsets.recordset);
//       }
//     });
//   });
// });
// sql.connect(config, function (err) { 
//   if (err) console.log(err);
//   // create Request object
//   var request = new sql.Request();
//   router.post('/adhoceventsmember', function(req, res) {
//     console.log(req.body);
//     var sql = "";
//     request.query(sql, function (err, recordsets) {     
//       if(err){
//         // console.log(err)
//         res.sendStatus(500);
//       }
//       else{
//         // console.log(recordsets.recordset);
//         res.send(recordsets.recordset);
//       }
//     });
//   });
// });
// sql.connect(config, function (err) { 
//   if (err) console.log(err);
//   // create Request object
//   var request = new sql.Request();
//   router.post('/eventsanimal', function(req, res) {
    // console.log(req.body);
//     var sql = "";
//     request.query(sql, function (err, recordsets) {     
//       if(err){
//         // console.log(err)
//         res.sendStatus(500);
//       }
//       else{
//         // console.log(recordsets.recordset);
//         res.send(recordsets.recordset);
//       }
//     });
//   });
// });
// sql.connect(config, function (err) { 
//   if (err) console.log(err);
//   // create Request object
//   var request = new sql.Request();
//   router.post('/events', function(req, res) {
//     console.log(req.body);
//     var sql = "";
//     request.query(sql, function (err, recordsets) {     
//       if(err){
//         // console.log(err)
//         res.sendStatus(500);
//       }
//       else{
//         // console.log(recordsets.recordset);
//         res.send(recordsets.recordset);
//       }
//     });
//   });
// });
//---------------------------------------------------Custom Pay---------------------------------
router.get('/pay/:id', function(req,res){
  res.render('pay')
})
//---------------------------------------------------Payment Link-------------------------------------------
router.post('/paymentlink', function(req,res){
  console.log(req.body,'testttt')
    var sql = "select MemberNumber,Lastname+' '+Firstname as MemberName,Email from members where MemberNumber=Substring('"+req.body.member+"',1,charindex('-','"+req.body.member+"')-1)";
  var sql1 = "Insert into CustomPayments(MemberNumber,status,Description) values(Substring('"+req.body.member+"',1,charindex('-','"+req.body.member+"')-1),'Not Paid','"+req.body.desc+"')";  
  request.query(sql, function (err, recordsets) {  
    request.query(sql1, function (err, recordsets1) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        var transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: 'abbi@integrity-tek.com',
            pass: 'Abbi@2021'
          }
        });
        var mailOptions = {
          from: 'abbi@integrity-tek.com',
          to: recordsets.recordset[0].Email,
          subject: 'Custom Payment Link',
          html : "<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Custom Payment Request</h1>\n                      <h2>Hi '"+recordsets.recordset[0].MemberName+"'</h2>\n <p>'"+req.body.desc+"'\n                     <h2>Please Click on below link to make payment</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Pay Now</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
        };
        transporter.sendMail(mailOptions, function(error, info){
          if (error) {
            res.sendStatus(500)
          } else {
            res.sendStatus(200)
          }
        });
      }
    });
});
});
//---------------------------------------------------GPayment Link-------------------------------------------
router.post('/gcpaymentlink', function(req,res){
  var sql = "Insert into Groupcustompayments(Category,Status,MemberNumber,Description,adobelink,opendate,closedate) Values('CustomPayment','Not Paid',"+req.body.number+",'"+req.body.description+"','"+req.body.link+"','"+req.body.odate+"','"+req.body.cdate+"')";
  var sql1="select lastname+' '+Firstname as MemberName,Email from Members Where MemberNumber="+req.body.number+""
  request.query(sql, function (err, recordsets) {
    request.query(sql1, function (err, recordsets1) {    
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets1.recordset);
        var transporter = nodemailer.createTransport({
          service: 'gmail',
          auth: {
            user: 'abbi@integrity-tek.com',
            pass: 'Abbi@2021'
          }
        });

        var mailOptions = {
          from: 'abbi@integrity-tek.com',
          to: 'abbi@integrity-tek.com',
          subject: 'Custom Payment Link',
          html : "<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Custom Payment Request</h1>\n                      <h2>Hi '"+recordsets1.recordset[0].MemberName+"'</h2>\n                      <h2>Please Click on below link to make payment</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://34.66.91.118/login\" target=\"_blank\">Pay Now</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
        };
        transporter.sendMail(mailOptions, function(error, info){
          if (error) {
            res.sendStatus(500)
          } else {
            res.sendStatus(200)
          }
        });
      }
    });
});
});
//------------------------------------------------------------------Group payment user--------------------------------
router.post('/gcustompay', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    // console.log(req.body)
    var request = new sql.Request();
    var amount = req.body.amount;
    var invoice = randomstring.generate({
      length: 5,
      charset: 'numeric'
    });
    var card = req.body.cc;
    var cvv = req.body.cvv;
    var expire = req.body.expire;
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
      merchantAuthenticationType.setName(process.env.loginId);
      merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

      var creditCard = new ApiContracts.CreditCardType();
      creditCard.setCardNumber(card);
      creditCard.setExpirationDate(expire);
      creditCard.setCardCode(cvv);

      var paymentType = new ApiContracts.PaymentType();
      paymentType.setCreditCard(creditCard);

      var orderDetails = new ApiContracts.OrderType();
      orderDetails.setInvoiceNumber(invoice);
      orderDetails.setDescription('');

      var transactionRequestType = new ApiContracts.TransactionRequestType();
      transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
      transactionRequestType.setPayment(paymentType);
      transactionRequestType.setAmount(amount);   
      transactionRequestType.setOrder(orderDetails);  
      var createRequest = new ApiContracts.CreateTransactionRequest();
      createRequest.setMerchantAuthentication(merchantAuthenticationType);
      createRequest.setTransactionRequest(transactionRequestType);

      var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
      ctrl.setEnvironment(SDKConstants.endpoint.production);
      ctrl.execute(() => {
        var apiResponse = ctrl.getResponse();
        var response = new ApiContracts.CreateTransactionResponse(apiResponse);

        if(response !== null) {
          if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
            if(response.getTransactionResponse().getMessages() !== null) {
              request.input('Amount', sql.Money, req.body.amount);
              request.input('NameOnCard', sql.VarChar(50), req.body.name);
              request.input('paymentID', sql.Int, req.body.PaymentId);
              request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
              request.input('notes', sql.VarChar(500), req.body.notes);
              request.input('CCType', sql.VarChar(5), null);
              request.input('CCNumber', sql.VarChar(5), req.body.cc);
              request.input('CCExpDate', sql.VarChar(8), req.body.expire);
              request.input('CCSeccode', sql.VarChar(5), req.body.cvv);
              request.execute('gcustompay', function(err, recordsets, returnValue, affected) {
                if(err){
                  // console.log(err)
                }
                else{
                  var transporter = nodemailer.createTransport({
                    service: 'gmail',
                    auth: {
                      user: 'abbi@integrity-tek.com',
                      pass: 'Abbi@2021'
                    }
                  });

                  var mailOptions = {
                    from: 'no-reply',
                    to: 'abbi@integrity-tek.com',
                    subject: 'Group Custom Pay ',
                    html:"<!doctype html>\n<html>\n<head>\n  <meta name=\"viewport\" content=\"width=device-width\" />\n  <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n  <title>American Bucking Bull, Inc.</title>\n  <style>\n    img {\n      border: none;\n      -ms-interpolation-mode: bicubic;\n      max-width: 100%;\n    }\n    body {\n      background-color: #f6f6f6;\n      font-family: sans-serif;\n      -webkit-font-smoothing: antialiased;\n      font-size: 14px;\n      line-height: 1.4;\n      margin: 0;\n      padding: 0;\n      -ms-text-size-adjust: 100%;\n      -webkit-text-size-adjust: 100%;\n    }\n    table {\n      border-collapse: separate;\n      mso-table-lspace: 0pt;\n      mso-table-rspace: 0pt;\n      width: 100%;\n    }\n    table td {\n      font-family: sans-serif;\n      font-size: 14px;\n      vertical-align: top;\n    }\n    .body {\n      background-color: #f6f6f6;\n      width: 100%;\n    }\n    .container {\n      display: block;\n      Margin: 0 auto !important;\n      max-width: 580px;\n      padding: 10px;\n      width: 580px;\n    }\n    .content {\n      box-sizing: border-box;\n      display: block;\n      Margin: 0 auto;\n      max-width: 580px;\n      padding: 10px;\n      border: 5px solid black;\n      border-radius: 3%;\n      box-shadow: 10px 10px 10px 10px lightgrey;\n    }\n    .main {\n      background: #fff;\n      border-radius: 3px;\n      width: 100%;\n    }\n    .wrapper {\n      box-sizing: border-box;\n      padding: 20px;\n    }\n    .footer {\n      clear: both;\n      padding-top: 10px;\n      text-align: center;\n      width: 100%;\n    }\n    .footer td,\n    .footer p,\n    .footer span,\n    .footer a {\n      color: #999999;\n      font-size: 12px;\n      text-align: center;\n    }\n    h1,\n    h2,\n    h3,\n    h4 {\n      color: #000000;\n      font-family: sans-serif;\n      font-weight: 400;\n      line-height: 1.4;\n      margin: 0;\n      Margin-bottom: 30px;\n    }\n    h1 {\n      font-size: 35px;\n      font-weight: 300;\n      text-align: center;\n      text-transform: capitalize;\n    }\n    p,\n    ul,\n    ol {\n      font-family: sans-serif;\n      font-size: 14px;\n      font-weight: normal;\n      margin: 0;\n      Margin-bottom: 15px;\n    }\n    p li,\n    ul li,\n    ol li {\n      list-style-position: inside;\n      margin-left: 5px;\n    }\n    a {\n      color: #3498db;\n      text-decoration: underline;\n    }\n    .btn {\n      box-sizing: border-box;\n      width: 100%;\n    }\n    .btn>tbody>tr>td {\n      padding-bottom: 15px;\n    }\n    .btn table {\n      width: auto;\n    }\n    .btn table td {\n      background-color: #ffffff;\n      border-radius: 5px;\n      text-align: center;\n    }\n    .btn a {\n      background-color: #ffffff;\n      border: solid 1px #3498db;\n      border-radius: 5px;\n      box-sizing: border-box;\n      color: #3498db;\n      cursor: pointer;\n      display: inline-block;\n      font-size: 14px;\n      font-weight: bold;\n      margin: 0;\n      padding: 12px 25px;\n      text-decoration: none;\n      text-transform: capitalize;\n    }\n    .btn-primary table td {\n      background-color: #3498db;\n    }\n    .btn-primary a {\n      background-color: #3498db;\n      border-color: #3498db;\n      color: #ffffff;\n    }\n    .last {\n      margin-bottom: 0;\n    }\n    .first {\n      margin-top: 0;\n    }\n    .align-center {\n      text-align: center;\n    }\n    .align-right {\n      text-align: right;\n    }\n    .align-left {\n      text-align: left;\n    }\n    .clear {\n      clear: both;\n    }\n    .mt0 {\n      margin-top: 0;\n    }\n    .mb0 {\n      margin-bottom: 0;\n    }\n    .preheader {\n      color: transparent;\n      display: none;\n      height: 0;\n      max-height: 0;\n      max-width: 0;\n      opacity: 0;\n      overflow: hidden;\n      mso-hide: all;\n      visibility: hidden;\n      width: 0;\n    }\n    .powered-by a {\n      text-decoration: none;\n    }\n    hr {\n      border: 0;\n      border-bottom: 1px solid #f6f6f6;\n      Margin: 20px 0;\n    }\n    @media only screen and (max-width: 620px) {\n      table[class=body] h1 {\n        font-size: 28px !important;\n        margin-bottom: 10px !important;\n      }\n      table[class=body] p,\n      table[class=body] ul,\n      table[class=body] ol,\n      table[class=body] td,\n      table[class=body] span,\n      table[class=body] a {\n        font-size: 16px !important;\n      }\n      table[class=body] .wrapper,\n      table[class=body] .article {\n        padding: 10px !important;\n      }\n      table[class=body] .content {\n        padding: 0 !important;\n      }\n      table[class=body] .container {\n        padding: 0 !important;\n        width: 100% !important;\n      }\n      table[class=body] .main {\n        border-left-width: 0 !important;\n        border-radius: 0 !important;\n        border-right-width: 0 !important;\n      }\n      table[class=body] .btn table {\n        width: 100% !important;\n      }\n      table[class=body] .btn a {\n        width: 100% !important;\n      }\n      table[class=body] .img-responsive {\n        height: auto !important;\n        max-width: 100% !important;\n        width: auto !important;\n      }\n    }\n    @media all {\n      .ExternalClass {\n        width: 100%;\n      }\n      .ExternalClass,\n      .ExternalClass p,\n      .ExternalClass span,\n      .ExternalClass font,\n      .ExternalClass td,\n      .ExternalClass div {\n        line-height: 100%;\n      }\n      .apple-link a {\n        color: inherit !important;\n        font-family: inherit !important;\n        font-size: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n        text-decoration: none !important;\n      }\n      .btn-primary table td:hover {\n        background-color: #34495e !important;\n      }\n      .btn-primary a:hover {\n        background-color: #34495e !important;\n        border-color: #34495e !important;\n      }\n    }\n  </style>\n</head>\n<body>\n  <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"body\">\n    <tr>\n      <td>&nbsp;</td>\n      <td class=\"container\">\n        <div class=\"content\">\n          <span class=\"preheader\">Subscribe to American Bucking Bull, Inc.</span>\n          <table class=\"main\">\n            <tr>\n              <td class=\"wrapper\">\n                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                  <tr>\n                    <td>\n                      <h1>Transaction Successfull</h1>\n                      <h2>Hi "+req.session.user[0].MemberName+"</h2>\n                      <h2>Your Transaction is Successfull</h2>\n                      <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"btn btn-primary\">\n                        <tbody>\n                          <tr>\n                            <td align=\"left\">\n                              <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n                                <tbody>\n                                  <tr>\n                                    <td> <a href=\"http://210.212.210.92:2021/login\" target=\"_blank\">Login</a> </td>\n                                  </tr>\n                                </tbody>\n                              </table>\n                            </td>\n                          </tr>\n                        </tbody>\n                      </table>\n                      <p>If you received this email by mistake, simply delete it. You won\'t be subscribed if you don\'t click the confirmation link above.</p>\n\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <div class=\"footer\">\n            <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\n              <tr>\n                <td class=\"content-block\">\n                  <span class=\"apple-link\">americanbuckingbull.com | abbireg.com</span>\n                  <br> Don\'t like these emails? <a href=\"#\">Unsubscribe</a>.\n                </td>\n              </tr>\n              <tr>\n                <td class=\"content-block powered-by\">\n                  Powered by <a href=\"https://www.integrity-tek.com/\" target=\"_blank\">IntegrityTek</a>.\n                </td>\n              </tr>\n            </table>\n          </div>\n        </div>\n      </td>\n      <td>&nbsp;</td>\n    </tr>\n  </table>\n</body>\n</html>"
                  };

                  transporter.sendMail(mailOptions, function(error, info){
                    if (error) {
                    } else {
                    }
                  });
                }
              });
// console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
res.send({ msg: 'Transaction was successful.' });
} else {
  if(response.getTransactionResponse().getErrors() !== null) {
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    res.send({ msg: 'Transaction failed.' });
  }
}    
} else {
  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
    res.send({ msg: `${code}: ${text}`
  });
  } else {
    let code = response.getMessages().getMessage()[0].getCode();
    let text = response.getMessages().getMessage()[0].getText();
    res.send({ msg: `${code}: ${text}`
  });
  }   
}    

} else {
  res.send({ msg: 'No response.' });
}
});
}
});
});
//---------------------------------------------------------------Image upload--------------------------------
var storage = multer.diskStorage({
  destination: 'public/uploads/custompay',
  filename: function (req, file, cb) {
    cb(null, file.originalname.replace(path.extname(file.originalname) + path.extname(file.originalname)))
  }
})
var upload = multer({ storage: storage })
// -------------------------------------------------------------custom pay----------------------------------------------------
router.post('/custompay', function(req, res) {
  // ,upload.single('image'),
  sql.connect(config, function (err) { 
    if (err) console.log(err);
    // create Request object
    var request = new sql.Request();
    console.log(req.body,'byyyyyyyyyyyyyyyyyyyyyyy')
    var amount = Number(req.body.pay.amount);
    if(req.session && req.session.user){
      res.locals.user = req.session.user;
      console.log(req.session.user[0],"check1");
      // console.log(req.body);
      request.execute('_getinvoiceid', function(err, recordsets2, returnValue, affected) {
        if(err){
          console.log(err,'erorrrrrr');
        }
        else{
          var invoice = recordsets2.recordset[0].Invoice
          if(req.body.pay.Payment=='VI' || req.body.pay.Payment=='MC' || req.body.pay.Payment=='AMEX' || req.body.pay.Payment=='Discover'){
            var card = req.body.pay.cc;
            var cvv = req.body.pay.cvv;
            var expire = req.body.pay.expire;
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var creditCard = new ApiContracts.CreditCardType();
            creditCard.setCardNumber(card);
            creditCard.setExpirationDate(expire);
            creditCard.setCardCode(cvv);

            var paymentType = new ApiContracts.PaymentType();
            paymentType.setCreditCard(creditCard);

            var orderDetails = new ApiContracts.OrderType();
            orderDetails.setInvoiceNumber(invoice);
            orderDetails.setDescription('Custom Payment');

            var billTo = new ApiContracts.CustomerAddressType();
            billTo.setFirstName(req.session.user[0].FirstName);
            billTo.setLastName(req.session.user[0].LastName);
            billTo.setAddress(req.session.user[0].Address);
            billTo.setCity(req.session.user[0].City);
            billTo.setState(req.session.user[0].State);
            billTo.setZip(req.session.user[0].Zip);
            billTo.setCountry(req.session.user[0].Country);
            billTo.setPhoneNumber(req.session.user[0].Phone);
            billTo.setFaxNumber(req.session.user[0].Fax);

            var shipTo = new ApiContracts.CustomerAddressType();
            shipTo.setFirstName(req.session.user[0].FirstName);
            shipTo.setLastName(req.session.user[0].LastName);
            shipTo.setAddress(req.session.user[0].Address);
            shipTo.setCity(req.session.user[0].City);
            shipTo.setState(req.session.user[0].State);
            shipTo.setZip(req.session.user[0].Zip);
            shipTo.setCountry(req.session.user[0].Country);

            var customer = new ApiContracts.CustomerDataType();
            customer.setEmail(req.session.user[0].Email)

            var transactionRequestType = new ApiContracts.TransactionRequestType();
            transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
            transactionRequestType.setPayment(paymentType);
            transactionRequestType.setAmount(amount);
            transactionRequestType.setBillTo(billTo);
            transactionRequestType.setOrder(orderDetails);
            transactionRequestType.setShipTo(shipTo);      
            transactionRequestType.setCustomer(customer);
            var createRequest = new ApiContracts.CreateTransactionRequest();
            createRequest.setMerchantAuthentication(merchantAuthenticationType);
            createRequest.setTransactionRequest(transactionRequestType);

            var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
            ctrl.setEnvironment(SDKConstants.endpoint.production);
            ctrl.execute(() => {
              console.log('insideeeeeeeeeeeeeeeeee')
              var apiResponse = ctrl.getResponse();
              var response = new ApiContracts.CreateTransactionResponse(apiResponse);

              if(response !== null) {
                console.log(response,'responseeeeeeeeeeeeee')
                if(response.getMessages().getResultCode() === ApiContracts.MessageTypeEnum.OK) {
                  if(response.getTransactionResponse().getMessages() !== null) {
                    var date = moment().format('MM-DD-YYYY');
                    request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
                    request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
                    request.input('CCNumber', sql.VarChar(50), card);
                    request.input('CCExpDate', sql.VarChar(50), req.body.pay.expire);
                    request.input('CCSecCode', sql.VarChar(50), req.body.pay.cvv);
                    request.input('eChkABACode', sql.VarChar(9), null);
                    request.input('eChkAcctNo', sql.VarChar(4), null);
                    request.input('eChkAcctType', sql.VarChar(20), null);
                    request.input('eChkAcctName', sql.VarChar(50), null);
                    request.input('eChkBankName', sql.VarChar(50), null);
                    request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
                    request.input('Amount', sql.Money, amount);
                    request.input('Description', sql.VarChar(50), req.body.customdata.Description);
                    request.input('DocumentName', sql.VarChar(50), null);
                    request.execute('CustomPay', function(err, recordsets, returnValue, affected) {
                      if(err){
                        console.log(err,'error')
                      }
                      else{
                          console.log(recordsets,'ooo')
                      }
                    });
                    // console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
                    res.send({ msg: 'Transaction was successful.' });
                  } else {
                    if(response.getTransactionResponse().getErrors() !== null) {
                      let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                      let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                      res.send({ msg: `${code}: ${text}`
                    });
                    } else {
                      res.send({ msg: 'Transaction failed.' });
                    }
                  }    
                } else {
                  if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){
                    let code = response.getTransactionResponse().getErrors().getError()[0].getErrorCode();
                    let text = response.getTransactionResponse().getErrors().getError()[0].getErrorText();
                    res.send({ msg: `${code}: ${text}`
                  });
                  } else {
                    let code = response.getMessages().getMessage()[0].getCode();
                    let text = response.getMessages().getMessage()[0].getText();
                    res.send({ msg: `${code}: ${text}`
                  });
                  }   
                }    

              } else {
                res.send({ msg: 'No response.' });
              }
            });
          }
          else if(req.body.pay.Payment=='eCheck'){
            // console.log(req.body.pay.Payment)
            var merchantAuthenticationType = new ApiContracts.MerchantAuthenticationType();
            merchantAuthenticationType.setName(process.env.loginId);
            merchantAuthenticationType.setTransactionKey(process.env.transactionKey);

            var bankAccountType = new ApiContracts.BankAccountType();
            bankAccountType.setAccountType(ApiContracts.BankAccountTypeEnum.SAVINGS);
            bankAccountType.setRoutingNumber(req.body.pay.aba);
            // console.log(req.body.pay.aba)
  //added code
  var bankAccountNum = req.body.pay.acno;
  // console.log(req.body.pay.acno)
  bankAccountType.setAccountNumber(bankAccountNum.toString());
  bankAccountType.setNameOnAccount(req.body.pay.acname);
  // console.log(req.body.pay.acname)

  var paymentType = new ApiContracts.PaymentType();
  paymentType.setBankAccount(bankAccountType);
  
  var orderDetails = new ApiContracts.OrderType();
  orderDetails.setInvoiceNumber(invoice);
  orderDetails.setDescription('Custom Payment');

  var billTo = new ApiContracts.CustomerAddressType();
  billTo.setFirstName(req.session.user[0].FirstName);
  billTo.setLastName(req.session.user[0].LastName);
  billTo.setAddress(req.session.user[0].Address);
  billTo.setCity(req.session.user[0].City);
  billTo.setState(req.session.user[0].State);
  billTo.setZip(req.session.user[0].Zip);
  billTo.setCountry(req.session.user[0].Country);
  billTo.setPhoneNumber(req.session.user[0].Phone);
  billTo.setFaxNumber(req.session.user[0].Fax);

  var shipTo = new ApiContracts.CustomerAddressType();
  shipTo.setFirstName(req.session.user[0].FirstName);
  shipTo.setLastName(req.session.user[0].LastName);
  shipTo.setAddress(req.session.user[0].Address);
  shipTo.setCity(req.session.user[0].City);
  shipTo.setState(req.session.user[0].State);
  shipTo.setZip(req.session.user[0].Zip);
  shipTo.setCountry(req.session.user[0].Country);

  var customer = new ApiContracts.CustomerDataType();
  customer.setEmail(req.session.user[0].Email);

  var transactionRequestType = new ApiContracts.TransactionRequestType();
  transactionRequestType.setTransactionType(ApiContracts.TransactionTypeEnum.AUTHCAPTURETRANSACTION);
  transactionRequestType.setPayment(paymentType);
  transactionRequestType.setAmount(amount);
  transactionRequestType.setBillTo(billTo);
  transactionRequestType.setOrder(orderDetails);
  transactionRequestType.setShipTo(shipTo);
  transactionRequestType.setCustomer(customer);
  var createRequest = new ApiContracts.CreateTransactionRequest();
  createRequest.setMerchantAuthentication(merchantAuthenticationType);
  createRequest.setTransactionRequest(transactionRequestType);

  var ctrl = new ApiControllers.CreateTransactionController(createRequest.getJSON());
  ctrl.setEnvironment(SDKConstants.endpoint.production);
  ctrl.execute(function(){

    var apiResponse = ctrl.getResponse();

    var response = new ApiContracts.CreateTransactionResponse(apiResponse);

    if(response != null){
      if(response.getMessages().getResultCode() == ApiContracts.MessageTypeEnum.OK){
        if(response.getTransactionResponse().getMessages() != null){
          var date = moment().format('MM-DD-YYYY');
          request.input('MemberNumber', sql.Int, req.session.user[0].MemberNumber);
          request.input('CCType', sql.VarChar(50), req.body.pay.Payment);
          request.input('CCNumber', sql.VarChar(50), null);
          request.input('CCExpDate', sql.VarChar(50), null);          
          request.input('CCSecCode', sql.VarChar(50), null);
          request.input('eChkABACode', sql.VarChar(9), req.body.pay.aba);
          request.input('eChkAcctNo', sql.VarChar(4), req.body.pay.acno);
          request.input('eChkAcctType', sql.VarChar(20), req.body.pay.actype);
          request.input('eChkAcctName', sql.VarChar(50), req.body.pay.acname);
          request.input('eChkBankName', sql.VarChar(50), req.body.pay.bank);
          request.input('PymtType', sql.VarChar(20), req.body.pay.Payment);
          request.input('Amount', sql.Money, amount);
          request.input('Description', sql.VarChar(50), req.body.customdata.Description);
          request.input('DocumentName', sql.VarChar(50), null);
          request.execute('_AdditionalDNAreq', function(err, recordsets, returnValue, affected) {
            if(err){
              // console.log(err)
            }
            else{
              
            }
          });
          res.send({ msg:'Transaction Successfull'});
          // console.log({ msg:'Response Code: ' + response.getTransactionResponse().getResponseCode()});
          res.send({ msg: 'Transaction was successful.' });
        }  
        else {
          // res.send({ msg:'Failed Transaction.'});
          if(response.getTransactionResponse().getErrors() != null){
            // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
            res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
          }
        }
      }
      else {
        // res.send({ msg:'Failed Transaction. '});
        if(response.getTransactionResponse() != null && response.getTransactionResponse().getErrors() != null){

          // console.log({ msg:'Error Code: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorCode()});
          res.send({ msg:'Error message: ' + response.getTransactionResponse().getErrors().getError()[0].getErrorText()});
        }
        else {
          // console.log({ msg:'Error Code: ' + response.getMessages().getMessage()[0].getCode()});
          res.send({ msg:'Error message: ' + response.getMessages().getMessage()[0].getText()});
        }
      }
    }
    else {
      res.send({ msg:'Null Response.'});
    }
  });
}
}
});
}
});
});

//-------------------------------------------------------------Member Profile Update-----------------------------------------------------
router.post('/searchmemproupd', function(req, res) {
  sql.connect(config, function (err) { 
    if (err) console.log(err);
        // create Request object
        var request = new sql.Request();
        request.input('MemberNo', sql.Int, req.body.member);
        request.input('Sdate', sql.VarChar(255), req.body.sdate);
        request.input('Edate', sql.VarChar(255), req.body.edate);
        request.execute('getmemupdatefieldsrep', function(err, recordsets, returnValue, affected) {
          if(err){
            // console.log(err)
            res.sendStatus(500);
          }
          else{
            // console.log(recordsets.recordset)
            res.send(recordsets.recordset);
          }
        });
      });
});
//----------------------------------------------------------------cpay user-----------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/cpaysearch', function(req, res) {
    var sql = "select count(*) as count from CustomPayments where MemberNumber="+req.session.user[0].MemberNumber+" and status='Not Paid'";
    // console.log(sql);
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset[0].count);
        res.send({count : recordsets.recordset[0].count, data : recordsets.recordset});
      }
    });
  });
});
//----------------------------------------------------------------gcpay user-----------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/gcpaysearch', function(req, res) {
    var sql = "select Top 1 * from Groupcustompayments where MemberNumber="+req.session.user[0].MemberNumber+" and status='Not Paid' order by paymentdate desc";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset)
        res.send({count : recordsets.recordset.length, data : recordsets.recordset});
      }
    });
  });
});
//----------------------------------------------------------------Animal Approval-----------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/animalapprovaldata', function(req, res) {
    var sql = "select RegNo,MemberNo,Animal,PrivateHerd,Typeservice,Description,picture,(Case When picstatus=0 then 'Approved' else 'Pending For Approval' end) as picstatus from Registration where Isnull(picstatus,1)=1";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset.length);
        res.send(recordsets.recordset);
      }
    });
  });
});
//--------------------------------------------------------------------Animal Approval Button----------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/animalapprovalbutton', function(req, res) {
    // console.log(req.body);
    var sql = "Update Registration set Picstatus=0 where Regno="+req.body.RegNo+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
//----------------------------------------------------------------Animal Denied-----------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/animaldenybutton', function(req, res) {
    var sql = "Update Registration set picstatus=2 where RegNo="+req.body.RegNo+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset.length);
        res.sendStatus(200);
      }
    });
  });
});
//----------------------------------------------------------------Member Approval-----------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/memberapprovaldata', function(req, res) {
    var sql = "select *,(Case When picstatus=0 then 'Approved' else 'Pending For Approval' end) as picstatus1,Lastname+','+firstname as Member from Members where Isnull(picstatus,1)=1";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//----------------------------------------------------------------Member Approval Button------------------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/memberapprovalbutton', function(req, res) {
    // console.log(req.body);
    var sql = "Update Members set picstatus=0 where MemberNumber="+req.body.MemberNumber+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  });
});
//----------------------------------------------------------------Member Denied-----------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.post('/memberdenybutton', function(req, res) {
    var sql = "Update Members set picstatus=2 where MemberNumber="+req.body.MemberNumber+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset.length);
        res.sendStatus(200);
      }
    });
  });
});
//----------------------------------------------------------------Event without EID-----------------------------------------------------------
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  router.get('/animalwoeid', function(req, res) {
    var sql = "select ea.*,(select LastName+','+FirstName from Members Where MemberNumber=ea.MemberNumber) as MemberName,em.EventTitle from Events_Animal ea Join Events_Member em on ea.EventsMember=em.EventsMemberID and ea.EventID=em.EventID and ea.MemberNumber=em.MemberNumber Join Events e on e.EventID=ea.EventID Where ISNULL(EID,'')='' and Cast(CloseDate as date)>CAST(GETDATE() as date)";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        console.log(recordsets.recordset);
        res.send(recordsets.recordset);
      }
    });
  });
});
//------------------------------------------------------------------Animal image update-------------------------
var storage = multer.diskStorage({
  destination: 'public/uploads/animals',
  filename: function (req, file, cb) {
    cb(null, file.originalname.replace(path.extname(file.originalname) + path.extname(file.originalname)))
  }
})
sql.connect(config, function (err) { 
  if (err) console.log(err);
  // create Request object
  var request = new sql.Request();
  var upload = multer({ storage: storage })
  router.post('/fileUpload', upload.single('file'), function(req,res){
    // console.log(req.file)
    var sql = "Update Registration set picstatus=1 where RegNo="+req.body.RegNo+"";
    request.query(sql, function (err, recordsets) {     
      if(err){
        // console.log(err)
        res.sendStatus(500);
      }
      else{
        // console.log(recordsets.recordset);
        res.sendStatus(200);
      }
    });
  })
});
module.exports = router;